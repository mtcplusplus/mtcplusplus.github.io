<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021 資訊之芽入芽考 E. 大整數</title>
    <url>/ojques/2021-sprout-oj-no-840/</url>
    <content><![CDATA[<h3 id="題目連結：Sprout-Online-Judge-No-840"><a href="#題目連結：Sprout-Online-Judge-No-840" class="headerlink" title="題目連結：Sprout Online Judge No. 840"></a>題目連結：<a href="https://neoj.sprout.tw/problem/840/">Sprout Online Judge No. 840</a></h3><h4 id="題目敘述"><a href="#題目敘述" class="headerlink" title="題目敘述"></a>題目敘述</h4><p>你有一個大整數 \(012345678910111213141516171819202122…\)</p>
<p>也就是說，這個大整數是把所有非負整數依序串在一起。</p>
<p>現在，給你 \(n\)、\(k\)，請你輸出，在這個大整數中，由左至右第 \(n\) 次出現數字 \(k\)，是出現在第幾個位置？</p>
<p>位置從 1 開始算，並保證 \(k\) 是介於 \(0\) 到 \(9\) 之間的整數。</p>
<p>注意到，因為這個大整數太特別了，你定義這個大整數的第一位是 \(0\) 。</p>
<p>\(n \le 10^{12}, 0 \le k \le 9\)</p>
<h4 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h4><p>數字這麼大，一定是二分搜尋，找出最後一個含有數字 \(k\) 小於 \(n\) 的數字，而求出在 \(num\) 之前有多少數字 \(k\) 的方法如下。</p>
<p>若 \(k &#x3D; 0\)，則要分開討論。</p>
<ol>
<li><p>\(k&#x3D;0\)<br>我們逐位討論，每一次將數字分為 \(cur, high, low\)，分別是現在這一位數，在他左邊的數，以及在他右邊的數。<br>以 \(1034\) 為例：<br>第一次進入迴圈時 \(high&#x3D;103, cur&#x3D;4, low&#x3D;0, base&#x3D;1\)。 因為 \(cur \ne 0\)，因此會有 \(10,20,30…1030\)，共 \(103\) 個 \(0\)。<br>第二次進入迴圈時 \(high&#x3D;10, cur&#x3D;3, low&#x3D;4, base&#x3D;10\)。 同樣因 \(cur \ne 0\)，因此會有 \(100,101,102…300…1000\)，共 \(100\) 個 \(0\)。<br>第三次進入迴圈時 \(high&#x3D;1, cur&#x3D;0, low&#x3D;34, base&#x3D;100\)。 這次 \(cur &#x3D; 0\)，因此 \(1000,1001,1002…1034\)，共 \(35\) 個 \(0\)。<br>最後不要忘記還有 \(0\) 本身也是一個。</p>
</li>
<li><p>\( k&gt; 0\)<br>同樣逐位討論，每一次將數字分為 \(cur, high, low\)，分別是現在這一位數，在他左邊的數，以及在他右邊的數。<br>以 \(1034, k&#x3D;2\) 為例：<br>第一次進入迴圈時 \(high&#x3D;103, cur&#x3D;4, low&#x3D;0, base&#x3D;1\)。 因為 \(cur &gt; k\)，因此會有 \(2,12,22,32…1032\)，共 \(104\) 個 \(2\)。<br>第二次進入迴圈時 \(high&#x3D;10, cur&#x3D;3, low&#x3D;4, base&#x3D;10\)。 同樣因 \(cur &gt; k\)，因此會有 \(20,21,22,23…320…1020\)，共 \(110\) 個 \(2\)。<br>第三次進入迴圈時 \(high&#x3D;1, cur&#x3D;0, low&#x3D;34, base&#x3D;100\)。 這次 \(cur &lt; k\)，因此 \(200,201,202…299\)，共 \(100\) 個 \(2\)。</p>
</li>
</ol>
<p>※上面的說明，也有 HackMD 版，有興趣的伙伴，可以點按連結：<a href="https://hackmd.io/@mtmatt/r1TUgTC6t" title="求 \(0 \sim n\) 當中有幾個數字 \(k(0 \le k \le 9)\) - HackMD">求 \(0 \sim n\) 當中有幾個數字 \(k(0 \le k \le 9)\) - HackMD(↗)</a>。</p>
<h4 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// just for 0</span></span><br><span class="line"><span class="function">ll <span class="title">countDigit</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ll high=n,tp=<span class="number">0</span>,cur=<span class="number">0</span>,low=<span class="number">0</span>,base=<span class="number">1</span>,ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(high&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        high=n/(<span class="number">10</span>*base);</span><br><span class="line">        tp=n%(<span class="number">10</span>*base);</span><br><span class="line">        cur=tp/base;</span><br><span class="line">        low=tp%base;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="number">0</span>)&#123;</span><br><span class="line">            ret+=(high<span class="number">-1</span>)*base+low+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ret+=high*base;</span><br><span class="line">        &#125;</span><br><span class="line">        base*=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// only for 1~9</span></span><br><span class="line"><span class="function">ll <span class="title">countDigit</span><span class="params">(ll n,ll k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">countDigit</span>(n);</span><br><span class="line">    ll high=n,tp=<span class="number">0</span>,cur=<span class="number">0</span>,low=<span class="number">0</span>,base=<span class="number">1</span>,ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(high&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        high=n/(<span class="number">10</span>*base);</span><br><span class="line">        tp=n%(<span class="number">10</span>*base);</span><br><span class="line">        cur=tp/base;</span><br><span class="line">        low=tp%base;</span><br><span class="line">        <span class="keyword">if</span>(cur==k)&#123;</span><br><span class="line">            ret+=high*base+low+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur&lt;k)&#123;</span><br><span class="line">            ret+=high*base;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ret+=(high+<span class="number">1</span>)*base;</span><br><span class="line">        &#125;</span><br><span class="line">        base*=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    ll n,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">    ll l=<span class="number">0</span>,r=<span class="number">1000000000000000000</span>;</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        ll mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">countDigit</span>(mid,k)&gt;=n)&#123;</span><br><span class="line">            r=mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll ans=<span class="built_in">countDigit</span>(l);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i)&#123;</span><br><span class="line">        ans+=<span class="built_in">countDigit</span>(l,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll ctd=<span class="built_in">countDigit</span>(l,k);</span><br><span class="line">    l++;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ns;</span><br><span class="line">    <span class="keyword">while</span>(l&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        ns.<span class="built_in">emplace_back</span>(l%<span class="number">10</span>);</span><br><span class="line">        l/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(ns.<span class="built_in">begin</span>(),ns.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//  search the nth k</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ns.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ctd==n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(ns[i]==k) ctd++;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>sproutoj</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 全國學科能力競賽模擬賽 2.BGP</title>
    <url>/ojques/2021-nhspc-2-bgp/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我發現，全國能力競賽的難度似乎與我預期的有落差，這一題也是我唯一一個完全解開的題目。真的好難！</p>
<h4 id="題目敘述"><a href="#題目敘述" class="headerlink" title="題目敘述"></a>題目敘述</h4><p>「BGP 劫持（BGP Hijacking）」是⼀種透過「邊界閘道器協定（Border Gateway Protocol,BGP）」 的性質進⾏攻擊的⼿段。簡單來說，每個伺服器會宣稱⾃⼰擁有⼀段 IP，並將這個訊息傳遞給周遭的伺服器，來更新他們的路由表。周遭的伺服器也會將這個更新繼續往外傳遞，使伺服器知道要如何將封包傳遞到指定的IP。而 BGP 劫持這個攻擊⼿法，就是透過錯誤地宣稱⾃⼰擁有某⼀段 IP，或者是⾃⼰通往擁有該 IP 的伺服器路徑更短，來使得其他路由器將 IP 往他傳遞。並透過 BGP 更新路由表的特性進⾏⼤規模的流量轉移，使得使⽤者無法存取特定的服務，或者是拿到封包之後拆解其中的內容以獲得敏感資訊。</p>
<p>現在，全國資訊安全能⼒競賽模擬賽要進⾏⼀場 BGP 劫持的攻防⼤賽。這場⽐賽⼀共有 N ⽀隊伍參加，每⽀隊伍會維護⼀台伺服器，之後主辦⽅每次會把⼀個封包丟給⼀個伺服器，並指定他要傳向哪個伺服器。接著每台伺服器會根據他的路由表，選擇⼀個伺服器傳遞封包，而參賽者要做的就是盡可能讓不相關的封包經過⾃⼰，從而破解其中的資訊，而封包的傳遞⽅和接收⽅則要負責保護傳遞的路徑不要被攻擊。作為全國資安第⼀把交椅，翔哥也有關注全國資訊安全能⼒競賽模擬賽，但是翔哥真的太強了，這種⽐賽的勝敗他並不放在⼼上，他關⼼的是有沒有可能⼤家都享受到⽐賽的過程。雖然傳遞的路徑會根據路由表以及接收者而異，可是這對翔哥來說是 a piece of cake。他已經預測出了 M 個封包潛在被劫持的⽅式。根據封包傳遞的性質，這些路徑必定不會讓封包在數個隊伍之間循環傳遞。</p>
<p>現在，翔哥想知道是否存在⼀種 BGP 劫持的狀況，使得封包會經過每⽀隊伍恰好⼀次。</p>
<h4 id="輸入說明"><a href="#輸入說明" class="headerlink" title="輸入說明"></a>輸入說明</h4><p>輸⼊的第⼀⾏包含兩個⾮負整數 N 、M ，代表全國資訊安全能⼒競賽模擬賽⼀共有 N 個隊伍參加，且 有 M 個可能的封包劫持狀況。 接下來的 M ⾏，每⾏包含兩個正整數 si、ti，代表第 si 個隊伍拿到的封包有可能被第 ti 個隊伍劫持。 保證不存在⼀種劫持路徑使得⼀個封包可以在數個隊伍之間循環傳遞。</p>
<h4 id="輸出說明"><a href="#輸出說明" class="headerlink" title="輸出說明"></a>輸出說明</h4><p>如果存在⼀種劫持封包的⽅式，使得每個隊伍會接⼿那個封包恰好⼀次，請輸出 N 個正整數於⼀⾏，代表封包可以依序經過哪些隊伍的伺服器，否則請輸出 −1。如果有很多種封包傳遞路徑都滿⾜條件，輸出任意⼀個都可以獲得 Accepted。</p>
<h4 id="範例輸入-1"><a href="#範例輸入-1" class="headerlink" title="範例輸入 1"></a>範例輸入 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 8</span><br><span class="line">5 2</span><br><span class="line">3 1</span><br><span class="line">2 4</span><br><span class="line">5 1</span><br><span class="line">3 2</span><br><span class="line">5 2</span><br><span class="line">1 2</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure>

<h4 id="範例輸出-1"><a href="#範例輸出-1" class="headerlink" title="範例輸出 1"></a>範例輸出 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 5 1 2 4</span><br></pre></td></tr></table></figure>

<h4 id="範例輸入-2"><a href="#範例輸入-2" class="headerlink" title="範例輸入 2"></a>範例輸入 2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 4</span><br><span class="line">3 4</span><br><span class="line">5 2</span><br><span class="line">2 1</span><br><span class="line">5 3</span><br></pre></td></tr></table></figure>

<h4 id="範例輸出-2"><a href="#範例輸出-2" class="headerlink" title="範例輸出 2"></a>範例輸出 2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure>

<h3 id="題解"><a href="#題解" class="headerlink" title="題解"></a>題解</h3><p>剛看到題目可能會以為是漢米頓路徑。然而實際上仔細閱讀後應該會發現，他保證圖是一個DAG，也因此可以主張一個貪婪法性質，必須由入度為0的點開始。並且，因為入度為0的點沒有進入的邊，所以兩個或以上的點入度為0時保證沒有路徑。如下圖</p>
<p><img src="https://live.staticflickr.com/65535/51722846052_b2fde783ca_o.png" alt="BGP_1">必定是依照 1 -&gt; 2 -&gt; 3 的順序拔點，而下圖是一個沒有路徑的範例</p>
<p><img src="https://live.staticflickr.com/65535/51723904893_dce9ea825e_o.png" alt="BGP_2">因為拔完1之後有兩個點入度為0，所以無解。</p>
<p>實作程式碼如下(因為比賽所以含有比較多巨集和一些其他的簡化技巧，我會在使用時加上註解)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//縮短long long變數宣告以及常用常數</span></span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> ll MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> ll INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> ll LINF=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> ll N=<span class="number">1000010</span>;</span><br><span class="line"><span class="type">const</span> ll M=<span class="number">1010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> PI=<span class="number">3.14159265358979</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//巨集(競賽縮短程式碼技巧)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(v) v.begin(),v.end();</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> siz(v) ((int)v.size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EB emplace_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PB pop_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EF emplace_front</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PF pop_front</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EE emplace</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs resize</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MP make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> prior=priority_queue&lt;T&gt;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> Prior=priority_queue&lt;T,vector&lt;T&gt;,greater&lt;T&gt;&gt;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> Stack=stack&lt;T,vector&lt;T&gt;&gt;;</span><br><span class="line"><span class="keyword">using</span> pii=pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll=pair&lt;ll,ll&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//N=1000010</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"><span class="comment">//ind存入度</span></span><br><span class="line"><span class="type">int</span> ind[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">        <span class="type">int</span> f,t;</span><br><span class="line">        cin&gt;&gt;f&gt;&gt;t;</span><br><span class="line"><span class="comment">//      EB -&gt; emplace_back</span></span><br><span class="line">        g[f].<span class="built_in">EB</span>(t);</span><br><span class="line">        ind[t]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; bfs;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ctind=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ind[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            ctind++;</span><br><span class="line"><span class="comment">//          EE -&gt; emplace</span></span><br><span class="line">            bfs.<span class="built_in">EE</span>(i);</span><br><span class="line"><span class="comment">//          兩個或以上的點入度為0</span></span><br><span class="line">            <span class="keyword">if</span>(ctind&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">while</span>(!bfs.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> n=bfs.<span class="built_in">front</span>();</span><br><span class="line">        bfs.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//      EB -&gt; emplace_back</span></span><br><span class="line">        ans.<span class="built_in">EB</span>(n);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ctind=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:g[n])&#123;</span><br><span class="line">            ind[i]--;</span><br><span class="line">            <span class="keyword">if</span>(ind[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                ctind++;</span><br><span class="line"><span class="comment">//              EE -&gt; emplace</span></span><br><span class="line">                bfs.<span class="built_in">EE</span>(i);</span><br><span class="line"><span class="comment">//              兩個或以上的點入度為0</span></span><br><span class="line">                <span class="keyword">if</span>(ctind&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:ans)&#123;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>APCS 2021/9/5</title>
    <url>/apcs/apcspracticaltest/apcs-2021-9-5/</url>
    <content><![CDATA[<h3 id="1-對聯"><a href="#1-對聯" class="headerlink" title="1. 對聯"></a>1. 對聯</h3><ul>
<li>A : 2, 4字平仄不同 &amp;&amp; 2, 6平仄相同</li>
<li>B : 第一句最後一字仄，第二句則是平</li>
<li>C : 第一二句2, 4, 6 字分別平仄不同</li>
</ul>
<h4 id="input-七言對聯-0-平-1-仄"><a href="#input-七言對聯-0-平-1-仄" class="headerlink" title="input : 七言對聯 0-&gt;平, 1-&gt;仄"></a>input : 七言對聯 0-&gt;平, 1-&gt;仄</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0 0 0 0 1 1 1</span><br><span class="line">1 1 1 1 0 0 0</span><br></pre></td></tr></table></figure>

<h4 id="ouput-違反ABC哪些個規則就輸出相對應的英文字母-ABC-，若沒違反則輸出-“None”"><a href="#ouput-違反ABC哪些個規則就輸出相對應的英文字母-ABC-，若沒違反則輸出-“None”" class="headerlink" title="ouput : 違反ABC哪些個規則就輸出相對應的英文字母(ABC)，若沒違反則輸出 “None”"></a>ouput : 違反ABC哪些個規則就輸出相對應的英文字母(ABC)，若沒違反則輸出 “None”</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure>

<h3 id="2-炸彈魔王"><a href="#2-炸彈魔王" class="headerlink" title="2. 炸彈魔王"></a>2. 炸彈魔王</h3><p>遊戲採回合制，回合開始時若魔王位於炸彈上則所有在同一格的魔王會連同炸彈一起消失，所有未消失的魔王會先在腳下放一顆炸彈，再依據方向向量(s, t)移動。移動到邊界外的魔王視為消失。 求所有魔王消失時還有未爆彈的地點數。</p>
<p>n,m,r,c &lt;&#x3D; 100, k&lt;500, |s,t|&lt;&#x3D;10</p>
<h4 id="input-第一行-n-m-k-分別表示地圖長寬以及魔王數，接下來有-k-行每一行都有-r-c-s-t-分別表示魔王初始位置座標，以及移動向量。"><a href="#input-第一行-n-m-k-分別表示地圖長寬以及魔王數，接下來有-k-行每一行都有-r-c-s-t-分別表示魔王初始位置座標，以及移動向量。" class="headerlink" title="input : 第一行 n, m, k 分別表示地圖長寬以及魔王數，接下來有 k 行每一行都有 r, c, s, t 分別表示魔王初始位置座標，以及移動向量。"></a>input : 第一行 n, m, k 分別表示地圖長寬以及魔王數，接下來有 k 行每一行都有 r, c, s, t 分別表示魔王初始位置座標，以及移動向量。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 3 2</span><br><span class="line">1 2 0 -1</span><br><span class="line">2 1 1 -2</span><br></pre></td></tr></table></figure>

<h4 id="output"><a href="#output" class="headerlink" title="output:"></a>output:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<h3 id="3-幸運號碼"><a href="#3-幸運號碼" class="headerlink" title="3. 幸運號碼"></a>3. 幸運號碼</h3><p>給一個陣列，依據以下步驟尋找答案。</p>
<ol>
<li>找到區間最小值</li>
<li>依據最小值分為左右兩邊詢問</li>
<li>選擇區間和較小的一邊作為下個搜索區間 n&lt;&#x3D;300000</li>
</ol>
<h4 id="input"><a href="#input" class="headerlink" title="input :"></a>input :</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">3 2 1 5 4 7</span><br></pre></td></tr></table></figure>

<h4 id="output-1"><a href="#output-1" class="headerlink" title="output:"></a>output:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>

<h3 id="4-美食"><a href="#4-美食" class="headerlink" title="4. 美食"></a>4. 美食</h3><p>有 n 攤美食和 k 個人，每個人必須吃連續區段的攤位，且菜色不得重複。求最大可以被吃到的攤位數。</p>
<p>n&lt;&#x3D;1000000, k&lt;&#x3D;20, nk&lt;&#x3D;5000000, a[i]&lt;100000</p>
<p>其他限制 50% k&#x3D;1 100% none</p>
<h4 id="input-1"><a href="#input-1" class="headerlink" title="input :"></a>input :</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 1</span><br><span class="line">1 2 3 1 2</span><br></pre></td></tr></table></figure>

<h4 id="output-2"><a href="#output-2" class="headerlink" title="output:"></a>output:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcspracticaltest</category>
      </categories>
      <tags>
        <tag>apcs</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder ABC 215 A</title>
    <url>/ojques/atcoder-abc-215-a-your-first-judge/</url>
    <content><![CDATA[<h3 id="題目連結：AtCoder-Beginner-Contest-215-A-Your-First-Judge"><a href="#題目連結：AtCoder-Beginner-Contest-215-A-Your-First-Judge" class="headerlink" title="題目連結：AtCoder Beginner Contest 215: A - Your First Judge"></a>題目連結：<a href="https://atcoder.jp/contests/abc215/tasks/abc215_a" title="題目連結">AtCoder Beginner Contest 215: A - Your First Judge</a></h3><h4 id="題目敘述"><a href="#題目敘述" class="headerlink" title="題目敘述"></a>題目敘述</h4><p>給定一個字串 S，輸出 AC 若 S&#x3D;&#x3D;”Hello,World!” 否則輸出 WA。</p>
<h4 id="輸入說明"><a href="#輸入說明" class="headerlink" title="輸入說明"></a>輸入說明</h4><p>輸⼊一行字串</p>
<h4 id="範例輸入-1"><a href="#範例輸入-1" class="headerlink" title="範例輸入 1"></a>範例輸入 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello,World!</span><br></pre></td></tr></table></figure>

<h4 id="範例輸出-1"><a href="#範例輸出-1" class="headerlink" title="範例輸出 1"></a>範例輸出 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AC</span><br></pre></td></tr></table></figure>

<h4 id="範例輸入-2"><a href="#範例輸入-2" class="headerlink" title="範例輸入 2"></a>範例輸入 2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello,world!</span><br></pre></td></tr></table></figure>

<h4 id="範例輸出-2"><a href="#範例輸出-2" class="headerlink" title="範例輸出 2"></a>範例輸出 2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WA</span><br></pre></td></tr></table></figure>

<h3 id="題解"><a href="#題解" class="headerlink" title="題解 :"></a>題解 :</h3><p>直接判斷即可(s &#x3D;&#x3D; “Hello,World!”)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    string ipt;</span><br><span class="line">    cin&gt;&gt;ipt;</span><br><span class="line">    <span class="keyword">if</span>(ipt==<span class="string">&quot;Hello,World!&quot;</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;AC&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;WA&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>abc</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder ABC 215 B</title>
    <url>/ojques/atcoder-abc-215-b-log2n/</url>
    <content><![CDATA[<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML' async></script>

<h3 id="題目連結AtCoder-Beginner-Contest-215-B-log2-N"><a href="#題目連結AtCoder-Beginner-Contest-215-B-log2-N" class="headerlink" title="題目連結AtCoder Beginner Contest 215: B - log2(N)"></a>題目連結<a href="https://atcoder.jp/contests/abc215/tasks/abc215_b" title="題目連結">AtCoder Beginner Contest 215: B - log2(N)</a></h3><h4 id="題目敘述"><a href="#題目敘述" class="headerlink" title="題目敘述"></a>題目敘述</h4><p>輸入正整數\(N\), 輸出最大整數\(k\) 使\(2^{k} \le N\).</p>
<h4 id="範例輸入-1"><a href="#範例輸入-1" class="headerlink" title="範例輸入 1"></a>範例輸入 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1000000000000000000</span><br></pre></td></tr></table></figure>

<h4 id="範例輸出-1"><a href="#範例輸出-1" class="headerlink" title="範例輸出 1"></a>範例輸出 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">59</span><br></pre></td></tr></table></figure>

<h4 id="範例輸入-2"><a href="#範例輸入-2" class="headerlink" title="範例輸入 2"></a>範例輸入 2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>

<h4 id="範例輸出-2"><a href="#範例輸出-2" class="headerlink" title="範例輸出 2"></a>範例輸出 2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="題解"><a href="#題解" class="headerlink" title="題解"></a>題解</h3><p>用迴圈循環計算。 在整數運算時 <code>ans&lt;&lt;=1</code> 相當於 <code>ans*=2</code> 。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ct=<span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ans*<span class="number">2</span>&lt;=n)&#123;</span><br><span class="line">        ans&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        ct++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ct;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意!"></a>注意!</h3><p>用內建函式 <code>log2(n)</code> 不會過的喔！</p>
<p><img src="https://live.staticflickr.com/65535/51738037522_32a924e525_o.png"></p>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>abc</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 847 (Div. 3)</title>
    <url>/ojques/codeforces-round-847-div-3/</url>
    <content><![CDATA[<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML' async></script>

<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>重回程式設計第一天…</p>
<p>因為種種原因停更好久，直到最近，我決定重新開始寫題目。這次的題目選自 <a href="https://codeforces.com/contest/1790">https://codeforces.com/contest/1790</a> ，剛回來想用 Div3 試個手感，沒想到也卡了許久。</p>
<h3 id="本文"><a href="#本文" class="headerlink" title="本文"></a>本文</h3><p>言歸正傳，本質上這還是一個分享網站。那我今天用了 3 個小時總共寫出 5 題(共 7 題)。以下是提示、想法、與程式碼的分享。</p>
<h4 id="pA-Polycarp-and-the-Day-of-Pi"><a href="#pA-Polycarp-and-the-Day-of-Pi" class="headerlink" title="pA Polycarp and the Day of Pi"></a>pA Polycarp and the Day of Pi</h4><p>簡單說就是求前 30 位的圓周率他寫對幾位，比較需要注意的是範例已經給一個完整的圓周率。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a 是輸入</span></span><br><span class="line">string ans=<span class="string">&quot;314159265358979323846264338327&quot;</span>,a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    <span class="type">int</span> same=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//  逐位判斷</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i</span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>()&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="pB-Taisia-and-Dice"><a href="#pB-Taisia-and-Dice" class="headerlink" title="pB Taisia and Dice"></a>pB Taisia and Dice</h4><h5 id="題目概要"><a href="#題目概要" class="headerlink" title="題目概要"></a>題目概要</h5><p>給你三個數字 \(n, s, r\) ，\(n\) 是骰子數，\(s\) 是點數總和，\(r\) 則是扣掉一個最大的骰子點數後的點數總和。求一個可能的點數序列。</p>
<h5 id="提示-1"><a href="#提示-1" class="headerlink" title="提示 1"></a>提示 1</h5><p>最大的點數是 \(s-r\)</p>
<h5 id="提示-2"><a href="#提示-2" class="headerlink" title="提示 2"></a>提示 2</h5><p>這序列沒有規定骰子點數不能重複</p>
<h5 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h5><p>綜合兩個提示，我們可以發現。盡量先用最大點數 \(s-r\)，最後都用 1 點，中間再補差額就可以了。程式碼的表達正好相反。</p>
<h5 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,s,r;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;s&gt;&gt;r;</span><br><span class="line">    <span class="type">int</span> d=s-r,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="comment">//      n-i+1 = 剩餘骰子數</span></span><br><span class="line">        <span class="keyword">if</span>(n-i+<span class="number">1</span>==s-sum)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n-i</span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>()&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="pC"><a href="#pC" class="headerlink" title="pC"></a>pC</h4><h5 id="題目概述"><a href="#題目概述" class="headerlink" title="題目概述"></a>題目概述</h5><p>有一個 \(1 \sim n\) 都出現過一次的序列讓你猜，然後不按順序的給你 \(n\) 個數列，每個數列都是原本的序列但會刪除一個元素。求原序列。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2 3</span><br><span class="line">1 3</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure>

<p>則原序列為 1 2 3。</p>
<h5 id="提示-1-1"><a href="#提示-1-1" class="headerlink" title="提示 1"></a>提示 1</h5><p>只需要兩個序列就可以求出完整的。</p>
<h5 id="提示-2-1"><a href="#提示-2-1" class="headerlink" title="提示 2"></a>提示 2</h5><p>頭尾的元素是關鍵。</p>
<h5 id="想法-1"><a href="#想法-1" class="headerlink" title="想法"></a>想法</h5><p>其實找到兩個關鍵序列就可以了，就是刪掉第一個和刪掉最後一個的。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 2 1</span><br><span class="line">4 2 3</span><br><span class="line">2 1 3</span><br><span class="line">4 1 3</span><br></pre></td></tr></table></figure>

<p>就只需要</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 2 1</span><br><span class="line">  2 1 3</span><br></pre></td></tr></table></figure>

<p>就可以還原整個序列。</p>
<p>那至於如何尋找，如提示 2 所述，關注第一個與最後一個元素。不同的那個就是我們要的。</p>
<h5 id="程式碼-1"><a href="#程式碼-1" class="headerlink" title="程式碼"></a>程式碼</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// s[i] 序列的第一個數字為 i 的次數</span></span><br><span class="line"><span class="comment">// sr[i] 最後一個</span></span><br><span class="line"><span class="comment">// bd[i][j] 存讀進來的資料</span></span><br><span class="line"><span class="comment">// f 第一個元素，r 則是最後一個</span></span><br><span class="line"><span class="comment">// d,c就是我們要找的那兩個序列</span></span><br><span class="line"><span class="type">int</span> bd[<span class="number">105</span>][<span class="number">105</span>],s[<span class="number">105</span>],sr[<span class="number">105</span>],f,d,r,c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&gt;bd[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//  初始化</span></span><br><span class="line">    f=<span class="number">-1</span>;</span><br><span class="line">    r=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        s[i]=<span class="number">0</span>;</span><br><span class="line">        sr[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//  找 f,r</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        s[bd[i][<span class="number">1</span>]]++;</span><br><span class="line">        sr[bd[i][n<span class="number">-1</span>]]++;</span><br><span class="line">        <span class="keyword">if</span>(s[bd[i][<span class="number">1</span>]]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            f=bd[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sr[bd[i][n<span class="number">-1</span>]]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            r=bd[i][n<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//  找不同於 f,r 的</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(bd[i][<span class="number">1</span>]!=f)&#123;</span><br><span class="line">            d=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bd[i][n<span class="number">-1</span>]!=r)&#123;</span><br><span class="line">            c=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        cout&lt;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>()&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="pD-Matryoshkas"><a href="#pD-Matryoshkas" class="headerlink" title="pD Matryoshkas"></a>pD Matryoshkas</h4><h5 id="題目概述-1"><a href="#題目概述-1" class="headerlink" title="題目概述"></a>題目概述</h5><p>給你一堆俄羅斯娃娃的大小，問你原來最少有幾組。其中，每一組的娃娃大小都必須要是連續整數。例如 1 2 3。</p>
<h5 id="提示-1-2"><a href="#提示-1-2" class="headerlink" title="提示 1"></a>提示 1</h5><p>能疊越多層越好。</p>
<h5 id="提示-2-2"><a href="#提示-2-2" class="headerlink" title="提示 2"></a>提示 2</h5><p>動態的資料增刪操作。</p>
<h5 id="想法-2"><a href="#想法-2" class="headerlink" title="想法"></a>想法</h5><p>能疊越多層越好，因此，每一次都用 while 嘗試往上疊。那就需要尋找一個大小 +1 的娃娃存不存在。可以使用 multiset 或是 map，而我選 map。</p>
<h5 id="程式碼-2"><a href="#程式碼-2" class="headerlink" title="程式碼"></a>程式碼</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,a,sum=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    map mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&gt;a;</span><br><span class="line">        mp[a]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> e:mp)&#123;</span><br><span class="line">        <span class="keyword">while</span>(e.second&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> tp=e.first;</span><br><span class="line">            <span class="keyword">while</span>(mp.<span class="built_in">count</span>(tp+<span class="number">1</span>) &amp;&amp; mp[tp+<span class="number">1</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                mp[tp+<span class="number">1</span>]--;</span><br><span class="line">                tp++;</span><br><span class="line">            &#125;</span><br><span class="line">            sum++;</span><br><span class="line">            e.second--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>()&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="pE-Vlad-and-a-Pair-of-Numbers"><a href="#pE-Vlad-and-a-Pair-of-Numbers" class="headerlink" title="pE Vlad and a Pair of Numbers"></a>pE Vlad and a Pair of Numbers</h4><h5 id="題目概述-2"><a href="#題目概述-2" class="headerlink" title="題目概述"></a>題目概述</h5><p>給你一個 \(x\)，找到 \(a,b\)滿足 \(a \oplus b&#x3D;\frac{a+b}{2}&#x3D;x\)，其中 \(\oplus\) 是 xor，也就是 C++ 上的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a^b;</span><br></pre></td></tr></table></figure>

<p>第五題最後有偷看詳解，使用的做法請見-&gt; <a href="https://codeforces.com/blog/entry/111948">https://codeforces.com/blog/entry/111948</a></p>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder ABC 215 D</title>
    <url>/ojques/atcoder-abc-215-d-d-coprime-2/</url>
    <content><![CDATA[<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML' async></script>

<h3 id="題目連結：AtCoder-Beginner-Contest-215-D-Coprime-2"><a href="#題目連結：AtCoder-Beginner-Contest-215-D-Coprime-2" class="headerlink" title="題目連結：AtCoder Beginner Contest 215: D - Coprime 2"></a>題目連結：<a href="https://atcoder.jp/contests/abc215/tasks/abc215_d">AtCoder Beginner Contest 215: D - Coprime 2</a></h3><h4 id="題目敘述"><a href="#題目敘述" class="headerlink" title="題目敘述"></a>題目敘述</h4><p>給定\(n, m\)下一行會有\(n\)個數字，輸出所有\(k in 1~m\)，\(k\)是與所有數字皆互質的數。</p>
<h4 id="範例輸入-1"><a href="#範例輸入-1" class="headerlink" title="範例輸入 1"></a>範例輸入 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 12</span><br><span class="line">6 1 5</span><br></pre></td></tr></table></figure>

<h4 id="範例輸出-1"><a href="#範例輸出-1" class="headerlink" title="範例輸出 1"></a>範例輸出 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1</span><br><span class="line">7</span><br><span class="line">11</span><br></pre></td></tr></table></figure>

<h3 id="題解"><a href="#題解" class="headerlink" title="題解"></a>題解</h3><p>用埃氏篩法在\(log(n)\) 的時間內做質因數分解，接著將所有數字的質因數聯集存在 bitset 中，最後判斷\(1~m\)的所有數字的質因數之中有無存於 bitset 中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> ll N=<span class="number">100010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IO_SPEEDUP ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IO_INIT cout&lt;&lt;fixed&lt;&lt;setprecision(6);</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> pri[N];</span><br><span class="line">bitset&lt;N&gt; bt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pri[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;N;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pri[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            pri[i]=i;</span><br><span class="line">            <span class="keyword">for</span>(ll k=(ll)i*i;k&lt;N;k+=i)</span><br><span class="line">                pri[k]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">div</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(pri[n]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        bt[pri[n]]=<span class="literal">true</span>;</span><br><span class="line">        n/=pri[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(pri[n]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(bt[pri[n]])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n/=pri[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IO_SPEEDUP; IO_INIT;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        cin&gt;&gt;a;</span><br><span class="line">        <span class="built_in">div</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(i))&#123;</span><br><span class="line">            ans.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ans.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:ans)&#123;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>abc</tag>
      </tags>
  </entry>
  <entry>
    <title>APCS 2022/1/9</title>
    <url>/apcs/apcspracticaltest/apcs-2022-1-9/</url>
    <content><![CDATA[<h2 id="Q1-程式交易"><a href="#Q1-程式交易" class="headerlink" title="Q1. 程式交易"></a>Q1. 程式交易</h2><h3 id="題目連結：h081-1-程式交易-高中生程式解題系統"><a href="#題目連結：h081-1-程式交易-高中生程式解題系統" class="headerlink" title="題目連結：h081: 1. 程式交易 - 高中生程式解題系統"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=h081">h081: 1. 程式交易 - 高中生程式解題系統</a></h3><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>第一天先買，維護一個 bool 變數，分為有持股與無持股兩種情況。</p>
<ol>
<li>有持股-&gt;若當前價格&gt;&#x3D;當初買的價格(tp)+D，賣掉，tp 改為當前股價</li>
<li>無持股-&gt;若當前價格&lt;&#x3D;當初賣的價格(tp)-D，買起來，tp 改為當前股價</li>
</ol>
<h4 id="細節"><a href="#細節" class="headerlink" title="細節"></a>細節</h4><p>若交易結束仍持有股票，則不考慮該股票買進的成本 -&gt; 賣掉的時候再加上獲利</p>
<h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> iss=<span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> n,sum,d,tp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;d&gt;&gt;tp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="type">int</span> now;</span><br><span class="line">        cin&gt;&gt;now;</span><br><span class="line">        <span class="keyword">if</span>(iss &amp;&amp; tp+d&lt;=now)&#123;</span><br><span class="line">            sum+=now-tp;</span><br><span class="line">            tp=now;</span><br><span class="line">            iss=<span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!iss &amp;&amp; tp-d&gt;=now)&#123;</span><br><span class="line">            tp=now;</span><br><span class="line">            iss=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Q2-贏家預測"><a href="#Q2-贏家預測" class="headerlink" title="Q2. 贏家預測"></a>Q2. 贏家預測</h2><h3 id="題目連結：h082-2-贏家預測-高中生程式解題系統"><a href="#題目連結：h082-2-贏家預測-高中生程式解題系統" class="headerlink" title="題目連結：h082. 2. 贏家預測 - 高中生程式解題系統"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=h082">h082. 2. 贏家預測 - 高中生程式解題系統</a></h3><h3 id="想法-1"><a href="#想法-1" class="headerlink" title="想法"></a>想法</h3><p>將輸贏判斷抽象化，方便除錯。其餘依照題目用 vector 模擬即可。</p>
<h3 id="實作-1"><a href="#實作-1" class="headerlink" title="實作"></a>實作</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> siz(v) ((int)v.size())</span></span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">player</span>&#123;</span><br><span class="line"><span class="comment">//  s, t, fail times</span></span><br><span class="line">    ll s,t,f;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">player ps[<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">battle</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> ret=(ps[a].s*ps[a].t)&gt;=(ps[b].s*ps[b].t);</span><br><span class="line">    <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">        ll tps=ps[a].s+(ps[b].s*ps[b].t)/(<span class="number">2</span>*ps[a].t);</span><br><span class="line">        ll tpt=ps[a].t+(ps[b].s*ps[b].t)/(<span class="number">2</span>*ps[a].s);</span><br><span class="line">        ps[a].s=tps;</span><br><span class="line">        ps[a].t=tpt;</span><br><span class="line"></span><br><span class="line">        ps[b].s+=ps[b].s&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        ps[b].t+=ps[b].t&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        ps[b].f++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ll tps=ps[b].s+(ps[a].s*ps[a].t)/(<span class="number">2</span>*ps[b].t);</span><br><span class="line">        ll tpt=ps[b].t+(ps[a].s*ps[a].t)/(<span class="number">2</span>*ps[b].s);</span><br><span class="line">        ps[b].s=tps;</span><br><span class="line">        ps[b].t=tpt;</span><br><span class="line"></span><br><span class="line">        ps[a].s+=ps[a].s&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        ps[a].t+=ps[a].t&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        ps[a].f++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;ps[i].s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;ps[i].t;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">bt</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) cin&gt;&gt;bt[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">siz</span>(bt)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vt,fl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">siz</span>(bt);i+=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="built_in">siz</span>(bt)<span class="number">-1</span>)&#123;</span><br><span class="line">                vt.<span class="built_in">emplace_back</span>(bt[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">battle</span>(bt[i],bt[i+<span class="number">1</span>]))&#123;</span><br><span class="line">                    vt.<span class="built_in">emplace_back</span>(bt[i]);</span><br><span class="line">                    <span class="keyword">if</span>(ps[bt[i+<span class="number">1</span>]].f&lt;m) fl.<span class="built_in">emplace_back</span>(bt[i+<span class="number">1</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ps[bt[i]].f&lt;m) fl.<span class="built_in">emplace_back</span>(bt[i]);</span><br><span class="line">                    vt.<span class="built_in">emplace_back</span>(bt[i+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(bt.<span class="built_in">size</span>()) bt.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:vt) bt.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:fl) bt.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;bt.<span class="built_in">front</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Q3-數位占卜"><a href="#Q3-數位占卜" class="headerlink" title="Q3. 數位占卜"></a>Q3. 數位占卜</h2><h3 id="題目連結：h083-3-數位占卜-高中生程式解題系統"><a href="#題目連結：h083-3-數位占卜-高中生程式解題系統" class="headerlink" title="題目連結：h083. 3. 數位占卜 - 高中生程式解題系統"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=h083">h083. 3. 數位占卜 - 高中生程式解題系統</a></h3><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>這是我唯一沒有滿分的題目，要用 <code>set&lt;long long&gt;</code> 陣列，還要 rolling hash 。 參考資料：<a href="https://hackmd.io/@thanksone/APCS20220109#%E6%95%B8%E4%BD%8D%E5%8D%A0%E5%8D%9C">2022 01&#x2F;09 APCS 題解 - HackMD</a></p>
<h3 id="實作-2"><a href="#實作-2" class="headerlink" title="實作"></a>實作</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> ll MOD=<span class="number">2147483647</span>;</span><br><span class="line"><span class="type">const</span> ll X=<span class="number">29</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pwt[i]=29^i%MOD</span></span><br><span class="line"><span class="comment">// inv[i]=pwt[i] 在 MOD 的反元素</span></span><br><span class="line">ll pwt[<span class="number">105</span>],inv[<span class="number">105</span>];</span><br><span class="line"><span class="comment">// hash value</span></span><br><span class="line">ll h[<span class="number">50010</span>][<span class="number">105</span>];</span><br><span class="line"><span class="comment">// 原始資料</span></span><br><span class="line">string s[<span class="number">50010</span>];</span><br><span class="line"><span class="comment">// 對於長度為 i 的字串的 hash 值</span></span><br><span class="line">set&lt;ll&gt; ss[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速冪</span></span><br><span class="line"><span class="function">ll <span class="title">POW</span><span class="params">(ll a,ll x)</span></span>&#123;</span><br><span class="line">    ll ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&amp;<span class="number">1</span>) ret=ret*a%MOD;</span><br><span class="line">        a=a*a%MOD;</span><br><span class="line">        x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pwt[<span class="number">0</span>]=inv[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">101</span>;i++)&#123;</span><br><span class="line"><span class="comment">//      X^i%MOD</span></span><br><span class="line">        pwt[i]=X*pwt[i<span class="number">-1</span>]%MOD;</span><br><span class="line"><span class="comment">//      模逆元</span></span><br><span class="line">        inv[i]=<span class="built_in">POW</span>(pwt[i],MOD<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hah</span><span class="params">(string &amp;tp,ll p)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m=tp.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//  不加 1 的話 a, aa, aaa 會被視為相同</span></span><br><span class="line">    h[p][<span class="number">0</span>]=tp[<span class="number">0</span>]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;++i)&#123;</span><br><span class="line">        h[p][i]=(h[p][i<span class="number">-1</span>]+(tp[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>)*pwt[i])%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    ss[m].<span class="built_in">insert</span>(h[p][m<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第 p 個字串的 [l,r] hash 前綴和的值</span></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll p,ll l,ll r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> l==<span class="number">0</span> ? h[p][r] : (h[p][r]-h[p][l<span class="number">-1</span>]+MOD)%MOD*inv[l]%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ll m=s[i].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m;++j)&#123;</span><br><span class="line"><span class="comment">//          從中間開始</span></span><br><span class="line">            <span class="keyword">if</span>(j*<span class="number">2</span>&lt;=m) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//          若第 i 個字串的 [0,m-j-1] 與 [j,m-1] 相同</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">query</span>(i,<span class="number">0</span>,m-j<span class="number">-1</span>)==<span class="built_in">query</span>(i,j,m<span class="number">-1</span>))&#123;</span><br><span class="line"><span class="comment">//              尋找匹配字串，(j*2-m) 補齊字串長度</span></span><br><span class="line">                <span class="keyword">if</span>(ss[j*<span class="number">2</span>-m].<span class="built_in">count</span>(<span class="built_in">query</span>(i,m-j,j<span class="number">-1</span>)))</span><br><span class="line">                    ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        cin&gt;&gt;s[i];</span><br><span class="line">        <span class="built_in">hah</span>(s[i],i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="built_in">solve</span>(n)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Q4-牆上海報"><a href="#Q4-牆上海報" class="headerlink" title="Q4. 牆上海報"></a>Q4. 牆上海報</h2><h3 id="題目連結：h084-4-牆上海報-高中生程式解題系統"><a href="#題目連結：h084-4-牆上海報-高中生程式解題系統" class="headerlink" title="題目連結：h084. 4. 牆上海報 - 高中生程式解題系統"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=h084">h084. 4. 牆上海報 - 高中生程式解題系統</a></h3><h3 id="想法-2"><a href="#想法-2" class="headerlink" title="想法"></a>想法</h3><p>Greedy + 二分搜。避免有人不知道要搜什麼，是搜尋高度。因為從題目中我們可以發現 -&gt; 越高的地方可以放東西的區間越來越破碎，也越來越少。且若 x 是可以放的下的高度，選 x\‘&lt; x 都不會更好(題目要求越高越好)。這樣就可以一次刪除一半的區間。</p>
<p>那 Greedy 呢？因為有規定擺放順序，因此能放就放，這個區間放不下就移至下個區間。沒有區間可以放就表示這個高度不合法。</p>
<h3 id="實作-3"><a href="#實作-3" class="headerlink" title="實作"></a>實作</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> h[<span class="number">200010</span>],bd[<span class="number">50010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> psum=<span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; len;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(h[i]&gt;=x)&#123;</span><br><span class="line">            psum++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            len.<span class="built_in">emplace_back</span>(psum);</span><br><span class="line">            psum=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//  0也無所謂</span></span><br><span class="line">    len.<span class="built_in">emplace_back</span>(psum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=k;++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(len[j]&lt;bd[i])&#123;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span>(j==len.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        len[j]-=bd[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;h[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i) cin&gt;&gt;bd[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">1073741824</span>;</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123;</span><br><span class="line">            l=mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            r=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;l&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcspracticaltest</category>
      </categories>
      <tags>
        <tag>apcs</tag>
      </tags>
  </entry>
  <entry>
    <title>程式撰寫風格的心得</title>
    <url>/misc/coding-style/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>程式撰寫時，若寫得很亂或是很醜，極有可能導致無法找到錯誤的情況發生。在多人協作以及詢問他人問題時，好的程式碼風格可以使他人更快了解你在寫什麼。進而快速解決問題。</p>
<h2 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h2><h3 id="基本排版"><a href="#基本排版" class="headerlink" title="基本排版"></a>基本排版</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先，各層級之間應該要有 44 個空格。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>==<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//再者，有些東西可以按照個人習慣，例如大括號的位置。</span></span><br><span class="line"><span class="comment">//但，筆者主觀認為除了 main 以外千萬不要用第三種(如下)，看了還滿痛苦的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(↓)第一種</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------------分隔線--------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(↓)第二種</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------------分隔線--------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(↓)第三種</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="行內空格"><a href="#行內空格" class="headerlink" title="行內空格"></a>行內空格</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//行內空格排版，有兩種做法。</span></span><br><span class="line"><span class="comment">//原則上，如果習慣將程式碼放很大的人用第一種，其餘可以自由選擇，然而我較習慣用第一種。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(↓)第一種</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">    cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------------分隔線--------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(↓)第二種</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span> ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果有需求將多個簡單指令壓在一行的話，建議使用空格。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> u:g[n]) <span class="keyword">if</span>(u!=p)&#123;</span><br><span class="line">    <span class="built_in">dfs</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a=<span class="number">0</span>; b=<span class="number">0</span>; c=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-區塊間空格"><a href="#3-區塊間空格" class="headerlink" title="3. 區塊間空格"></a>3. 區塊間空格</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不同功能的區塊間可以空一行，可以讓後續向他人解說和整理自己思緒方便一些。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"><span class="type">int</span> h[N],ind[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> mx=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(g[n].<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> u:g[n])&#123;</span><br><span class="line">        <span class="keyword">if</span>(u!=p)&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(u,n);</span><br><span class="line">            mx=<span class="built_in">max</span>(mx,h[u]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h[n]=mx+<span class="number">1</span>;</span><br><span class="line">    ans+=h[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="type">int</span> cn;</span><br><span class="line">        cin&gt;&gt;cn; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;cn;++j)&#123;</span><br><span class="line">            <span class="type">int</span> c;</span><br><span class="line">            cin&gt;&gt;c;</span><br><span class="line">            g[i].<span class="built_in">emplace_back</span>(c);</span><br><span class="line">            ind[c]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ind[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            rt=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(rt,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;rt&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是主要的內容，希望大家寫的順利。</p>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder ABC 215 C</title>
    <url>/ojques/atcoder-abc-215-c-one-more-aab-aba-baa/</url>
    <content><![CDATA[<h3 id="題目連結AtCoder-Beginner-Contest-215-C-One-More-aab-aba-baa"><a href="#題目連結AtCoder-Beginner-Contest-215-C-One-More-aab-aba-baa" class="headerlink" title="題目連結AtCoder Beginner Contest 215: C - One More aab aba baa"></a>題目連結<a href="https://atcoder.jp/contests/abc215/tasks/abc215_c">AtCoder Beginner Contest 215: C - One More aab aba baa</a></h3><h4 id="題目敘述"><a href="#題目敘述" class="headerlink" title="題目敘述"></a>題目敘述</h4><p>輸出 S 中字典順序第 K 大的排列.</p>
<h4 id="範例輸入-1"><a href="#範例輸入-1" class="headerlink" title="範例輸入 1"></a>範例輸入 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aab 2</span><br></pre></td></tr></table></figure>

<h4 id="範例輸出-1"><a href="#範例輸出-1" class="headerlink" title="範例輸出 1"></a>範例輸出 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aba</span><br></pre></td></tr></table></figure>

<h4 id="範例輸入-2"><a href="#範例輸入-2" class="headerlink" title="範例輸入 2"></a>範例輸入 2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ydxwacbz 40320</span><br></pre></td></tr></table></figure>

<h4 id="範例輸出-2"><a href="#範例輸出-2" class="headerlink" title="範例輸出 2"></a>範例輸出 2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zyxwdcba</span><br></pre></td></tr></table></figure>

<h3 id="題解"><a href="#題解" class="headerlink" title="題解"></a>題解</h3><p>用內建函式next_permutation()可以生成字典序大一點的排列。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    string str;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;str&gt;&gt;n;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  因為沒有說輸入的會是字典序最小的，因此要先排序</span></span><br><span class="line">    <span class="built_in">sort</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//  會是n-1是因為還沒進行前就是最小(第k=1小)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        <span class="built_in">next_permutation</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>abc</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 826 pD</title>
    <url>/ojques/codeforces-round-826-pd/</url>
    <content><![CDATA[<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML' async></script>

<h3 id="題目連結"><a href="#題目連結" class="headerlink" title="題目連結"></a>題目連結</h3><p><a href="https://codeforces.com/problemset/problem/1741/D">https://codeforces.com/problemset/problem/1741/D</a></p>
<h3 id="題目概要"><a href="#題目概要" class="headerlink" title="題目概要"></a>題目概要</h3><p>給你一個 \(1; 2 …m\) 但沒有排序的數列，其中 \(m&#x3D;2^n, n \in N\)。 這些數字要被放在一個完全二元樹的樹葉(葉節點)中。 定義此完全二元樹是 “\(beautiful\)” 的若且唯若葉節點的數值剛好由左而右遞增。 我們可以做的操作是對任一節點，將他的左右子樹互換。 請問最少幾次操作可以讓樹變成 “\(beautiful\)” 的，如果做不到輸出 -1。</p>
<p><img src="https://live.staticflickr.com/65535/52808706187_cd9f0fda95.jpg" alt="CF_1741D_1"></p>
<h3 id="提示-1"><a href="#提示-1" class="headerlink" title="提示 1"></a>提示 1</h3><p>判斷做不做得到與怎麼做可以分開。</p>
<h3 id="提示-2"><a href="#提示-2" class="headerlink" title="提示 2"></a>提示 2</h3><p>怎麼做可以快速分辨是否成功。想想線段樹。</p>
<h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>仿造線段樹的作法，我們可以直接建立一顆完全二元樹，也可以用線段樹取代。我使用指標實作完全二元樹，在每個節點中增加一個數mn表示這棵子樹的所有節點的最小值。如果左子樹的最小值大於右子樹的最小值，則樹就需要旋轉(交換左右子樹)。</p>
<p>而分辨能否成功則可以用左右子樹最小值的差，如果可以成功旋轉，則所有節點的左右子樹最小值差一定要是 \(2^{該節點的高度-1}\)。而顯然滿足這條件就可以成功藉由有限次操作使樹變得 “\(beautiful\)”。</p>
<h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">binary_tree</span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">        node *lch,*rch;</span><br><span class="line">        <span class="type">int</span> mn=INF,val=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">node</span>()&#123;</span><br><span class="line">            lch=rch=<span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">swap_subtree</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="built_in">swap</span>(lch,rch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    node *rt=<span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line">    <span class="type">int</span> idx=<span class="number">0</span>,h=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">(node *n,<span class="type">int</span> hi)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!n-&gt;lch)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(n-&gt;lch-&gt;mn - n-&gt;rch-&gt;mn)!=<span class="number">1</span>&lt;&lt;(hi<span class="number">-2</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n-&gt;lch-&gt;mn &gt; n-&gt;rch-&gt;mn)&#123;</span><br><span class="line">            ret++;</span><br><span class="line">            n-&gt;<span class="built_in">swap_subtree</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ls=<span class="built_in">test</span>(n-&gt;lch,hi<span class="number">-1</span>),rs=<span class="built_in">test</span>(n-&gt;rch,hi<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(ls==<span class="number">-1</span> || rs==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ret+=ls+rs;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">test</span>(rt,h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> h,node *n,vector&lt;<span class="type">int</span>&gt; &amp;v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(h&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            n-&gt;mn=n-&gt;val=v[idx];</span><br><span class="line">            idx++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n-&gt;lch=<span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line">        n-&gt;rch=<span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line">        <span class="built_in">build</span>(h<span class="number">-1</span>,n-&gt;lch,v);</span><br><span class="line">        <span class="built_in">build</span>(h<span class="number">-1</span>,n-&gt;rch,v);</span><br><span class="line">        <span class="keyword">if</span>(n-&gt;lch &amp;&amp; n-&gt;rch)&#123;</span><br><span class="line">            n-&gt;mn=<span class="built_in">min</span>(n-&gt;lch-&gt;mn,n-&gt;rch-&gt;mn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">binary_tree</span>(vector&lt;<span class="type">int</span>&gt; v)&#123;</span><br><span class="line">        <span class="type">int</span> n=v.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            h++; n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">build</span>(h,rt,v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">delete_tree</span><span class="params">(node *n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!n) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(n-&gt;lch) <span class="built_in">delete_tree</span>(n-&gt;lch);</span><br><span class="line">        <span class="keyword">if</span>(n-&gt;rch) <span class="built_in">delete_tree</span>(n-&gt;rch);</span><br><span class="line">        <span class="built_in">delete</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">binary_tree</span>()&#123;</span><br><span class="line">        <span class="built_in">delete_tree</span>(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(m)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:v) cin&gt;&gt;i;</span><br><span class="line"></span><br><span class="line">    <span class="function">binary_tree <span class="title">cbt</span><span class="params">(v)</span></span>;</span><br><span class="line">    cout&lt;&lt;cbt.<span class="built_in">test</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ APCS實作題 2017/10 3 : 樹狀圖分析</title>
    <url>/apcs/apcspracticaltest/cpp-apcs-2017-10-3/</url>
    <content><![CDATA[<p>樹狀圖的結構以及 DFS ( 深度優先搜索 ) ，另外用了 height[] 來儲存高度以降低複雜度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> For(i,a,b) for(int i=(a);i&lt;(b);i++)</span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; child[<span class="number">100010</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> p[<span class="number">100010</span>],height[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a)</span></span>&#123;</span><br><span class="line">    height[a]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> v:child[a])&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">        height[a]=<span class="built_in">max</span>(height[a],height[v]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">For</span>(i,<span class="number">1</span>,n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> chN;cin&gt;&gt;chN;</span><br><span class="line">        <span class="built_in">For</span>(j,<span class="number">0</span>,chN)&#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> ch;cin&gt;&gt;ch;</span><br><span class="line">            child[i].<span class="built_in">push_back</span>(ch);</span><br><span class="line">            p[ch]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> root;</span><br><span class="line">    <span class="keyword">for</span>(root=<span class="number">1</span>;root&lt;=n;root++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[root]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(root);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> total=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) total+=height[i];</span><br><span class="line">    cout&lt;&lt;root&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;total&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcspracticaltest</category>
      </categories>
      <tags>
        <tag>apcs</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ APCS實作題 2017/3 3 : 數字龍捲風</title>
    <url>/apcs/apcspracticaltest/cpp-apcs-2017-3-3/</url>
    <content><![CDATA[<h3 id="題目連結：c292-APCS2017-0304-3數字龍捲風-高中生程式解題系統"><a href="#題目連結：c292-APCS2017-0304-3數字龍捲風-高中生程式解題系統" class="headerlink" title="題目連結：c292. APCS2017-0304-3數字龍捲風 - 高中生程式解題系統"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=c292">c292. APCS2017-0304-3數字龍捲風 - 高中生程式解題系統</a></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> map[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">101</span>][<span class="number">101</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,r;</span><br><span class="line">    std::cin&gt;&gt;n&gt;&gt;r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            std::cin&gt;&gt;map[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> row=n/<span class="number">2</span>,col=n/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n*n;i++)&#123;</span><br><span class="line">        visit[row][col]=<span class="literal">true</span>;</span><br><span class="line">        std::cout&lt;&lt;map[row][col];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(r)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="comment">//left</span></span><br><span class="line">                col--;</span><br><span class="line">                <span class="keyword">if</span>(!visit[row<span class="number">-1</span>][col])&#123;</span><br><span class="line">                    r++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//up</span></span><br><span class="line">                row--;</span><br><span class="line">                <span class="keyword">if</span>(!visit[row][col+<span class="number">1</span>])&#123;</span><br><span class="line">                    r++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">//right</span></span><br><span class="line">                col++;</span><br><span class="line">                <span class="keyword">if</span>(!visit[row+<span class="number">1</span>][col])&#123;</span><br><span class="line">                    r++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="comment">//down</span></span><br><span class="line">                row++;</span><br><span class="line">                <span class="keyword">if</span>(!visit[row][col<span class="number">-1</span>])&#123;</span><br><span class="line">                    r=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcspracticaltest</category>
      </categories>
      <tags>
        <tag>apcs</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ APCS實作題 2019/06/15 2 : 機器人走迷宮</title>
    <url>/apcs/apcspracticaltest/cpp-apcs-2019-06-15-2/</url>
    <content><![CDATA[<p>有意點點類似 BFS ，不過一次只會有一個分支，以下是程式碼</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">step</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,min=MAX+<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line">    step best;</span><br><span class="line">    <span class="type">int</span> mp[<span class="number">110</span>][<span class="number">110</span>]=&#123;MAX&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">110</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">110</span>;j++)&#123;</span><br><span class="line">            mp[i][j]=MAX;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            cin&gt;&gt;mp[i][j];</span><br><span class="line">            <span class="keyword">if</span>(min&gt;mp[i][j])&#123;</span><br><span class="line">                min=mp[i][j];</span><br><span class="line">                best.x=j;best.y=i;sum=min;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deque&lt;step&gt; st;</span><br><span class="line">    st.<span class="built_in">push_front</span>(best);</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,dy[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        step now=st.<span class="built_in">back</span>();</span><br><span class="line">        st.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">        min=MAX;</span><br><span class="line"></span><br><span class="line">        mp[now.y][now.x]=MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            step next;</span><br><span class="line">            next.x=now.x+dx[i];</span><br><span class="line">            next.y=now.y+dy[i];</span><br><span class="line">            <span class="keyword">if</span>(mp[next.y][next.x]&lt;min)&#123;</span><br><span class="line">                min=mp[next.y][next.x];</span><br><span class="line">                best.x=next.x;best.y=next.y;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min==MAX)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sum+=mp[best.y][best.x];</span><br><span class="line">            st.<span class="built_in">push_front</span>(best);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcspracticaltest</category>
      </categories>
      <tags>
        <tag>apcs</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ APCS實作題 2020/1 4 : 貨物分配</title>
    <url>/apcs/apcspracticaltest/cpp-apcs-2020-1-4/</url>
    <content><![CDATA[<p>關於樹狀圖的應用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[<span class="number">2000010</span>]=&#123;<span class="number">0</span>&#125;,st[<span class="number">10010</span>],child[<span class="number">2000010</span>][<span class="number">2</span>],n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=n) <span class="keyword">return</span> w[a];</span><br><span class="line">    w[a]=<span class="built_in">dfs</span>(child[a][<span class="number">0</span>])+<span class="built_in">dfs</span>(child[a][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> w[a];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findBox</span><span class="params">(<span class="type">int</span> stw,<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=n)&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(w[child[a][<span class="number">0</span>]]&lt;=w[child[a][<span class="number">1</span>]])&#123;</span><br><span class="line">        w[child[a][<span class="number">0</span>]]+=stw;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">findBox</span>(stw,child[a][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    w[child[a][<span class="number">1</span>]]+=stw;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">findBox</span>(stw,child[a][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;w[n+i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) cin&gt;&gt;st[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> p,s,t;cin&gt;&gt;p&gt;&gt;s&gt;&gt;t;</span><br><span class="line">        child[p][<span class="number">0</span>]=s;child[p][<span class="number">1</span>]=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> root=<span class="number">1</span>;</span><br><span class="line">    w[<span class="number">1</span>]=<span class="built_in">dfs</span>(root);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">findBox</span>(st[i],root)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcspracticaltest</category>
      </categories>
      <tags>
        <tag>apcs</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ APCS實作題 2020/7 3 : 圓環出口</title>
    <url>/apcs/apcspracticaltest/cpp-apcs-2020-7-3/</url>
    <content><![CDATA[<p>計算前綴和以及二分搜，以下為程式碼</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> q,pSum[<span class="number">200010</span>];</span><br><span class="line">    cin&gt;&gt;pSum[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;pSum[i];</span><br><span class="line">        pSum[i]=pSum[i]+pSum[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;q;</span><br><span class="line">        <span class="keyword">if</span>(pos!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q&gt;(pSum[n<span class="number">-1</span>]-pSum[pos<span class="number">-1</span>]))&#123;</span><br><span class="line">                q-=(pSum[n<span class="number">-1</span>]-pSum[pos<span class="number">-1</span>]);</span><br><span class="line">                q%=pSum[n<span class="number">-1</span>];</span><br><span class="line">                pos=<span class="built_in">lower_bound</span>(pSum,pSum+n,q)-pSum+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pos=<span class="built_in">lower_bound</span>(pSum,pSum+n,q+pSum[pos<span class="number">-1</span>])-pSum+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            q%=pSum[n<span class="number">-1</span>];</span><br><span class="line">            pos=<span class="built_in">lower_bound</span>(pSum,pSum+n,q)-pSum+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pos%=n;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;pos;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcspracticaltest</category>
      </categories>
      <tags>
        <tag>apcs</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ APCS實作題 2021/1 3 : 切割費用</title>
    <url>/apcs/apcspracticaltest/cpp-apcs-2021-1-3/</url>
    <content><![CDATA[<p>用到了 set 和 iterator</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct data&#123;</span><br><span class="line">    int x,i;</span><br><span class="line">&#125;;</span><br><span class="line">data dt[200000];</span><br><span class="line">bool cmp(data a,data b)&#123;</span><br><span class="line">    return a.i&lt;b.i;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    ios::sync_with_stdio(false);</span><br><span class="line">    cin.tie(0);</span><br><span class="line">    int n;int L;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;L;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;dt[i].x;</span><br><span class="line">        cin&gt;&gt;dt[i].i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(dt,dt+n,cmp);</span><br><span class="line">    set&lt;int&gt; s;</span><br><span class="line">    s.insert(0);</span><br><span class="line">    s.insert(L);</span><br><span class="line">    long long sum=0;</span><br><span class="line">    set&lt;int&gt;::iterator ptrE=s.begin();</span><br><span class="line">    set&lt;int&gt;::iterator ptrB=s.end();</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        s.insert(dt[i].x);</span><br><span class="line">        ptrE=s.lower_bound(dt[i].x);</span><br><span class="line">        ptrE--;</span><br><span class="line">        ptrB=ptrE;</span><br><span class="line">        ptrE++;ptrE++;</span><br><span class="line">        sum+= (*ptrE)-(*ptrB); </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcspracticaltest</category>
      </categories>
      <tags>
        <tag>apcs</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ APCS實作題 2021/1 4 : 飛黃騰達</title>
    <url>/apcs/apcspracticaltest/cpp-apcs-2021-1-4/</url>
    <content><![CDATA[<p>經典的 LIS(最長遞增子序列)</p>
<p>但把 lower_bound() 改成 upper_bound() 就會過了。 (這點我也想了一下)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pt[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;pt[i].first&gt;&gt;pt[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(pt,pt+n);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">auto</span> a=<span class="built_in">upper_bound</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),pt[i].second);</span><br><span class="line">        <span class="keyword">if</span>(a==v.<span class="built_in">end</span>()) v.<span class="built_in">push_back</span>(pt[i].second);</span><br><span class="line">        <span class="keyword">else</span> *a=pt[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;v.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcspracticaltest</category>
      </categories>
      <tags>
        <tag>apcs</tag>
      </tags>
  </entry>
  <entry>
    <title>APCS325 Q-2-12 最接近的子矩陣和</title>
    <url>/apcs/apcs325/cpp-apcs325-q-2-12/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> k,m,n;</span><br><span class="line">    cin&gt;&gt;k&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a[<span class="number">55</span>],ps[<span class="number">55</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) ps[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="type">int</span> tmp;cin&gt;&gt;tmp;</span><br><span class="line">            a[i].<span class="built_in">push_back</span>(tmp);</span><br><span class="line">            ps[i].<span class="built_in">push_back</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            ps[i][j]+=ps[i<span class="number">-1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> best=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(&#123;<span class="number">0</span>&#125;)</span></span>;</span><br><span class="line">            <span class="type">int</span> psum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> o=<span class="number">0</span>;o&lt;n;o++)&#123;</span><br><span class="line">                psum+=(ps[j][o]-ps[i][o]);</span><br><span class="line">                <span class="keyword">auto</span> it=s.<span class="built_in">lower_bound</span>(psum-k);</span><br><span class="line">                <span class="keyword">if</span>(it!=s.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    best=<span class="built_in">max</span>(best,psum-(*it));</span><br><span class="line">                &#125;</span><br><span class="line">                s.<span class="built_in">insert</span>(psum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;best&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcs325</category>
      </categories>
      <tags>
        <tag>apcs</tag>
      </tags>
  </entry>
  <entry>
    <title>APCS325 Q-3-13 X差值範圍內的最大Y差值</title>
    <url>/apcs/apcs325/cpp-apcs325-q-3-13/</url>
    <content><![CDATA[<h3 id="題目連結：d041-Q-3-13-X差值範圍內的最大Y差值-JMJudge"><a href="#題目連結：d041-Q-3-13-X差值範圍內的最大Y差值-JMJudge" class="headerlink" title="題目連結：d041. Q_3_13 X差值範圍內的最大Y差值 - JMJudge"></a>題目連結：<a href="https://jmj.cmgsh.tp.edu.tw/ShowProblem?problemid=d041">d041. Q_3_13 X差值範圍內的最大Y差值 - JMJudge</a></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">posion</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(posion a,posion b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">posion seq[<span class="number">200010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n,L;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;seq[i].x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;seq[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(seq,seq+n,cmp);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> best=<span class="number">0</span>;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; max,min;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!max.<span class="built_in">empty</span>() &amp;&amp; seq[i].x-seq[max.<span class="built_in">back</span>()].x&gt;L)</span><br><span class="line">            max.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">while</span>(!min.<span class="built_in">empty</span>() &amp;&amp; seq[i].x-seq[min.<span class="built_in">back</span>()].x&gt;L)</span><br><span class="line">            min.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">while</span>(!max.<span class="built_in">empty</span>() &amp;&amp; seq[i].y&gt;seq[max.<span class="built_in">back</span>()].y)</span><br><span class="line">            max.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="keyword">while</span>(!min.<span class="built_in">empty</span>() &amp;&amp; seq[i].y&lt;seq[min.<span class="built_in">back</span>()].y)</span><br><span class="line">            min.<span class="built_in">pop_front</span>();</span><br><span class="line">        max.<span class="built_in">push_front</span>(i);</span><br><span class="line">        min.<span class="built_in">push_front</span>(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!max.<span class="built_in">empty</span>() &amp;&amp; !min.<span class="built_in">empty</span>() &amp;&amp; </span><br><span class="line">            <span class="built_in">abs</span>(seq[max.<span class="built_in">back</span>()].y-seq[min.<span class="built_in">back</span>()].y)&gt;best)&#123;</span><br><span class="line">                best=<span class="built_in">abs</span>(seq[max.<span class="built_in">back</span>()].y-seq[min.<span class="built_in">back</span>()].y);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;best;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcs325</category>
      </categories>
      <tags>
        <tag>apcs</tag>
      </tags>
  </entry>
  <entry>
    <title>APCS325 Q-4-8. 先到先服務</title>
    <url>/apcs/apcs325/cpp-apcs325-q-4-8/</url>
    <content><![CDATA[<h3 id="題目連結：d050-Q-4-8-先到先服務-JMJudge"><a href="#題目連結：d050-Q-4-8-先到先服務-JMJudge" class="headerlink" title="題目連結：d050. Q_4_8 先到先服務 (* - JMJudge"></a>題目連結：<a href="https://jmj.cmgsh.tp.edu.tw/ShowProblem?problemid=d050">d050. Q_4_8 先到先服務 (* - JMJudge</a></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    ll n,m,worst;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    priority_queue&lt;ll&gt; bars;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        bars.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        ll total=bars.<span class="built_in">top</span>();</span><br><span class="line">        bars.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> ipt=<span class="number">0</span>; cin&gt;&gt;ipt;</span><br><span class="line">        total-=ipt;</span><br><span class="line">        worst=<span class="built_in">max</span>(-(total),worst);</span><br><span class="line">        bars.<span class="built_in">push</span>(total);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;worst;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcs325</category>
      </categories>
      <tags>
        <tag>apcs</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基礎題 A - Lake Counting POJ - 2386</title>
    <url>/ojques/cpp-basic-a-lake-counting-poj-2386/</url>
    <content><![CDATA[<h3 id="題目連結：宜中資訊校隊練習1-DFS-BFS-Next-Permutation-Virtual-Judge"><a href="#題目連結：宜中資訊校隊練習1-DFS-BFS-Next-Permutation-Virtual-Judge" class="headerlink" title="題目連結：宜中資訊校隊練習1 - DFS, BFS &amp; Next_Permutation - Virtual Judge"></a>題目連結：<a href="https://vjudge.net/contest/240104#problem/A">宜中資訊校隊練習1 - DFS, BFS &amp; Next_Permutation - Virtual Judge</a></h3><p>這個問題主要在訓練 BFS ( 廣度優先搜索 )，以下為程式碼</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">step</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    vector&lt;string&gt; mp;</span><br><span class="line">    <span class="type">bool</span> used[<span class="number">110</span>][<span class="number">110</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">    <span class="type">int</span> dx[<span class="number">8</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,dy[<span class="number">8</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        mp.<span class="built_in">push_back</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    deque&lt;step&gt; bfs;</span><br><span class="line">    <span class="type">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ct=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        step stNow;stNow.x=<span class="number">0</span>;stNow.y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!bfs.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            stNow=bfs.<span class="built_in">front</span>();</span><br><span class="line">            bfs.<span class="built_in">pop_front</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(stNow.y==n<span class="number">-1</span> &amp;&amp; stNow.x==m<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">                step next;</span><br><span class="line">                next.x=stNow.x+dx[i];</span><br><span class="line">                next.y=stNow.y+dy[i];</span><br><span class="line">                <span class="keyword">if</span>(next.x&gt;=<span class="number">0</span> &amp;&amp; next.y&gt;=<span class="number">0</span> &amp;&amp; next.x&lt;m &amp;&amp; </span><br><span class="line">                   next.y&lt;n &amp;&amp; mp[next.y][next.x]==<span class="string">&#x27;W&#x27;</span> &amp;&amp; </span><br><span class="line">                   !used[next.y][next.x])&#123;</span><br><span class="line">                      used[next.y][next.x]=<span class="literal">true</span>;</span><br><span class="line">                      bfs.<span class="built_in">push_back</span>(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">bool</span> isFind=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(mp[i][j]==<span class="string">&#x27;W&#x27;</span> &amp;&amp; used[i][j]==<span class="literal">false</span>)&#123;</span><br><span class="line">                        used[i][j]==<span class="literal">true</span>;</span><br><span class="line">                        step s;</span><br><span class="line">                        s.y=i;s.x=j;</span><br><span class="line">                        bfs.<span class="built_in">push_back</span>(s);</span><br><span class="line">                        isFind=<span class="literal">true</span>;</span><br><span class="line">                        ct++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(isFind) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!isFind)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ct;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基礎題 a001: 哈囉</title>
    <url>/ojques/cpp-basic-a001/</url>
    <content><![CDATA[<h3 id="題目連結：a001-哈囉-高中生程式解題系統"><a href="#題目連結：a001-哈囉-高中生程式解題系統" class="headerlink" title="題目連結：a001. 哈囉 - 高中生程式解題系統"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=a001">a001. 哈囉 - 高中生程式解題系統</a></h3><p>此題旨在使用輸入與輸出的指令—參考程式碼如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string st1;</span><br><span class="line">    cin&gt;&gt;st1;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hello, &quot;</span>&lt;&lt;st1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基礎題 a034: 二進位制轉換</title>
    <url>/ojques/cpp-basic-a034/</url>
    <content><![CDATA[<h3 id="題目連結：a034-二進位制轉換-高中生程式解題系統"><a href="#題目連結：a034-二進位制轉換-高中生程式解題系統" class="headerlink" title="題目連結：a034. 二進位制轉換 - 高中生程式解題系統"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=a034">a034. 二進位制轉換 - 高中生程式解題系統</a></h3><p>參考程式碼如下，反覆除2取餘數即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,r,c=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ans[<span class="number">60</span>];</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;a)&#123;</span><br><span class="line">    <span class="keyword">while</span>(a&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        r=a%<span class="number">2</span>;</span><br><span class="line">        ans[c]=r;</span><br><span class="line">        c++;</span><br><span class="line">        a=a/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=(c<span class="number">-1</span>);i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    cout&lt;&lt;ans[i];</span><br><span class="line">    ans[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    c=<span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基礎題 a271: 彩色蘿蔔</title>
    <url>/ojques/cpp-basic-a271/</url>
    <content><![CDATA[<h3 id="題目連結：a271-彩色蘿蔔-高中生程式解題系統"><a href="#題目連結：a271-彩色蘿蔔-高中生程式解題系統" class="headerlink" title="題目連結：a271. 彩色蘿蔔 - 高中生程式解題系統"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=a271">a271. 彩色蘿蔔 - 高中生程式解題系統</a></h3><p>輸入與輸出的優化，程式碼如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> dataNum=<span class="number">0</span>;</span><br><span class="line">    stringstream stream;</span><br><span class="line"></span><br><span class="line">    string s;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="type">int</span> poison=<span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> isLife=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;dataNum;</span><br><span class="line">    s=<span class="string">&quot;\n&quot;</span>;<span class="built_in">getline</span>(cin,s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;dataNum;i++)&#123;</span><br><span class="line">        isLife=<span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> x,y,z,w,n,m;</span><br><span class="line"></span><br><span class="line">        s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">getline</span>(cin,s);</span><br><span class="line"></span><br><span class="line">        stream.<span class="built_in">clear</span>();</span><br><span class="line">        stream.<span class="built_in">str</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        stream&lt;&lt;s;</span><br><span class="line">        stream&gt;&gt;x&gt;&gt;y&gt;&gt;z&gt;&gt;w&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">getline</span>(cin,s);</span><br><span class="line">        <span class="keyword">if</span>(s!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            poison=<span class="number">0</span>;</span><br><span class="line">            temp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            stream.<span class="built_in">clear</span>();</span><br><span class="line">            stream&lt;&lt;s;</span><br><span class="line">            <span class="keyword">while</span>(stream&gt;&gt;temp)&#123;</span><br><span class="line">                m-=poison*n;</span><br><span class="line">                <span class="keyword">if</span>(m&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    isLife=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(temp==<span class="number">1</span>)&#123;</span><br><span class="line">                    m+=x;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp==<span class="number">2</span>)&#123;</span><br><span class="line">                    m+=y;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp==<span class="number">3</span>)&#123;</span><br><span class="line">                    m-=z;</span><br><span class="line">                    <span class="keyword">if</span>(m&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                        isLife=<span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp==<span class="number">4</span>)&#123;</span><br><span class="line">                    m-=w;</span><br><span class="line">                    <span class="keyword">if</span>(m&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                        isLife=<span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    poison+=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isLife)&#123;</span><br><span class="line">                cout&lt;&lt;m&lt;&lt;<span class="string">&quot;g&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;bye~Rabbit&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;m&lt;&lt;<span class="string">&quot;g\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基礎題 a249: Dropping Balls</title>
    <url>/ojques/cpp-basic-a249-dropping-balls/</url>
    <content><![CDATA[<p>依題目用模擬即可，以下為程式碼</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">bitset&lt;2500&gt; tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> iptNum;</span><br><span class="line">    cin&gt;&gt;iptNum;</span><br><span class="line">    <span class="keyword">while</span>(iptNum--)&#123;</span><br><span class="line">        <span class="type">int</span> d,n;</span><br><span class="line">        tree.<span class="built_in">set</span>();</span><br><span class="line">        cin&gt;&gt;d&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> pos;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            pos=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;d;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tree[pos])&#123;</span><br><span class="line">                    tree[pos]=<span class="literal">false</span>;</span><br><span class="line">                    pos*=<span class="number">2</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tree[pos]=<span class="literal">true</span>;</span><br><span class="line">                    pos=pos*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;pos&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基礎題 a364: 2. 神秘的進位問題</title>
    <url>/ojques/cpp-basic-a364/</url>
    <content><![CDATA[<h3 id="題目連結：a364-2-神秘的進位問題-高中生程式解題系統"><a href="#題目連結：a364-2-神秘的進位問題-高中生程式解題系統" class="headerlink" title="題目連結：a364. 2. 神秘的進位問題 - 高中生程式解題系統"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=a364">a364. 2. 神秘的進位問題 - 高中生程式解題系統</a></h3><p>我是用窮舉法，找出每一種可能。程式碼如下~</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">d</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n*<span class="built_in">d</span>(n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">c</span><span class="params">(<span class="type">long</span> <span class="type">long</span> m,<span class="type">long</span> <span class="type">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&lt;n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">d</span>(m)/(<span class="built_in">d</span>(n)*<span class="built_in">d</span>(m-n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> iptNum,ipt=<span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> isRight=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;iptNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">0</span>;i&lt;iptNum;i++)&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> a=<span class="number">0</span>;</span><br><span class="line">        isRight=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        ipt=<span class="number">0</span>;</span><br><span class="line">        cin&gt;&gt;ipt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=<span class="number">2</span>;j&lt;<span class="number">17</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> k=<span class="number">1</span>;k&lt;j;k++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> l=<span class="number">0</span>;l&lt;k;l++)&#123;</span><br><span class="line">                    a=<span class="built_in">c</span>(j,<span class="number">3</span>)+<span class="built_in">c</span>(k,<span class="number">2</span>)+<span class="built_in">c</span>(l,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(a==ipt)&#123;</span><br><span class="line">                        cout&lt;&lt;j&lt;&lt;k&lt;&lt;l&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(a==ipt)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a==ipt)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基礎題 B - Red And Black HDU - 1312</title>
    <url>/ojques/cpp-basic-b-red-and-black-hdu-1312/</url>
    <content><![CDATA[<h3 id="題目連結：宜中資訊校隊練習1-DFS-BFS-Next-Permutation-Virtual-Judge"><a href="#題目連結：宜中資訊校隊練習1-DFS-BFS-Next-Permutation-Virtual-Judge" class="headerlink" title="題目連結：宜中資訊校隊練習1 - DFS, BFS &amp; Next_Permutation - Virtual Judge"></a>題目連結：<a href="https://vjudge.net/contest/240104#problem/B">宜中資訊校隊練習1 - DFS, BFS &amp; Next_Permutation - Virtual Judge</a></h3><p>好像還是 BFS</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">step</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;m&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        vector&lt;string&gt; mp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            string s;</span><br><span class="line">            cin&gt;&gt;s;</span><br><span class="line">            mp.<span class="built_in">push_back</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        deque&lt;step&gt; bfs;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j]==<span class="string">&#x27;@&#x27;</span>)&#123;</span><br><span class="line">                    step s;</span><br><span class="line">                    s.y=i;s.x=j;</span><br><span class="line">                    bfs.<span class="built_in">push_front</span>(s);</span><br><span class="line">                    mp[i][j]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ct=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> dx[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,dy[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span>(!bfs.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            step now=bfs.<span class="built_in">back</span>();</span><br><span class="line">            bfs.<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                step next;</span><br><span class="line">                next.y=now.y+dy[i];</span><br><span class="line">                next.x=now.x+dx[i];</span><br><span class="line">                <span class="keyword">if</span>(next.y&lt;<span class="number">0</span> || next.x&lt;<span class="number">0</span> || next.y&gt;=n || next.x&gt;=m)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(mp[next.y][next.x]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    mp[next.y][next.x]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">                    bfs.<span class="built_in">push_front</span>(next);</span><br><span class="line">                    ct++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ct&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基礎題 單調對列</title>
    <url>/ojques/cpp-basic-line/</url>
    <content><![CDATA[<p>單調對列模板，因為題目的關係所以用 1 開始。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> idx[<span class="number">5000100</span>],nm[<span class="number">5000100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;nm[i];</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>() &amp;&amp; nm[st.<span class="built_in">top</span>()]&lt;nm[i])&#123;</span><br><span class="line">            idx[st.<span class="built_in">top</span>()]=i;</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        st.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        idx[st.<span class="built_in">top</span>()]=<span class="number">0</span>;</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cout&lt;&lt;idx[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基礎題 後序式求值</title>
    <url>/ojques/cpp-basic-postfix/</url>
    <content><![CDATA[<p>關於 stack 的應用 ( 經典題 )</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string c;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(cin,c))&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;c.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isdigit</span>(c[i]))&#123;</span><br><span class="line">                st.<span class="built_in">push</span>(c[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">int</span> a=st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> b=st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(c[i]==<span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">                    st.<span class="built_in">push</span>(b+a);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">                    st.<span class="built_in">push</span>(b-a);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                    st.<span class="built_in">push</span>(b*a);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                    st.<span class="built_in">push</span>(b/a);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">&#x27;%&#x27;</span>)&#123;</span><br><span class="line">                    st.<span class="built_in">push</span>(b%a);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;st.<span class="built_in">top</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基礎題 洛谷 P3613 【深基15. 例2】寄包櫃</title>
    <url>/ojques/cpp-basic-p3613-15-2/</url>
    <content><![CDATA[<h3 id="題目連結：【深基15-例2】寄包柜-洛谷"><a href="#題目連結：【深基15-例2】寄包柜-洛谷" class="headerlink" title="題目連結：【深基15.例2】寄包柜 - 洛谷"></a>題目連結：<a href="https://www.luogu.com.cn/problem/P3613">【深基15.例2】寄包柜 - 洛谷</a></h3><p>map and pair ( stl ) 的搜尋應用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    map&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,<span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="type">int</span> n,q;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        cin&gt;&gt;a;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> x,y,st;</span><br><span class="line">            cin&gt;&gt;x&gt;&gt;y&gt;&gt;st;</span><br><span class="line">            mp[&#123;x,y&#125;]=st;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> x,y;</span><br><span class="line">            cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">            cout&lt;&lt;mp[&#123;x,y&#125;]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基礎題 TIOJ 1911 . 雲端列印</title>
    <url>/ojques/cpp-basic-tioj-1911/</url>
    <content><![CDATA[<p>用 priority_queue 與 unordered_map 。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; mx;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt;&gt; mn;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;t)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!mn.<span class="built_in">empty</span>() &amp;&amp; !s[mn.<span class="built_in">top</span>()])&#123;</span><br><span class="line">                mn.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!mn.<span class="built_in">empty</span>())&#123;    </span><br><span class="line">                cout&lt;&lt;mn.<span class="built_in">top</span>()&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                s[mn.<span class="built_in">top</span>()]--;</span><br><span class="line">                mn.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">-2</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!mx.<span class="built_in">empty</span>() &amp;&amp; !s[mx.<span class="built_in">top</span>()])&#123;</span><br><span class="line">                mx.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!mx.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                cout&lt;&lt;mx.<span class="built_in">top</span>()&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                s[mx.<span class="built_in">top</span>()]--;</span><br><span class="line">                mx.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            s[t]++;</span><br><span class="line">            mx.<span class="built_in">push</span>(t);</span><br><span class="line">            mn.<span class="built_in">push</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基礎題 BFS(資訊之芽)</title>
    <url>/ojques/cpp-bfs-sprout/</url>
    <content><![CDATA[<h3 id="題目連結：Sprout-Online-Judge-No-44"><a href="#題目連結：Sprout-Online-Judge-No-44" class="headerlink" title="題目連結：Sprout Online Judge No. 44"></a>題目連結：<a href="https://neoj.sprout.tw/problem/44/">Sprout Online Judge No. 44</a></h3><p>BFS 常見的題目</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dr[<span class="number">4</span>]&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,dc[<span class="number">4</span>]&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">step</span>&#123;</span><br><span class="line">    <span class="type">int</span> r,c,ct;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n &amp;&amp; n!=<span class="number">0</span>)&#123;</span><br><span class="line">        vector&lt;string&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            string l;</span><br><span class="line">            cin&gt;&gt;l;</span><br><span class="line">            m.<span class="built_in">push_back</span>(l);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        step start;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m[i].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(m[i][j]==<span class="string">&#x27;K&#x27;</span>)&#123;</span><br><span class="line">                    m[i][j]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">                    start.r=i;</span><br><span class="line">                    start.c=j;</span><br><span class="line">                    start.ct=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue&lt;step&gt; bfs;</span><br><span class="line">        bfs.<span class="built_in">push</span>(start);</span><br><span class="line">        <span class="type">bool</span> isfind=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!bfs.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            step sNow=bfs.<span class="built_in">front</span>();</span><br><span class="line">            bfs.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                step sNext=&#123;sNow.r+dr[i],sNow.c+dc[i],sNow.ct+<span class="number">1</span>&#125;;</span><br><span class="line">                <span class="keyword">if</span>(m[sNext.r][sNext.c]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    m[sNext.r][sNext.c]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">                    bfs.<span class="built_in">push</span>(sNext);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m[sNext.r][sNext.c]==<span class="string">&#x27;@&#x27;</span>)&#123;</span><br><span class="line">                    isfind=<span class="literal">true</span>;</span><br><span class="line">                    m[sNext.r][sNext.c]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">                    ans=<span class="built_in">min</span>(sNext.ct,ans);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isfind)&#123;</span><br><span class="line">            cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;= =\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>sproutoj</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 彰雲嘉區複賽 106-3 費波南希數列</title>
    <url>/contest/cpp-chang-yun-chia-106-3/</url>
    <content><![CDATA[<h3 id="題目連結：e523-106-彰雲嘉區複賽-Q3-費波南希數列"><a href="#題目連結：e523-106-彰雲嘉區複賽-Q3-費波南希數列" class="headerlink" title="題目連結：e523: 106 彰雲嘉區複賽 - Q3 費波南希數列"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=e523">e523: 106 彰雲嘉區複賽 - Q3 費波南希數列</a></h3><p>用到最簡單DP和二分搜(都可以不用)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n,f[<span class="number">200</span>];</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">-1</span>;f[<span class="number">1</span>]=<span class="number">1</span>;f[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>];</span><br><span class="line">        <span class="keyword">if</span>(f[i]&lt;<span class="number">0</span>) f[i]=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        cin&gt;&gt;a;</span><br><span class="line">        <span class="type">int</span> it=<span class="built_in">lower_bound</span>(f,f+<span class="number">100</span>,a)-f;</span><br><span class="line">        <span class="keyword">if</span>(f[it]==a)&#123;</span><br><span class="line">            cout&lt;&lt;it;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 彰雲嘉區複賽 106-1 三角形</title>
    <url>/contest/cpp-chang-yun-chia-106-1/</url>
    <content><![CDATA[<h3 id="題目連結：e521-106-彰雲嘉區複賽-Q1-三角形"><a href="#題目連結：e521-106-彰雲嘉區複賽-Q1-三角形" class="headerlink" title="題目連結：e521: 106 彰雲嘉區複賽 - Q1 三角形"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=e521">e521: 106 彰雲嘉區複賽 - Q1 三角形</a></h3><p>簡單的三角形判別</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="type">int</span> d[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) cin&gt;&gt;d[i];</span><br><span class="line">        <span class="built_in">sort</span>(d,d+<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span>(d[<span class="number">0</span>]+d[<span class="number">1</span>]&lt;=d[<span class="number">2</span>])&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(d[<span class="number">0</span>]==d[<span class="number">1</span>] || d[<span class="number">1</span>]==d[<span class="number">2</span>]) cout&lt;&lt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 彰雲嘉區複賽 106-2 跑長編碼與資料壓縮</title>
    <url>/contest/cpp-chang-yun-chia-106-2/</url>
    <content><![CDATA[<h3 id="題目連結：e522-106-彰雲嘉區複賽-Q2-跑長編碼與資料壓縮"><a href="#題目連結：e522-106-彰雲嘉區複賽-Q2-跑長編碼與資料壓縮" class="headerlink" title="題目連結：e522: 106 彰雲嘉區複賽 - Q2 跑長編碼與資料壓縮"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=e522">e522: 106 彰雲嘉區複賽 - Q2 跑長編碼與資料壓縮</a></h3><p>字串基本應用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string num[<span class="number">10</span>]=&#123;<span class="string">&quot;000&quot;</span>,<span class="string">&quot;001&quot;</span>,<span class="string">&quot;010&quot;</span>,<span class="string">&quot;011&quot;</span>,<span class="string">&quot;100&quot;</span>,<span class="string">&quot;101&quot;</span>,<span class="string">&quot;110&quot;</span>,<span class="string">&quot;111&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">print</span><span class="params">(<span class="type">int</span> sum,<span class="type">char</span> bit)</span></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">re</span><span class="params">(<span class="number">1</span>,bit)</span></span>;</span><br><span class="line">    re+=num[sum];</span><br><span class="line">    re+=<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> iptNum=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;iptNum;</span><br><span class="line"></span><br><span class="line">    string bit,out;</span><br><span class="line">    <span class="built_in">getline</span>(cin,bit);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(iptNum--)&#123;</span><br><span class="line">        out=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">getline</span>(cin,bit);</span><br><span class="line">        <span class="type">int</span> j,sum=<span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> rate=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;bit.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bit[j]!=<span class="string">&#x27;0&#x27;</span> &amp;&amp; bit[j]!=<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(bit[j<span class="number">-1</span>]==bit[j] &amp;&amp; sum&lt;<span class="number">7</span>)&#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                out+=<span class="built_in">print</span>(sum,bit[j<span class="number">-1</span>]);</span><br><span class="line">                rate+=<span class="number">4</span>;</span><br><span class="line">                sum=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        out+=<span class="built_in">print</span>(sum,bit[j<span class="number">-1</span>]);</span><br><span class="line">        rate+=<span class="number">4</span>;</span><br><span class="line">        rate*=<span class="number">1000</span>;</span><br><span class="line">        rate/=bit.<span class="built_in">size</span>();</span><br><span class="line">        rate=(rate+<span class="number">5</span>)/<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(bit[j<span class="number">-1</span>]==<span class="string">&#x27;0&#x27;</span> || bit[j<span class="number">-1</span>]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            cout&lt;&lt;out&lt;&lt;rate&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 彰雲嘉區複賽 106-4 變位字判斷</title>
    <url>/contest/cpp-chang-yun-chia-106-4/</url>
    <content><![CDATA[<h3 id="題目連結：e524-106-彰雲嘉區複賽-Q4-變位字判斷"><a href="#題目連結：e524-106-彰雲嘉區複賽-Q4-變位字判斷" class="headerlink" title="題目連結：e524: 106 彰雲嘉區複賽 - Q4 變位字判斷"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=e524">e524: 106 彰雲嘉區複賽 - Q4 變位字判斷</a></h3><p>用map很方便(如果是C++11更方便)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    string a,b;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">getline</span>(cin,a);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">getline</span>(cin,a);</span><br><span class="line">        <span class="built_in">getline</span>(cin,b);</span><br><span class="line">        map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; ma,mb;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="type">char</span> c=a[i];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">islower</span>(c))&#123;</span><br><span class="line">                ma[c]++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isupper</span>(c))&#123;</span><br><span class="line">                ma[<span class="built_in">tolower</span>(c)]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;b.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="type">char</span> c=b[i];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">islower</span>(c))&#123;</span><br><span class="line">                mb[c]++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isupper</span>(c))&#123;</span><br><span class="line">                mb[<span class="built_in">tolower</span>(c)]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> isv=<span class="literal">true</span>;</span><br><span class="line">        map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;::iterator ta=ma.<span class="built_in">begin</span>(),tb=mb.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">for</span>(ta=ma.<span class="built_in">begin</span>();ta!=ma.<span class="built_in">end</span>() &amp;&amp; tb!=mb.<span class="built_in">end</span>();ta++)&#123;</span><br><span class="line">            pair&lt;<span class="type">char</span>,<span class="type">int</span>&gt; pa=(*ta),pb=(*tb);</span><br><span class="line">            <span class="keyword">if</span>(pa!=pb)&#123;</span><br><span class="line">                isv=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tb++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ma.<span class="built_in">size</span>()!=mb.<span class="built_in">size</span>()) isv=<span class="literal">false</span>;</span><br><span class="line">        cout&lt;&lt;isv&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 彰雲嘉區複賽 106-5 回文日期問題</title>
    <url>/contest/cpp-chang-yun-chia-106-5/</url>
    <content><![CDATA[<h3 id="題目連結：e525-106-彰雲嘉區複賽-Q5-回文日期問題"><a href="#題目連結：e525-106-彰雲嘉區複賽-Q5-回文日期問題" class="headerlink" title="題目連結：e525: 106 彰雲嘉區複賽 - Q5 回文日期問題"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=e525">e525: 106 彰雲嘉區複賽 - Q5 回文日期問題</a></h3><p>窮舉法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dom[<span class="number">15</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> pro[<span class="number">700</span>],nt,ct=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(y%<span class="number">400</span>==<span class="number">0</span> || (y%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; y%<span class="number">100</span>!=<span class="number">0</span>))&#123;</span><br><span class="line">        dom[<span class="number">2</span>]=<span class="number">29</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> dom[<span class="number">2</span>]=<span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">isv</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="type">int</span> b=a;</span><br><span class="line">    <span class="keyword">while</span>(a&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        s+=<span class="built_in">char</span>(a%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        a/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=s.<span class="built_in">size</span>()/<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]!=s[s.<span class="built_in">size</span>()<span class="number">-1</span>-i])&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pro[nt++]=b;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">        nt=ct=<span class="number">0</span>;</span><br><span class="line">        cin&gt;&gt;y;</span><br><span class="line">        <span class="built_in">check</span>(y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> tmp=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=dom[i];j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j&lt;<span class="number">10</span>)&#123;</span><br><span class="line">                        <span class="built_in">isv</span>(y*<span class="number">100</span>+i*<span class="number">10</span>+j);</span><br><span class="line">                        <span class="built_in">isv</span>(y*<span class="number">1000</span>+i*<span class="number">10</span>+j);</span><br><span class="line">                        <span class="built_in">isv</span>(y*<span class="number">1000</span>+i*<span class="number">100</span>+j);</span><br><span class="line">                        <span class="built_in">isv</span>(y*<span class="number">10000</span>+i*<span class="number">100</span>+j);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">isv</span>(y*<span class="number">1000</span>+i*<span class="number">100</span>+j);</span><br><span class="line">                        <span class="built_in">isv</span>(y*<span class="number">10000</span>+i*<span class="number">100</span>+j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j&lt;<span class="number">10</span>)&#123;</span><br><span class="line">                        <span class="built_in">isv</span>(y*<span class="number">1000</span>+i*<span class="number">10</span>+j);</span><br><span class="line">                        <span class="built_in">isv</span>(y*<span class="number">10000</span>+i*<span class="number">100</span>+j);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">isv</span>(y*<span class="number">10000</span>+i*<span class="number">100</span>+j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;nt&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">sort</span>(pro,pro+nt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nt;i++)&#123;</span><br><span class="line">            cout&lt;&lt;pro[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 動態規劃經典題 01 背包 (atcoder)</title>
    <url>/ojques/cpp-dp-01knckpack/</url>
    <content><![CDATA[<p>前提是n*W不能太大。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll dp[<span class="number">105</span>][<span class="number">100010</span>],v[<span class="number">105</span>],w[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n,W;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;W;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=W;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(w[i]&gt;j) dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-w[i]]+v[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[n][W];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 106 花蓮 一起回家的日子</title>
    <url>/contest/cpp-hualien-106/</url>
    <content><![CDATA[<h3 id="題目來源：106東區學科能力競賽"><a href="#題目來源：106東區學科能力競賽" class="headerlink" title="題目來源：106東區學科能力競賽"></a>題目來源：106東區學科能力競賽</h3><p>gcd轉lcm</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dayInM[<span class="number">12</span>]=&#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((y%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; y%<span class="number">100</span>!=<span class="number">0</span>) || y%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        dayInM[<span class="number">1</span>]=<span class="number">29</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        dayInM[<span class="number">1</span>]=<span class="number">28</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a%b==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> dt[<span class="number">500</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,dt+i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> y,m,d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d/%d/%d&quot;</span>,&amp;y,&amp;m,&amp;d);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> d=<span class="built_in">gcd</span>(dt[i],dt[i+<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> min=d*dt[i]/d*dt[i+<span class="number">1</span>]/d;</span><br><span class="line">        dt[i+<span class="number">1</span>]=min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    d+=dt[n<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">check</span>(y);</span><br><span class="line">    <span class="keyword">while</span>(d&gt;dayInM[m<span class="number">-1</span>])&#123;</span><br><span class="line">        d-=dayInM[m<span class="number">-1</span>];</span><br><span class="line">        m++;</span><br><span class="line">        <span class="keyword">if</span>(m&gt;<span class="number">12</span>)&#123;</span><br><span class="line">            m=<span class="number">1</span>;</span><br><span class="line">            y++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">check</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%4d/%02d/%02d&quot;</span>,y,m,d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 106全國賽 1. 連號或不連號</title>
    <url>/contest/cpp-national-106-1/</url>
    <content><![CDATA[<h3 id="題目連結：c299-1-連號或不連號-高中生程式解題系統"><a href="#題目連結：c299-1-連號或不連號-高中生程式解題系統" class="headerlink" title="題目連結：c299. 1. 連號或不連號 - 高中生程式解題系統"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=c299">c299. 1. 連號或不連號 - 高中生程式解題系統</a></h3><p>排序後檢查即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> dt[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;dt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(dt,dt+n);</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> ans=<span class="literal">true</span>;</span><br><span class="line">    cout&lt;&lt;dt[<span class="number">0</span>]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;dt[n<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dt[i]!=dt[i<span class="number">-1</span>]+<span class="number">1</span>) ans=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot; yes&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot; no&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
        <tag>nhspc</tag>
        <tag>全國賽</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 最短路徑問題 Dijkstra應用</title>
    <url>/ojques/cpp-dijkstra-apply/</url>
    <content><![CDATA[<h3 id="題目連結：Sprout-Online-Judge-No-393"><a href="#題目連結：Sprout-Online-Judge-No-393" class="headerlink" title="題目連結：Sprout Online Judge No. 393"></a>題目連結：<a href="https://neoj.sprout.tw/problem/393/">Sprout Online Judge No. 393</a></h3><p>這題用 Bellman-Ford 必定 TLE</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dr[<span class="number">4</span>]&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,dc[<span class="number">4</span>]&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dt[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line">string mp[<span class="number">2005</span>];</span><br><span class="line">bitset&lt;2005&gt; v[<span class="number">2005</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">position</span>&#123;</span><br><span class="line">    <span class="type">int</span> r,c;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(position a)&#123;</span><br><span class="line">        <span class="keyword">return</span> r==a.r &amp;&amp; c==a.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(position a,position b)&#123;</span><br><span class="line">    <span class="keyword">return</span> dt[a.r][a.c]&gt;dt[b.r][b.c];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n,m,ans=INF;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++) dt[i][j]=INF;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;mp[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    position ps,pe;</span><br><span class="line">    cin&gt;&gt;ps.r&gt;&gt;ps.c;ps.r--;ps.c--;</span><br><span class="line">    cin&gt;&gt;pe.r&gt;&gt;pe.c;pe.r--;pe.c--;</span><br><span class="line">    dt[ps.r][ps.c]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;position&gt; bfs;</span><br><span class="line">    bfs.<span class="built_in">push</span>(ps);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ct;</span><br><span class="line">    position now,next,mnPos;</span><br><span class="line">    <span class="keyword">while</span>(!bfs.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        now=bfs.<span class="built_in">top</span>();</span><br><span class="line">        bfs.<span class="built_in">pop</span>();</span><br><span class="line">        v[now.r][now.c]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            next.r=now.r+dr[i];</span><br><span class="line">            next.c=now.c+dc[i];</span><br><span class="line">            <span class="keyword">if</span>(next.r&gt;=<span class="number">0</span> &amp;&amp; next.c&gt;=<span class="number">0</span> &amp;&amp; next.r&lt;n &amp;&amp; next.c&lt;m)&#123;</span><br><span class="line">                ct=dt[now.r][now.c];</span><br><span class="line">                <span class="keyword">if</span>(mp[next.r][next.c]==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                    ct++;</span><br><span class="line">                <span class="keyword">if</span>(pe==next)</span><br><span class="line">                    ans=<span class="built_in">min</span>(ans,ct);</span><br><span class="line">                <span class="keyword">if</span>(!v[next.r][next.c])&#123;</span><br><span class="line">                    v[next.r][next.c]=<span class="number">1</span>;</span><br><span class="line">                    dt[next.r][next.c]=ct;</span><br><span class="line">                    bfs.<span class="built_in">push</span>(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 106全國賽 2. 自戀數</title>
    <url>/contest/cpp-national-106-2/</url>
    <content><![CDATA[<h3 id="題目連結：c459-2-自戀數-高中生程式解題系統"><a href="#題目連結：c459-2-自戀數-高中生程式解題系統" class="headerlink" title="題目連結：c459. 2. 自戀數 - 高中生程式解題系統"></a>題目連結：<a href="https://zerojudge.tw/ShowProblem?problemid=c459">c459. 2. 自戀數 - 高中生程式解題系統</a></h3><p>直接用字串轉數字配合題目敘述即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> base[<span class="number">15</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">        base[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">            base[i][j]=base[i][j<span class="number">-1</span>]*i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string N;</span><br><span class="line">    <span class="type">int</span> b,n=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;b&gt;&gt;N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        n*=b;</span><br><span class="line">        n+=N[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        sum+=base[(N[i]-<span class="string">&#x27;0&#x27;</span>)][N.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">    string ans=(n==sum)?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
        <tag>nhspc</tag>
        <tag>全國賽</tag>
      </tags>
  </entry>
  <entry>
    <title>基礎題 Q-2-13 無理數的快速冪</title>
    <url>/apcs/apcs325/cpp-q-2-13/</url>
    <content><![CDATA[<h3 id="題目連結：d024-Q-2-13-無理數的快速冪-108高中全國賽-simplifed-JMJudge"><a href="#題目連結：d024-Q-2-13-無理數的快速冪-108高中全國賽-simplifed-JMJudge" class="headerlink" title="題目連結：d024. Q_2_13 無理數的快速冪 (108高中全國賽, simplifed) - JMJudge"></a>題目連結：<a href="https://jmj.cmgsh.tp.edu.tw/ShowProblem?problemid=d024">d024. Q_2_13 無理數的快速冪 (108高中全國賽, simplifed) - JMJudge</a></h3><p>實做好無理數的乘法後就簡單了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> p=<span class="number">1000000009</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">number</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line">number <span class="keyword">operator</span>*(number a,number b)&#123;</span><br><span class="line">    number c;</span><br><span class="line">    c.x=((a.x*b.x%p)+(<span class="number">2</span>*a.y*b.y%p))%p;</span><br><span class="line">    c.y=((a.x*b.y%p)+(a.y*b.x%p))%p;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">number <span class="title">powerNum</span><span class="params">(number x,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>) <span class="keyword">return</span> x*<span class="built_in">powerNum</span>(x,n<span class="number">-1</span>);</span><br><span class="line">    number t=<span class="built_in">powerNum</span>(x,n/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> t*t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    number a;</span><br><span class="line">    cin&gt;&gt;a.x&gt;&gt;a.y&gt;&gt;n;</span><br><span class="line">    number ans=<span class="built_in">powerNum</span>(a,n);</span><br><span class="line">    cout&lt;&lt;ans.x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcs325</category>
      </categories>
      <tags>
        <tag>apcs</tag>
      </tags>
  </entry>
  <entry>
    <title>基礎題 Q-6-5 二維最大子矩陣</title>
    <url>/apcs/apcs325/cpp-q-6-5/</url>
    <content><![CDATA[<h3 id="題目連結：d074-Q-6-5-二維最大子矩陣-JMJudge"><a href="#題目連結：d074-Q-6-5-二維最大子矩陣-JMJudge" class="headerlink" title="題目連結：d074. Q_6_5 二維最大子矩陣 - JMJudge"></a>題目連結：<a href="https://jmj.cmgsh.tp.edu.tw/ShowProblem?problemid=d074">d074. Q_6_5 二維最大子矩陣 - JMJudge</a></h3><p>擱置了半年，如今終於解開。與 Q-2-12有異曲同工之妙，但複雜度變O(n2m)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> r first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> c second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 100000000000</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll a[<span class="number">205</span>][<span class="number">205</span>],p[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i][j];</span><br><span class="line">            p[i][j]=p[i<span class="number">-1</span>][j]+a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            ll psum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line">                psum+=p[j][k]-p[i][k];</span><br><span class="line">                <span class="keyword">if</span>(psum&lt;<span class="number">0</span>) psum=<span class="number">0</span>;</span><br><span class="line">                ans=<span class="built_in">max</span>(psum,ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcs325</category>
      </categories>
      <tags>
        <tag>apcs</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 小發現 cout 遠快於 prinf()</title>
    <url>/cppreview/cpp-review-coutvsprinf/</url>
    <content><![CDATA[<p>直接附上範例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1e6</span>;i++)&#123;</span><br><span class="line">        cout&lt;&lt;i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>cout 1.362s 1e5 printf() 6.840s 1e5 cout 3.794s 1e6 printf() 44.907s 1e6</p>
<p>以上為我測試的結果，大家也可以試試看。</p>
]]></content>
      <categories>
        <category>cppreview</category>
      </categories>
      <tags>
        <tag>review</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 資料結構 Binary Search Tree</title>
    <url>/cppreview/cpp-review-datastructure-binary-search-tree/</url>
    <content><![CDATA[<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML' async></script>

<p>Binary Search Tree (二元搜尋樹)，是用來存放多筆資料，並快速搜尋的資料結構。大概的原則就是，大的放右邊，小的放左邊。</p>
<h4 id="新增，刪除一個值都只要-O-log-N"><a href="#新增，刪除一個值都只要-O-log-N" class="headerlink" title="新增，刪除一個值都只要 \(O(log(N))\)"></a>新增，刪除一個值都只要 \(O(log(N))\)</h4><p>以下為實作範例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bst</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">            T val;</span><br><span class="line">            node* l,r;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">node</span>()&#123;</span><br><span class="line">                l=r=<span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">node</span>(T v)&#123;</span><br><span class="line">                l=r=<span class="literal">nullptr</span>;</span><br><span class="line">                val=v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(node *n,T v)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n-&gt;val==v)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n-&gt;val &gt; v &amp;&amp; n-&gt;r!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="built_in">find</span>(n-&gt;r,v);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n-&gt;val &lt; v &amp;&amp; n-&gt;l!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="built_in">find</span>(n-&gt;l,v);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(node *&amp;n,T v)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                node nd=<span class="keyword">new</span> <span class="built_in">node</span>(v);</span><br><span class="line">                n=&amp;nd;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n-&gt;val &gt; v &amp;&amp; n-&gt;r!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="built_in">insert</span>(n-&gt;r,v);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n-&gt;val &lt; v &amp;&amp; n-&gt;l!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="built_in">insert</span>(n-&gt;l,v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">DeleteNode</span><span class="params">(node *&amp;n)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n-&gt;l==<span class="literal">nullptr</span> &amp;&amp; n-&gt;r==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">delete</span> n;</span><br><span class="line">                n=<span class="literal">nullptr</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                node *left,*right;</span><br><span class="line">                <span class="keyword">if</span>(n-&gt;l==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    right=n-&gt;r;</span><br><span class="line">                    n-&gt;val=right-&gt;val;</span><br><span class="line">                    n-&gt;l=right-&gt;l;</span><br><span class="line">                    n-&gt;r=right-&gt;r;</span><br><span class="line">                    <span class="keyword">delete</span> right;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n-&gt;r==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    left=n-&gt;l;</span><br><span class="line">                    n-&gt;val=left-&gt;val;</span><br><span class="line">                    n-&gt;l=left-&gt;l;</span><br><span class="line">                    n-&gt;r=left-&gt;r;</span><br><span class="line">                    <span class="keyword">delete</span> left;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    right=n;</span><br><span class="line">                    left=n-&gt;l;</span><br><span class="line">                    <span class="keyword">while</span>(left-&gt;r!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                        right=left;</span><br><span class="line">                        left=left-&gt;l;</span><br><span class="line">                    &#125;</span><br><span class="line">                    n-&gt;val=left-&gt;val;</span><br><span class="line">                    <span class="keyword">if</span>(right!=n)</span><br><span class="line">                        right-&gt;r=left-&gt;l;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        right-&gt;l=left-&gt;l;</span><br><span class="line">                    <span class="keyword">delete</span> left;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(node *n,T v)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n-&gt;val==v)&#123;</span><br><span class="line">                <span class="built_in">DeleteNode</span>(n);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n-&gt;val &gt; v &amp;&amp; n-&gt;r!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="built_in">erase</span>(n-&gt;r,v);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n-&gt;val &lt; v &amp;&amp; n-&gt;l!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="built_in">erase</span>(n-&gt;l,v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">DeleteTree</span><span class="params">(node *n)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n-&gt;l!=<span class="literal">nullptr</span>)</span><br><span class="line">                <span class="built_in">DeleteTree</span>(n-&gt;l);</span><br><span class="line">            <span class="keyword">if</span>(n-&gt;r!=<span class="literal">nullptr</span>)</span><br><span class="line">                <span class="built_in">DeleteTree</span>(n-&gt;r);</span><br><span class="line">            <span class="keyword">delete</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">bst</span>()&#123;</span><br><span class="line">            root=<span class="literal">nullptr</span>;</span><br><span class="line">            sz=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">bst</span>()&#123;</span><br><span class="line">            <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)</span><br><span class="line">                <span class="built_in">DeleteTree</span>(root);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(T v)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">find</span>(root,v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(T v)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                node n=<span class="keyword">new</span> <span class="built_in">node</span>(v);</span><br><span class="line">                root=&amp;n;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">insert</span>(root,v);</span><br><span class="line">            &#125;</span><br><span class="line">            sz++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(T v)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">erase</span>(root,v);</span><br><span class="line">            sz--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sz;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        node *root;</span><br><span class="line">        <span class="type">int</span> sz;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="相同的，C-都幫你做好了，就是所謂的Set-Map。"><a href="#相同的，C-都幫你做好了，就是所謂的Set-Map。" class="headerlink" title="相同的，C++都幫你做好了，就是所謂的Set &amp; Map。"></a>相同的，C++都幫你做好了，就是所謂的Set &amp; Map。</h4><p>以下為使用範例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">vector <span class="title">v</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;++i)&#123;</span><br><span class="line">        v[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">random_shuffle</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    set s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:v)&#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">random_shuffle</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:v)&#123;</span><br><span class="line">        cout&lt;&lt;*s.<span class="built_in">lower_bound</span>(a)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;*s.<span class="built_in">upper_bound</span>(a)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="built_in">erase</span>(<span class="number">10</span>);</span><br><span class="line">    cout&lt;&lt;*s.<span class="built_in">lower_bound</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="我相信許多人跟我一樣，一開始不知道這些東西要用在哪？"><a href="#我相信許多人跟我一樣，一開始不知道這些東西要用在哪？" class="headerlink" title="我相信許多人跟我一樣，一開始不知道這些東西要用在哪？"></a>我相信許多人跟我一樣，一開始不知道這些東西要用在哪？</h4><p>以下我找了幾個範例</p>
<p><strong>1.</strong> 在O(Nlog(26))以內找出是否有一個字母在兩個字串中均能被找到(題目連結：<a href="https://www.hackerrank.com/challenges/two-strings/">Two Strings | HackerRank</a>)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">twoStrings</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">    set s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:s1)&#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:s2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">count</span>(a))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;YES&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>2.</strong> 以O(N^3log(N))找出一個字串中無序變形子串對的數目(題目連結：<a href="https://www.hackerrank.com/challenges/sherlock-and-anagrams/">Sherlock and Anagrams | HackerRank</a>) 最重要的，就是其刪除快速的特性</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sherlockAndAnagrams</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ct=<span class="number">0</span>,len=s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i st,tt;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=j;k++)&#123;</span><br><span class="line">                st.<span class="built_in">insert</span>(s[k]);</span><br><span class="line">                tt.<span class="built_in">insert</span>(s[k]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i+<span class="number">1</span>;k</span><br></pre></td></tr></table></figure>

<p><strong>3.</strong> 最後一個是Map的應用範例，Map是以first做排序依據，second存放對應資料。最常見的就是數字與出現頻率，以下甚至還有用來存頻率的頻率的用法。(題目連結：<a href="https://www.hackerrank.com/challenges/frequency-queries/">Frequency Queries | HackerRank</a>) m 放&lt;數字 , 頻率&gt;，ct 放&lt;頻率 , 頻率的頻率&gt;</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector <span class="title">freqQuery</span><span class="params">(vector&lt;<span class="type">int</span>&gt; q)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; m,ct;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:q)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">            ct[m[a[<span class="number">1</span>]]]=<span class="built_in">max</span>(ct[m[a[<span class="number">1</span>]]]<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">            m[a[<span class="number">1</span>]]++;</span><br><span class="line">            ct[m[a[<span class="number">1</span>]]]++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="number">2</span>)&#123;</span><br><span class="line">            ct[m[a[<span class="number">1</span>]]]=<span class="built_in">max</span>(ct[m[a[<span class="number">1</span>]]]<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">            m[a[<span class="number">1</span>]]=<span class="built_in">max</span>(m[a[<span class="number">1</span>]]<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">            ct[m[a[<span class="number">1</span>]]]++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="built_in">bool</span>(ct[a[<span class="number">1</span>]]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下一篇心得會補 pointer (指標) 的部分，在此之前可以先Google搜尋(C++指標)。&#96;</p>
]]></content>
      <categories>
        <category>cppreview</category>
      </categories>
      <tags>
        <tag>review</tag>
        <tag>datastructure</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 資料結構 Stack &amp; Queue</title>
    <url>/cppreview/cpp-review-datastructure-stack-queue/</url>
    <content><![CDATA[<p><strong>Stack</strong>，又稱作堆疊，顧名思義就是從上面(也可以說前面)放入與取出的資料結構。 <strong>Queue</strong>，稱為佇列，是從前面放後面取出的資料結構。</p>
<p>實作程式碼如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> t=<span class="number">-1</span>;</span><br><span class="line">        vector&lt;T&gt; dt;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">T <span class="title">top</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(t!=<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> dt[t];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;Stack is empty.\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(t!=<span class="number">-1</span>)&#123;</span><br><span class="line">                t--;</span><br><span class="line">                dt.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;Stack is empty.\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(T p)</span></span>&#123;</span><br><span class="line">            t++;</span><br><span class="line">            dt.<span class="built_in">push_back</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        deque&lt;T&gt; dt;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">T <span class="title">front</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!dt.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> dt.<span class="built_in">front</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;Queue is empty.\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!dt.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                dt.<span class="built_in">pop_front</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;Queue is empty.\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(T p)</span></span>&#123;</span><br><span class="line">            dt.<span class="built_in">push_back</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>C++已經幫你將這兩個資料結構實做好了，以下示範例程式碼</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">        st.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;st.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;st.<span class="built_in">top</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;q.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout&lt;&lt;q.<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;q.<span class="built_in">back</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>光聽這兩個介紹以及大部分的分享，相信你還是不知道這兩個東西要用在哪裡。以下會有幾個應用的範例，都是用 STL 。</p>
<h2 id="1-在-O-N-的複雜度下做單調對列-Ex-洛谷"><a href="#1-在-O-N-的複雜度下做單調對列-Ex-洛谷" class="headerlink" title="1.在 O(N) 的複雜度下做單調對列 Ex : 洛谷"></a>1.在 O(N) 的複雜度下做單調對列 Ex : <a href="https://www.luogu.com.cn/problem/P5788">洛谷</a></h2><p>題目敘述： 對於每個元素，從後面找出第一個比他大的元素的位置</p>
<p>這題就是要透過 stack 保持裡面所存位置對應的元素的單調遞減性。實際做法就是，遇到比他大的就丟掉，反正已經確認現在這個元素已經比他大了，後面也不會用到。否則他就還沒遇到還沒遇到比他大的。</p>
<p>以下為程式碼</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) cin&gt;&gt;v[i];</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">    stack&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;&gt; st;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>() &amp;&amp; v[st.<span class="built_in">top</span>()]&lt;v[i])&#123;</span><br><span class="line">            ans[st.<span class="built_in">top</span>()]=i+<span class="number">1</span>;</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        st.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a:ans)</span><br><span class="line">        cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-以-O-N-在滑動窗口中找最大以及最小值-Ex-洛谷"><a href="#2-以-O-N-在滑動窗口中找最大以及最小值-Ex-洛谷" class="headerlink" title="2.以 O(N) 在滑動窗口中找最大以及最小值 Ex : 洛谷"></a>2.以 O(N) 在滑動窗口中找最大以及最小值 Ex : <a href="https://www.luogu.com.cn/problem/P1886">洛谷</a></h2><p>題目敘述： 在所有長度為k的窗口中找到最大以及最小值</p>
<p>這題要用deque(double-ended-queue)，也就是雙向佇列，是一個從前後方都可以加入以及刪除值的queue。用以維持內部元素既在範圍以內，又保持單調遞增或遞減。</p>
<p>以下為程式碼</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> nm[<span class="number">1000010</span>]=&#123;<span class="number">0</span>&#125;,rmax[<span class="number">1000010</span>],rmin[<span class="number">1000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;nm[i];</span><br><span class="line"></span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; mx,mn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!mx.<span class="built_in">empty</span>() &amp;&amp; nm[mx.<span class="built_in">front</span>()]&lt;nm[i])</span><br><span class="line">            mx.<span class="built_in">pop_front</span>();</span><br><span class="line">        mx.<span class="built_in">push_front</span>(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!mn.<span class="built_in">empty</span>() &amp;&amp; nm[mn.<span class="built_in">front</span>()]&gt;nm[i])</span><br><span class="line">            mn.<span class="built_in">pop_front</span>();</span><br><span class="line">        mn.<span class="built_in">push_front</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rmax[<span class="number">0</span>]=mx.<span class="built_in">back</span>();</span><br><span class="line">    rmin[<span class="number">0</span>]=mn.<span class="built_in">back</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=k;j&lt;n;i++)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!mx.<span class="built_in">empty</span>() &amp;&amp; mx.<span class="built_in">back</span>()&lt;i)</span><br><span class="line">            mx.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">while</span>(!mn.<span class="built_in">empty</span>() &amp;&amp; mn.<span class="built_in">back</span>()&lt;i)</span><br><span class="line">            mn.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!mx.<span class="built_in">empty</span>() &amp;&amp; nm[mx.<span class="built_in">front</span>()]&lt;nm[j])</span><br><span class="line">            mx.<span class="built_in">pop_front</span>();</span><br><span class="line">        mx.<span class="built_in">push_front</span>(j);</span><br><span class="line">        <span class="keyword">while</span>(!mn.<span class="built_in">empty</span>() &amp;&amp; nm[mn.<span class="built_in">front</span>()]&gt;nm[j])</span><br><span class="line">            mn.<span class="built_in">pop_front</span>();</span><br><span class="line">        mn.<span class="built_in">push_front</span>(j);</span><br><span class="line"></span><br><span class="line">        rmax[i]=mx.<span class="built_in">back</span>();</span><br><span class="line">        rmin[i]=mn.<span class="built_in">back</span>();</span><br><span class="line"></span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n-k+<span class="number">1</span>;i++)</span><br><span class="line">        cout&lt;&lt;nm[rmin[i]]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n-k+<span class="number">1</span>;i++)</span><br><span class="line">        cout&lt;&lt;nm[rmax[i]]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cppreview</category>
      </categories>
      <tags>
        <tag>review</tag>
        <tag>datastructure</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 台中區 106-3 費氏數列</title>
    <url>/contest/cpp-taichung-106-3/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100 </span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ipt,f[N],pos=<span class="number">0</span>,ct;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">1</span>;f[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;N;i++)&#123;</span><br><span class="line">        f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;ipt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ipt==f[i])&#123;</span><br><span class="line">            pos=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;ipt;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans=pos;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;ipt)&#123;</span><br><span class="line">        pos++;</span><br><span class="line">        <span class="keyword">if</span>(ipt!=f[pos])&#123;</span><br><span class="line">            cout&lt;&lt;ipt;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 並查集實作</title>
    <url>/cppreview/cpp-review-dsu/</url>
    <content><![CDATA[<p>並查集，適用於高速判斷AB是否再同一組，以及合併兩組。</p>
<p>包含路徑壓縮與啟發式合併。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dsu</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">        vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; rank;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                p.<span class="built_in">push_back</span>(i);</span><br><span class="line">                rank.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a==p[a]) <span class="keyword">return</span> a;</span><br><span class="line">            <span class="keyword">return</span> p[a]=<span class="built_in">find</span>(p[a]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">find</span>(a)==<span class="built_in">find</span>(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">uni</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">same</span>(a,b))&#123;</span><br><span class="line">                <span class="type">int</span> rA=rank[<span class="built_in">find</span>(a)],rB=rank[<span class="built_in">find</span>(b)];</span><br><span class="line">                <span class="keyword">if</span>(rA&gt;rB)&#123;</span><br><span class="line">                    p[<span class="built_in">find</span>(b)]=p[<span class="built_in">find</span>(a)];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rA==rB)&#123;</span><br><span class="line">                    p[<span class="built_in">find</span>(b)]=p[<span class="built_in">find</span>(a)];</span><br><span class="line">                    rank[p[<span class="built_in">find</span>(a)]]++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    p[<span class="built_in">find</span>(a)]=p[<span class="built_in">find</span>(b)];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cppreview</category>
      </categories>
      <tags>
        <tag>review</tag>
        <tag>disjointsets</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 台中區 106-1 計算多個整數的平均值、最大值、最小值</title>
    <url>/contest/cpp-taichung-106-1/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">round</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a+<span class="number">5</span>)/<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n,sum=<span class="number">0</span>,mx=-INF,mn=INF,t;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;t;</span><br><span class="line">        mx=<span class="built_in">max</span>(mx,t);</span><br><span class="line">        mn=<span class="built_in">min</span>(mn,t);</span><br><span class="line">        sum+=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> aver=<span class="built_in">round</span>(sum*<span class="number">1000</span>/n);</span><br><span class="line">    cout&lt;&lt;aver/<span class="number">100</span>&lt;&lt;<span class="string">&quot;.&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02lld\n&quot;</span>,aver%<span class="number">100</span>);</span><br><span class="line">    cout&lt;&lt;mx&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;mn&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 台中區 106-2 算帳</title>
    <url>/contest/cpp-taichung-106-2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S second</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    map&lt;string,<span class="type">double</span>&gt; s,amount;</span><br><span class="line">    string p;</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;p &amp;&amp; p!=<span class="string">&quot;0000000000&quot;</span>)&#123;</span><br><span class="line">        <span class="type">int</span> a,pr;</span><br><span class="line">        cin&gt;&gt;pr&gt;&gt;a;</span><br><span class="line">        s[p]=pr;</span><br><span class="line">        amount[p]+=a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(map&lt;string,<span class="type">double</span>&gt;::iterator t=s.<span class="built_in">begin</span>();t!=s.<span class="built_in">end</span>();t++)&#123;</span><br><span class="line">        pair&lt;string,<span class="type">double</span>&gt; a=*t;</span><br><span class="line">        sum+=a.S*amount[a.F];</span><br><span class="line">        <span class="keyword">switch</span>(a.F[<span class="number">0</span>])&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span>(amount[a.F]&gt;=<span class="number">2</span>)</span><br><span class="line">                    sum-=a.S*<span class="built_in">floor</span>(amount[a.F]*<span class="number">0.5</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;Y&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span>(amount[a.F]&gt;=<span class="number">2</span>)</span><br><span class="line">                    sum-=a.S*<span class="built_in">floor</span>(amount[a.F]*<span class="number">0.5</span>)*<span class="number">0.5</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 台中區 106-4 數字序號轉換為雜湊表中對應的數字位置</title>
    <url>/contest/cpp-taichung-106-4/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>,tmp=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>()/<span class="number">3</span>*<span class="number">3</span>;i+=<span class="number">3</span>)&#123;</span><br><span class="line">        tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                tmp=<span class="built_in">int</span>(str[i+j]-<span class="string">&#x27;0&#x27;</span>)+<span class="number">10</span>*tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                tmp=<span class="built_in">int</span>(str[i+j]-<span class="string">&#x27;0&#x27;</span>)+<span class="number">10</span>*tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum=(sum+tmp)%<span class="number">997</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>((str.<span class="built_in">size</span>()/<span class="number">3</span>*<span class="number">3</span>)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=str.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=str.<span class="built_in">size</span>()/<span class="number">3</span>*<span class="number">3</span>;i--)&#123;</span><br><span class="line">            tmp=<span class="built_in">int</span>(str[i]-<span class="string">&#x27;0&#x27;</span>)+<span class="number">10</span>*tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=str.<span class="built_in">size</span>()/<span class="number">3</span>*<span class="number">3</span>;i&lt;str.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            tmp=<span class="built_in">int</span>(str[i]-<span class="string">&#x27;0&#x27;</span>)+<span class="number">10</span>*tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sum=(sum+tmp)%<span class="number">997</span>;</span><br><span class="line">    cout&lt;&lt;sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 台中區 106-5 以價格的移動平均值判斷買賣時機</title>
    <url>/contest/cpp-taichung-106-5/</url>
    <content><![CDATA[<p>基本上就是照著題目敘述稀里糊塗寫在 if 裡面就可以了，我還用了前綴和，這樣比較方便算區間和。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> k[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;,p[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">15</span>;i++)&#123;</span><br><span class="line">        cin&gt;&gt;k[i];</span><br><span class="line">        p[i]=p[i<span class="number">-1</span>]+k[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">11</span>;i&lt;=<span class="number">15</span>;i++)&#123;</span><br><span class="line">        cout&lt;&lt;k[i];</span><br><span class="line">        <span class="keyword">if</span>((p[i]-p[i<span class="number">-10</span>]) &gt; (p[i<span class="number">-1</span>]-p[i<span class="number">-1</span><span class="number">-10</span>]) &amp;&amp;</span><br><span class="line">          (p[i]-p[i<span class="number">-5</span>]) &gt; (p[i<span class="number">-1</span>]-p[i<span class="number">-1</span><span class="number">-5</span>]) &amp;&amp;</span><br><span class="line">          (k[i]*<span class="number">5</span>&gt; (p[i]-p[i<span class="number">-5</span>]) &amp;&amp; (p[i]-p[i<span class="number">-5</span>])*<span class="number">2</span> &gt; (p[i]-p[i<span class="number">-10</span>])) &amp;&amp;</span><br><span class="line">          (<span class="number">5</span>*k[i]*<span class="number">10</span> &lt; <span class="number">6</span>*(p[i]-p[i<span class="number">-10</span>])*<span class="number">10</span>/<span class="number">10</span>)  )&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;B&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">5</span>*k[i]*<span class="number">10</span> &gt; <span class="number">6</span>*(p[i]-p[i<span class="number">-10</span>])*<span class="number">10</span>/<span class="number">10</span> ||</span><br><span class="line">          (k[i]*<span class="number">10</span>&lt; (p[i]-p[i<span class="number">-5</span>])*<span class="number">10</span>/<span class="number">5</span> &amp;&amp; (p[i]-p[i<span class="number">-5</span>])*<span class="number">2</span> &lt; (p[i]-p[i<span class="number">-10</span>])) ||</span><br><span class="line">          (p[i]-p[i<span class="number">-10</span>]) &lt; (p[i<span class="number">-1</span>]-p[i<span class="number">-1</span><span class="number">-10</span>]) )&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;S&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;N&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 台中區 106-6 馬步問題</title>
    <url>/contest/cpp-taichung-106-6/</url>
    <content><![CDATA[<h4 id="參考資料：學科能力複試筆記-HackMD"><a href="#參考資料：學科能力複試筆記-HackMD" class="headerlink" title="參考資料：學科能力複試筆記 - HackMD"></a>參考資料：<a href="https://hackmd.io/@UltraGeek/HyJ3I-CCE#6-%E9%A6%AC%E6%AD%A5%E5%95%8F%E9%A1%8C">學科能力複試筆記 - HackMD</a></h4><p>微量優化(O(nlog(n)_8n) -&gt; O(n_8n))。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dr[<span class="number">8</span>]=&#123;<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dc[<span class="number">8</span>]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> tb[<span class="number">3</span>][<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;,n,ct=<span class="number">1</span>,sct,ans[<span class="number">3</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">position</span>&#123;</span><br><span class="line">    <span class="type">int</span> r,c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(position pNow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">        position pNext=&#123;pNow.r+dr[i],pNow.c+dc[i]&#125;;</span><br><span class="line">        <span class="keyword">if</span>(pNext.r&gt;=<span class="number">0</span> &amp;&amp; pNext.c&gt;=<span class="number">0</span> &amp;&amp; pNext.r&lt;<span class="number">3</span> &amp;&amp; pNext.c&lt;n &amp;&amp;</span><br><span class="line">          tb[pNext.r][pNext.c]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ct&lt;<span class="number">3</span>*n<span class="number">-1</span>)&#123;</span><br><span class="line">                ct++;</span><br><span class="line">                tb[pNext.r][pNext.c]=ct;</span><br><span class="line">                <span class="built_in">dfs</span>(pNext);</span><br><span class="line">                ct--;</span><br><span class="line">                tb[pNext.r][pNext.c]=<span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ct++;</span><br><span class="line">                tb[pNext.r][pNext.c]=ct;</span><br><span class="line">                sct++;</span><br><span class="line">                <span class="type">bool</span> lesser=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                    <span class="type">int</span> j;</span><br><span class="line">                    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(ans[i][j]!=tb[i][j])&#123;</span><br><span class="line">                            lesser=ans[i][j]&gt;tb[i][j];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(ans[i][j]!=tb[i][j])&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(lesser) <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                        ans[i][j]=tb[i][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ct--;</span><br><span class="line">                tb[pNext.r][pNext.c]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            ans[i][j]=<span class="number">10000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tb[<span class="number">0</span>][<span class="number">0</span>]=ct;</span><br><span class="line">    position pos=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(pos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sct==<span class="number">0</span>) cout&lt;&lt;<span class="string">&quot;0&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            cout&lt;&lt;ans[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 台中區 106-7 雙層骨牌</title>
    <url>/contest/cpp-taichung-106-7/</url>
    <content><![CDATA[<h4 id="參考資料：動態規劃】-多米諾骨牌-（ssl-1632-luogu-1282）-IT閱讀"><a href="#參考資料：動態規劃】-多米諾骨牌-（ssl-1632-luogu-1282）-IT閱讀" class="headerlink" title="參考資料：動態規劃】 多米諾骨牌 （ssl 1632&#x2F;luogu 1282） - IT閱讀"></a>參考資料：<a href="https://www.itread01.com/content/1545447844.html">動態規劃】 多米諾骨牌 （ssl 1632&#x2F;luogu 1282） - IT閱讀</a></h4><p>O(q2)以內的解，有點像01背包。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 32000</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q,d;</span><br><span class="line"><span class="type">short</span> dp[<span class="number">1005</span>][<span class="number">12010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;q;</span><br><span class="line">    <span class="type">int</span> up,dw;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1050</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">12010</span>;j++) dp[i][j]=INF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> mx=<span class="number">6</span>*q;</span><br><span class="line">    dp[<span class="number">0</span>][mx]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">        cin&gt;&gt;up&gt;&gt;dw;</span><br><span class="line">        d=up-dw;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=mx-i*<span class="number">6</span>;j&lt;=mx+i*<span class="number">6</span>;j++)&#123;</span><br><span class="line">            dp[i][j]=<span class="built_in">min</span>(dp[i<span class="number">-1</span>][j-d],dp[i<span class="number">-1</span>][j+d]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k=mx;</span><br><span class="line">    <span class="keyword">while</span>(dp[q][k]==INF) k++;</span><br><span class="line">    cout&lt;&lt;dp[q][k]&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;k-mx;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基礎題 TIOJ 1161 虛擬番茄</title>
    <url>/ojques/cpp-tioj-1161/</url>
    <content><![CDATA[<p>用heap(priority_queue)實作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 100000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> P pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PB push_back</span></span><br><span class="line"></span><br><span class="line">P sl[<span class="number">1000000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> iptNum=<span class="number">0</span>;iptNum&lt;t;iptNum++)&#123;</span><br><span class="line">        <span class="type">int</span> n,k,r=INF;</span><br><span class="line"></span><br><span class="line">        priority_queue&lt;<span class="type">int</span>&gt; pq;</span><br><span class="line"></span><br><span class="line">        cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;sl[i].F&gt;&gt;sl[i].S;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(sl,sl+n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(sl[i].S);</span><br><span class="line">            <span class="keyword">if</span>(pq.<span class="built_in">size</span>()==k)&#123;</span><br><span class="line">                r=<span class="built_in">min</span>(r,sl[i].F+pq.<span class="built_in">top</span>());</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;r&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
      </tags>
  </entry>
  <entry>
    <title>台中女中 109-6 超級大轉機</title>
    <url>/contest/cpp-tcgs-109-6/</url>
    <content><![CDATA[<p>用到了 Bellman-Ford Shortist Path Algorithm</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 1e9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> from,to,cost;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> d[<span class="number">505</span>],c[<span class="number">505</span>],n,m;</span><br><span class="line">edge a[<span class="number">10050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shortistPath</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">bool</span> update=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d[a[i].from]!=INF &amp;&amp; </span><br><span class="line">              d[a[i].to]&gt;d[a[i].from]+a[i].cost+c[a[i].to])&#123;</span><br><span class="line">                d[a[i].to]=d[a[i].from]+a[i].cost+c[a[i].to];</span><br><span class="line">                update=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!update) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;c[i];</span><br><span class="line">        d[i]=INF;</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i].from&gt;&gt;a[i].to&gt;&gt;a[i].cost;</span><br><span class="line">        a[m+i].from=a[i].to;</span><br><span class="line">        a[m+i].to=a[i].from;</span><br><span class="line">        a[m+i].cost=a[i].cost;</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">shortistPath</span>();</span><br><span class="line">    <span class="keyword">if</span>(d[n]!=INF)&#123;</span><br><span class="line">        cout&lt;&lt;d[n];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;-1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Array 1.2D Array - DS</title>
    <url>/ojques/hacker-rank-array-1-2d-array-ds/</url>
    <content><![CDATA[<h3 id="題目連結：2D-Array-DS-HackerRank"><a href="#題目連結：2D-Array-DS-HackerRank" class="headerlink" title="題目連結：2D Array - DS | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/2d-array/">2D Array - DS | HackerRank</a></h3><p>如題，二維陣列</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">hourglassSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; arr)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mx=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.<span class="built_in">size</span>()<span class="number">-2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr[i].<span class="built_in">size</span>()<span class="number">-2</span>;j++)&#123;</span><br><span class="line">            <span class="type">int</span> sum=arr[i][j]+</span><br><span class="line">                    arr[i][j+<span class="number">1</span>]+</span><br><span class="line">                    arr[i][j+<span class="number">2</span>]+</span><br><span class="line">                    arr[i+<span class="number">1</span>][j+<span class="number">1</span>]+</span><br><span class="line">                    arr[i+<span class="number">2</span>][j]+</span><br><span class="line">                    arr[i+<span class="number">2</span>][j+<span class="number">1</span>]+</span><br><span class="line">                    arr[i+<span class="number">2</span>][j+<span class="number">2</span>];</span><br><span class="line">            mx=<span class="built_in">max</span>(mx,sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Array 2.Left Rotation</title>
    <url>/ojques/hacker-rank-array-2-left-rotation/</url>
    <content><![CDATA[<h3 id="題目連結：Arrays-Left-Rotation-HackerRank"><a href="#題目連結：Arrays-Left-Rotation-HackerRank" class="headerlink" title="題目連結：Arrays: Left Rotation | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/ctci-array-left-rotation/">Arrays: Left Rotation | HackerRank</a></h3><p>運用到一點點數學性質</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rotLeft</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pos=d%a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(a[pos]);</span><br><span class="line">        pos++;</span><br><span class="line">        pos%=a.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>TOI 2021 入營考 A. 原始人排序</title>
    <url>/contest/cpp-toi-2021-a/</url>
    <content><![CDATA[<p>基本的因數性質</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> dt[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;dt[i];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stable_sort</span>(dt,dt+n,[](<span class="type">int</span> a,<span class="type">int</span> b)&#123;</span><br><span class="line">        <span class="type">int</span> ctA=<span class="number">0</span>,ctB=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(a&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                ctA++;</span><br><span class="line">            &#125;</span><br><span class="line">            a/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(b&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                ctB++;</span><br><span class="line">            &#125;</span><br><span class="line">            b/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ctA&lt;ctB;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cout&lt;&lt;dt[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>competition</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基礎題 陣線推進(資訊之芽)</title>
    <url>/ojques/cpp-topological-sort-oj/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">set&lt;<span class="type">int</span>&gt; g[<span class="number">100010</span>];</span><br><span class="line"><span class="type">int</span> ind[<span class="number">100010</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        ans=<span class="string">&quot;&quot;</span>;ct=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100010</span>;i++)&#123;</span><br><span class="line">            g[i].<span class="built_in">clear</span>();</span><br><span class="line">            ind[i]=<span class="number">0</span>;</span><br><span class="line">            v[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="type">int</span> to,from;</span><br><span class="line">            cin&gt;&gt;from&gt;&gt;to;</span><br><span class="line">            g[from].<span class="built_in">insert</span>(to);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> a:g[i])</span><br><span class="line">                ind[a]++;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt;&gt; topo;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ind[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                topo.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!topo.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> now=topo.<span class="built_in">top</span>();</span><br><span class="line">            topo.<span class="built_in">pop</span>();</span><br><span class="line">            ans.<span class="built_in">push_back</span>(now);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> next:g[now])&#123;</span><br><span class="line">                <span class="keyword">if</span>(--ind[next] ==<span class="number">0</span>)&#123;</span><br><span class="line">                    topo.<span class="built_in">push</span>(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">size</span>()==n)&#123;</span><br><span class="line">            cout&lt;&lt;ans[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;ans.<span class="built_in">size</span>();i++) cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans[i];</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;QAQ\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>sproutoj</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Array 3.New Year Chaos</title>
    <url>/ojques/hacker-rank-array-3-new-year-chaos/</url>
    <content><![CDATA[<h3 id="題目連結：New-Year-Chaos-HackerRank"><a href="#題目連結：New-Year-Chaos-HackerRank" class="headerlink" title="題目連結：New Year Chaos | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/new-year-chaos/">New Year Chaos | HackerRank</a></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">minimumBribes</span><span class="params">(vector&lt;<span class="type">int</span>&gt; q)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=q.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i]-(i+<span class="number">1</span>)&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Too chaotic\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="built_in">max</span>(<span class="number">0</span>,q[i]<span class="number">-2</span>);j&lt;i;j++)</span><br><span class="line">            <span class="keyword">if</span>(q[j]&gt;q[i])ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Array 4.Minimum Swaps 2</title>
    <url>/ojques/hacker-rank-array-4-minimum-swaps-2/</url>
    <content><![CDATA[<h3 id="題目連結：Minimum-Swaps-2-HackerRank"><a href="#題目連結：Minimum-Swaps-2-HackerRank" class="headerlink" title="題目連結：Minimum Swaps 2 | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/minimum-swaps-2/">Minimum Swaps 2 | HackerRank</a></h3><p>注意算完(算之前亦可)要將兩數交換</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">minimumSwaps</span><span class="params">(vector&lt;<span class="type">int</span>&gt; arr)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">o</span><span class="params">(arr)</span></span>;</span><br><span class="line">    <span class="built_in">sort</span>(o.<span class="built_in">begin</span>(),o.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> ct=<span class="number">0</span>,update=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> m[<span class="number">100010</span>]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]!=o[i])&#123;</span><br><span class="line">            <span class="built_in">swap</span>(arr[i],arr[arr[i]<span class="number">-1</span>]);</span><br><span class="line">            ct++;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ct;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Array 5.Array Manipulation</title>
    <url>/ojques/hacker-rank-array-5-array-manipulation/</url>
    <content><![CDATA[<h3 id="題目連結：Array-Manipulation-HackerRank"><a href="#題目連結：Array-Manipulation-HackerRank" class="headerlink" title="題目連結：Array Manipulation | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/crush/">Array Manipulation | HackerRank</a></h3><p>只要算開始與結束即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> s,e,c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">arrayManipulation</span><span class="params">(<span class="type">int</span> n, vector&lt;edge&gt; q)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> mx=<span class="number">0</span>,now=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(q.<span class="built_in">begin</span>(),q.<span class="built_in">end</span>(),[](edge a,edge b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.s&lt;b.s;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="function">vector&lt;edge&gt; <span class="title">bk</span><span class="params">(q)</span></span>;</span><br><span class="line">    <span class="built_in">sort</span>(bk.<span class="built_in">begin</span>(),bk.<span class="built_in">end</span>(),[](edge a,edge b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.e&lt;b.e;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:q)&#123;</span><br><span class="line">        now+=a.c;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;q.<span class="built_in">size</span>() &amp;&amp; a.s&gt;bk[i].e)&#123;</span><br><span class="line">            now-=bk[i].c;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        mx=<span class="built_in">max</span>(mx,now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Set And Map 1.Ransom Note</title>
    <url>/ojques/hacker-rank-set-and-map-1-ransom-note/</url>
    <content><![CDATA[<h3 id="題目連結：Hash-Tables-Ransom-Note-HackerRank"><a href="#題目連結：Hash-Tables-Ransom-Note-HackerRank" class="headerlink" title="題目連結：Hash Tables: Ransom Note | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/ctci-ransom-note/">Hash Tables: Ransom Note | HackerRank</a></h3><p>這APCS應該不會考吧？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">checkMagazine</span><span class="params">(vector&lt;string&gt; magazine, vector&lt;string&gt; note)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;string,<span class="type">int</span>&gt; m,n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:magazine)&#123;</span><br><span class="line">        m[a]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:note)&#123;</span><br><span class="line">        n[a]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(m[a.first]&lt;n[a.first])&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Set And Map 2.Two Strings</title>
    <url>/ojques/hacker-rank-set-and-map-2-two-strings/</url>
    <content><![CDATA[<h3 id="題目連結：Two-Strings-HackerRank"><a href="#題目連結：Two-Strings-HackerRank" class="headerlink" title="題目連結：Two Strings | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/two-strings/">Two Strings | HackerRank</a></h3><p>用unordered_set比較快O(N) vs O(NlogN)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">twoStrings</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;<span class="type">char</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:s1)&#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:s2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">count</span>(a))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;YES&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Set And Map 3.Sherlock and Anagrams</title>
    <url>/ojques/hacker-rank-set-and-map-3-sherlock-and-anagrams/</url>
    <content><![CDATA[<h3 id="題目連結：Sherlock-and-Anagrams-HackerRank"><a href="#題目連結：Sherlock-and-Anagrams-HackerRank" class="headerlink" title="題目連結：Sherlock and Anagrams | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/sherlock-and-anagrams/">Sherlock and Anagrams | HackerRank</a></h3><p>對於每個左右端窮舉即可，不過別做成O(N4logN)就好</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sherlockAndAnagrams</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ct=<span class="number">0</span>,len=s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;len;j++)&#123;</span><br><span class="line">            multiset&lt;<span class="type">char</span>&gt; st,tt;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=j;k++)&#123;</span><br><span class="line">                st.<span class="built_in">insert</span>(s[k]);</span><br><span class="line">                tt.<span class="built_in">insert</span>(s[k]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i+<span class="number">1</span>;k&lt;len-(j-i);k++)&#123;</span><br><span class="line">                tt.<span class="built_in">insert</span>(s[k+(j-i)]);</span><br><span class="line">                <span class="keyword">auto</span> it=tt.<span class="built_in">find</span>(s[k<span class="number">-1</span>]);</span><br><span class="line">                <span class="keyword">if</span>(it!=tt.<span class="built_in">end</span>()) tt.<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">if</span>(tt==st) ct++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ct;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Warm-up 2.Counting Valleys , in C++</title>
    <url>/ojques/hacker-rank-warm-up-2-counting-valleys/</url>
    <content><![CDATA[<h3 id="題目連結：Counting-Valleys-HackerRank"><a href="#題目連結：Counting-Valleys-HackerRank" class="headerlink" title="題目連結：Counting Valleys | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/counting-valleys/">Counting Valleys | HackerRank</a></h3><p>唯一要注意的是山谷的定義</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">countingValleys</span><span class="params">(<span class="type">int</span> steps, string path)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ct=<span class="number">0</span>,h=<span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> islow=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:path)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">            h--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            h++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(h&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!islow)&#123;</span><br><span class="line">                ct++;</span><br><span class="line">                islow=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            islow=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ct;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Warm-up 1.Sales by Match, in C++</title>
    <url>/ojques/hacker-rank-warm-up-1-sales-by-match/</url>
    <content><![CDATA[<h3 id="題目連結：Sales-by-Match-HackerRank"><a href="#題目連結：Sales-by-Match-HackerRank" class="headerlink" title="題目連結：Sales by Match | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/sock-merchant/">Sales by Match | HackerRank</a></h3><p>因應HackerRank系統，而分享 Coding 核心部分</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sockMerchant</span><span class="params">(<span class="type">int</span> n, vector&lt;<span class="type">int</span>&gt; ar)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ct[<span class="number">105</span>]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:ar)&#123;</span><br><span class="line">        ct[a]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">105</span>;i++)&#123;</span><br><span class="line">        ans+=ct[i]/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Warm-up 3.Jumping on the Clouds, in C++</title>
    <url>/ojques/hacker-rank-warm-up-3-jumping-on-the-cloud/</url>
    <content><![CDATA[<h3 id="題目連結：Jumping-on-the-Clouds-HackerRank"><a href="#題目連結：Jumping-on-the-Clouds-HackerRank" class="headerlink" title="題目連結：Jumping on the Clouds | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/jumping-on-the-clouds/">Jumping on the Clouds | HackerRank</a></h3><p>基本DP</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">jumpingOnClouds</span><span class="params">(vector&lt;<span class="type">int</span>&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> dp[<span class="number">105</span>];</span><br><span class="line">    <span class="built_in">fill</span>(dp,dp+<span class="number">105</span>,<span class="number">0x3f3f3f3f</span>);</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(c[<span class="number">1</span>]==<span class="number">0</span>) dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;c.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c[i]==<span class="number">0</span>) dp[i]=<span class="built_in">min</span>(dp[i<span class="number">-1</span>],dp[i<span class="number">-2</span>])+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> dp[i]=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[c.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Warm-up 4.Repeated String, in C++</title>
    <url>/ojques/hacker-rank-warm-up-4-repeated-string/</url>
    <content><![CDATA[<h3 id="題目連結：Repeated-String-HackerRank"><a href="#題目連結：Repeated-String-HackerRank" class="headerlink" title="題目連結：Repeated String | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/repeated-string/">Repeated String | HackerRank</a></h3><p>如果TLE的話請回憶你的數學，相信可以找到解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">repeatedString</span><span class="params">(string s, <span class="type">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> len=s.<span class="built_in">size</span>(),ct=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">&#x27;a&#x27;</span>) ct++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    ans+=n/len*ct;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n%len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;a&#x27;</span>) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Set And Map 4.Frequency Queries</title>
    <url>/ojques/hackerrank-set-and-map-5-frequency-queries/</url>
    <content><![CDATA[<h3 id="題目連結：Frequency-Queries-HackerRank"><a href="#題目連結：Frequency-Queries-HackerRank" class="headerlink" title="題目連結：Frequency Queries | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/frequency-queries/">Frequency Queries | HackerRank</a></h3><p>最後我是用兩個map，一個存數字，另一個存數量變化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">freqQuery</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; q)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; m,ct;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:q)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">            ct[m[a[<span class="number">1</span>]]]=<span class="built_in">max</span>(ct[m[a[<span class="number">1</span>]]]<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">            m[a[<span class="number">1</span>]]++;</span><br><span class="line">            ct[m[a[<span class="number">1</span>]]]++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="number">2</span>)&#123;</span><br><span class="line">            ct[m[a[<span class="number">1</span>]]]=<span class="built_in">max</span>(ct[m[a[<span class="number">1</span>]]]<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">            m[a[<span class="number">1</span>]]=<span class="built_in">max</span>(m[a[<span class="number">1</span>]]<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">            ct[m[a[<span class="number">1</span>]]]++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="built_in">bool</span>(ct[a[<span class="number">1</span>]]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Sorting 1.Bubble Sort</title>
    <url>/ojques/hackerrank-sorting-1-bubble-sort/</url>
    <content><![CDATA[<h3 id="題目連結：Sorting-Bubble-Sort-HackerRank"><a href="#題目連結：Sorting-Bubble-Sort-HackerRank" class="headerlink" title="題目連結：Sorting: Bubble Sort | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/ctci-bubble-sort/">Sorting: Bubble Sort | HackerRank</a></h3><p>這題雖然有更好的算法(merge sort+反序數對)，但用氣泡就可以了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">countSwaps</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ct=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;a.<span class="built_in">size</span>()<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">                ct++;</span><br><span class="line">                <span class="built_in">swap</span>(a[j],a[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Array is sorted in &quot;</span>&lt;&lt;ct&lt;&lt;<span class="string">&quot; swaps.&quot;</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;First Element: &quot;</span>&lt;&lt;a[<span class="number">0</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Last Element: &quot;</span>&lt;&lt;a[a.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Sorting 2.Mark and Toys</title>
    <url>/ojques/hackerrank-sorting-2-mark-and-toys/</url>
    <content><![CDATA[<h3 id="題目連結：Mark-and-Toys-HackerRank"><a href="#題目連結：Mark-and-Toys-HackerRank" class="headerlink" title="題目連結：Mark and Toys | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/mark-and-toys/">Mark and Toys | HackerRank</a></h3><p>用Greedy，小的先放</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">maximumToys</span><span class="params">(vector&lt;<span class="type">int</span>&gt; ps, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(ps.<span class="built_in">begin</span>(),ps.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>,ct=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:ps)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum+a&lt;k)&#123;</span><br><span class="line">            sum+=a;</span><br><span class="line">            ct++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ct;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Sorting 3.Comparator</title>
    <url>/ojques/hackerrank-sorting-3-comparator/</url>
    <content><![CDATA[<h3 id="題目連結：Sorting-Comparator-HackerRank"><a href="#題目連結：Sorting-Comparator-HackerRank" class="headerlink" title="題目連結：Sorting: Comparator | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/ctci-comparator-sorting/">Sorting: Comparator | HackerRank</a></h3><p>比較函式的撰寫</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Player</span> &#123;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    string name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Checker</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">comparator</span><span class="params">(Player a, Player b)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.score!=b.score) <span class="keyword">return</span> a.score&gt;b.score?<span class="number">0</span>:<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> a.name&lt;b.name?<span class="number">0</span>:<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Sorting 5.Counting Inversions</title>
    <url>/ojques/hackerrank-sorting-5-counting-inversions/</url>
    <content><![CDATA[<h3 id="題目連結：Merge-Sort-Counting-Inversions-HackerRank"><a href="#題目連結：Merge-Sort-Counting-Inversions-HackerRank" class="headerlink" title="題目連結：Merge Sort: Counting Inversions | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/ctci-merge-sort/">Merge Sort: Counting Inversions | HackerRank</a></h3><p>這就是反序數對了(Merge Sort)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">long</span>&gt; dt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">msort</span><span class="params">(<span class="type">long</span> l,<span class="type">long</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> mid=(l+r)/<span class="number">2</span>,j=mid;</span><br><span class="line">    <span class="type">long</span> sum=<span class="built_in">msort</span>(l,mid)+<span class="built_in">msort</span>(mid,r);</span><br><span class="line">    <span class="type">long</span> tmp[r-l],k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> i=l;i&lt;mid;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;r &amp;&amp; dt[j]&lt;dt[i])&#123;</span><br><span class="line">            tmp[k++]=dt[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        tmp[k++]=dt[i];</span><br><span class="line">        sum+=j-mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;r)&#123;</span><br><span class="line">        tmp[k++]=dt[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> i=l;i&lt;r;i++)&#123;</span><br><span class="line">        dt[i]=tmp[j];</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>HackerRank Sorting 4.Fraudulent Activity Notifications</title>
    <url>/ojques/hackerrank-sorting-4-fraudulent-activity-notifications/</url>
    <content><![CDATA[<h3 id="題目連結：Fraudulent-Activity-Notifications-HackerRank"><a href="#題目連結：Fraudulent-Activity-Notifications-HackerRank" class="headerlink" title="題目連結：Fraudulent Activity Notifications | HackerRank"></a>題目連結：<a href="https://www.hackerrank.com/challenges/fraudulent-activity-notifications/">Fraudulent Activity Notifications | HackerRank</a></h3><p>我只想到用 Counting Sort (O(n*exp[i]_range))。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">activityNotifications</span><span class="params">(vector&lt;<span class="type">int</span>&gt; e, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ct=<span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">m</span><span class="params">(<span class="number">205</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;d;i++)&#123;</span><br><span class="line">        m[e[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=d;i&lt;e.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="type">int</span> k=<span class="number">0</span>,p=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">201</span>;j++)&#123;</span><br><span class="line">            k+=m[j];</span><br><span class="line">            <span class="keyword">if</span>(d&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(k&gt;=d/<span class="number">2</span>+<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(e[i]&gt;=j*<span class="number">2</span>) ct++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(k==d/<span class="number">2</span>)&#123;</span><br><span class="line">                    p=j;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k&gt;d/<span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(p==<span class="number">-1</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(e[i]&gt;=j*<span class="number">2</span>) ct++;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(e[i]&gt;=j+p) ct++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m[e[i]]++;</span><br><span class="line">        m[e[i-d]]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ct;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>hackerrank</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1. Two Sum</title>
    <url>/ojques/leetcode-1-two-sum/</url>
    <content><![CDATA[<h3 id="題目連結：-Two-Sum-LeetCode"><a href="#題目連結：-Two-Sum-LeetCode" class="headerlink" title="題目連結： Two Sum - LeetCode"></a>題目連結： <a href="https://leetcode.com/problems/two-sum/">Two Sum - LeetCode</a></h3><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近想說來寫一下許多人推薦的 LeetCode。</p>
<h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>我是用 pair 額外儲存陣列中元素的 index ，並用排序加上二分搜的方法。因為這題的 n 最多是 10000，我不確定 O(n^2) 的演算法會不會過，所以就決定用 O(nlog(n))，…一個比較保險的概念。</p>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; <span class="built_in">v</span>(nums.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            v[i].first=nums[i];</span><br><span class="line">            v[i].second=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="type">int</span> a=v[i].first;</span><br><span class="line">            <span class="type">int</span> it=<span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>()+i+<span class="number">1</span>,v.<span class="built_in">end</span>(),<span class="built_in">make_pair</span>(target-a,<span class="number">0</span>))-v.<span class="built_in">begin</span>();</span><br><span class="line">            <span class="keyword">if</span>(it&gt;=nums.<span class="built_in">size</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> b=v[it].first;</span><br><span class="line">            <span class="keyword">if</span>(a+b==target)&#123;</span><br><span class="line">                ret.<span class="built_in">emplace_back</span>(v[i].second);</span><br><span class="line">                ret.<span class="built_in">emplace_back</span>(v[it].second);</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2. Add Two Numbers</title>
    <url>/ojques/leetcode-2-add-two-numbers/</url>
    <content><![CDATA[<h3 id="題目連結：Add-Two-Numbers-LeetCode"><a href="#題目連結：Add-Two-Numbers-LeetCode" class="headerlink" title="題目連結：Add Two Numbers - LeetCode"></a>題目連結：<a href="https://leetcode.com/problems/add-two-numbers/">Add Two Numbers - LeetCode</a></h3><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>我的作法可能沒有那麼好，我是用 vector 存數字，接著進行運算，最後再轉成 link-list。</p>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * struct ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode *next;</span><br><span class="line"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="line"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="line"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; n1,n2;</span><br><span class="line">        n1.<span class="built_in">emplace_back</span>(l1-&gt;val);</span><br><span class="line">        <span class="keyword">while</span>(l1-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            l1=l1-&gt;next;</span><br><span class="line">            n1.<span class="built_in">emplace_back</span>(l1-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n2.<span class="built_in">emplace_back</span>(l2-&gt;val);</span><br><span class="line">        <span class="keyword">while</span>(l2-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            l2=l2-&gt;next;</span><br><span class="line">            n2.<span class="built_in">emplace_back</span>(l2-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(max(n1.size(),n2.size())+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n1.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            ans[i]+=n1[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n2.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            ans[i]+=n2[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">max</span>(n1.<span class="built_in">size</span>(),n2.<span class="built_in">size</span>());++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[i]&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">                ans[i+<span class="number">1</span>]++;</span><br><span class="line">                ans[i]-=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">back</span>()==<span class="number">0</span>)&#123;</span><br><span class="line">            ans.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode *ret=<span class="keyword">new</span> <span class="built_in">ListNode</span>(ans[<span class="number">0</span>]),*a=ret,*b=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;ans.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            b=<span class="keyword">new</span> <span class="built_in">ListNode</span>(ans[i]);</span><br><span class="line">            a-&gt;next=b;</span><br><span class="line">            a=b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ojques</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>APCS 講義</title>
    <url>/apcs/apcspracticaltest/my-apcs-handout/</url>
    <content><![CDATA[<h1 id="源起-說明"><a href="#源起-說明" class="headerlink" title="源起 &amp; 說明"></a>源起 &amp; 說明</h1><p>起心動念編纂這本「講義」的時候，正值我準備 APCS 考試期間，當時也正在就讀高中，考量到時間上的不足，我邀請 3 個人一起參與，所以，作者總共有 4 個人，而本篇貼文所摘錄的是我所創作的部分。</p>
<h1 id="作者序"><a href="#作者序" class="headerlink" title="作者序"></a>作者序</h1><p>演算法與資料結構一直以來都是程式設計中最重要的部分。然而許多的書籍在介紹時，出於篇幅考量，字句精簡，以致晦澀難懂。本書旨在對於演算法及資料結構進行詳細的介紹，避免初學者遇到與我相同的困境，因而花費許多時間。雖說是競賽入門，然我仍有計畫放一些進階的資料結構與演算法。</p>
<p>後續我盡可能會將所有題目放在 ZeroJudge 的課程裡，方便大家測試自己的程式碼，也方便除錯。<br>(參加課程方式。從使用者選單-&gt;「參加課程」-&gt;課程代碼：a7HcCs)</p>
<p>這本書作為我程式設計學習的其中一個指標，也是我自主學習計畫的內容。希望能幫助到一些在資料結構與演算法的學習與運用上不知如何進展的人。</p>
<p>作者：李尚哲、余光磊、戴偉璿與李卓岳。</p>
<p>本教材歡迎分享使用，僅須註明出處，惟不得作營利用途。</p>
<h1 id="樹狀樹組-BIT"><a href="#樹狀樹組-BIT" class="headerlink" title="樹狀樹組-BIT"></a>樹狀樹組-BIT</h1><blockquote>
<p><strong>快速求取區間和的助手</strong></p>
</blockquote>
<h2 id="回顧"><a href="#回顧" class="headerlink" title="回顧"></a>回顧</h2><p>還記得前綴和嗎，他也是用來求區間和的，但你應該會發現，若當中有一個值需要被修改，那整列都會被動到。</p>
<p>以下是一個比較表，了解BIT強大之處</p>
<table>
<thead>
<tr>
<th>資料結構</th>
<th>查尋區間和</th>
<th>單點修改值</th>
</tr>
</thead>
<tbody><tr>
<td>純陣列</td>
<td>\(O(n)\)</td>
<td>\(O(1)\)</td>
</tr>
<tr>
<td>前綴和</td>
<td>\(O(1)\)</td>
<td>\(O(n)\)</td>
</tr>
<tr>
<td>BIT</td>
<td>\(O(log(n))\)</td>
<td>\(O(log(n))\)</td>
</tr>
</tbody></table>
<h2 id="用途-概念"><a href="#用途-概念" class="headerlink" title="用途 &amp; 概念"></a>用途 &amp; 概念</h2><p>BIT用於在快速求取區間和的同時，又能保證快速修改。感覺像是陣列與前綴和的優點結合下的產物，不過其複雜程度也是三者之中最高的。以下為示意圖，其中數字代表它儲存的區間。</p>
<img src="https://live.staticflickr.com/65535/53128470737_d105641fc7_c.jpg" width="750" height="400" alt="myApcsHanoutEp1"/>

<p>如果想要知道<code>1~5</code>的和，可以查詢<code>1~4+5</code>。以下為查詢所需區間表。</p>
<table>
<thead>
<tr>
<th align="center">1</th>
<th align="center">1~2</th>
<th align="center">1~3</th>
<th align="center">1~4</th>
<th align="center">1~5</th>
<th align="center">1~6</th>
<th align="center">1~7</th>
<th align="center">1~8</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">1~2</td>
<td align="center">1~2 &amp; 3</td>
<td align="center">1~4</td>
<td align="center">1~4 &amp; 5</td>
<td align="center">1<del>4 &amp; 5</del>6</td>
<td align="center">1<del>4 &amp; 5</del>6 &amp; 7</td>
<td align="center">1~8</td>
</tr>
</tbody></table>
<p>可以發現，在元素數量為8時，最多會需要查詢3個區間就可以得到<code>1~n</code>的值，接著就像前綴和那樣，用<code>1~R - 1~(L-1)</code>就可以求出所有區間的和了。</p>
<h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>BIT一般都是用陣列實作，用區間最大值作為存放位置(例如<code>1~4</code>放在<code>4</code>)。那搜尋與修改呢？這部分就比較複雜了，需要了解一些二進位制，如果你已經理解二進位制了，那就繼續往下看吧。</p>
<h3 id="二進位表"><a href="#二進位表" class="headerlink" title="二進位表"></a>二進位表</h3><table>
<thead>
<tr>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
</tr>
</thead>
<tbody><tr>
<td>000001</td>
<td>000010</td>
<td>000011</td>
<td>000100</td>
<td>000101</td>
<td>000110</td>
<td>000111</td>
<td>001000</td>
</tr>
</tbody></table>
<h3 id="lowbit"><a href="#lowbit" class="headerlink" title="lowbit"></a>lowbit</h3><p>lowbit是在二進位下右邊看過來最前面的1，例如：6(000110)就是2(000010)，一樣提供一個表</p>
<table>
<thead>
<tr>
<th align="center">1</th>
<th>2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
<th align="center">6</th>
<th align="center">7</th>
<th align="center">8</th>
</tr>
</thead>
<tbody><tr>
<td align="center">000001</td>
<td>000010</td>
<td align="center">000011</td>
<td align="center">000100</td>
<td align="center">000101</td>
<td align="center">000110</td>
<td align="center">000111</td>
<td align="center">001000</td>
</tr>
<tr>
<td align="center">000001</td>
<td>000010</td>
<td align="center">000001</td>
<td align="center">000100</td>
<td align="center">000001</td>
<td align="center">000010</td>
<td align="center">000001</td>
<td align="center">001000</td>
</tr>
</tbody></table>
<h3 id="查詢"><a href="#查詢" class="headerlink" title="查詢"></a>查詢</h3><p>可以發現，\(x\)重複\(-lowbit(x)\)會變成0，且途中會經過所有需要的區間。以7為例</p>
<img src="https://live.staticflickr.com/65535/53129060566_a9054451ce_c.jpg" width="750" height="400" alt="myApcsHanoutEp2"/>

<p>只要將所有經過的區間加在一起，就可以得到區間和了。這也呼應為何他查尋的複雜度為\(O(log(n))\)，因為\(n\)只會有\(log(n)\)個\(bit\)。</p>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><img src="https://live.staticflickr.com/65535/53129470005_445f4ddc2c_c.jpg" width="750" height="300" alt="myApcsHanoutEp3"/>

<p>這樣最多也是\(O(log(n))\)。也可以發現\(lowbit\)的重要性。</p>
<h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="comment">// 與 int lowbit(x)&#123; return x&amp;-x;&#125;</span></span><br><span class="line"><span class="comment">// 用define或函式雖然不會讓你的程式碼寫起來比較快，但可以使其較易於理解。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line">ll bt[<span class="number">200010</span>];</span><br><span class="line">ll a[<span class="number">200010</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// build 函式是透過逐個更新陣列的所有元素來建構BIT</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x=i;x&lt;<span class="number">200005</span>;x+=<span class="built_in">lowbit</span>(x))</span><br><span class="line">            bt[x]+=a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 單點加值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    a[x]+=k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=<span class="number">200005</span>;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        bt[i]+=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由單點加值衍生出來的單點修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(x,k-a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜尋1~x的區間和</span></span><br><span class="line"><span class="function">ll <span class="title">find_sum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    ll ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&gt;<span class="number">0</span>;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        ret+=bt[i];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用計算(1~r) - (1~(l-1))算出所有區間的區間和</span></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find_sum</span>(r)-<span class="built_in">find_sum</span>(l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="習題"><a href="#習題" class="headerlink" title="習題"></a>習題</h2><h3 id="Q-13-1-區域調查-POJ-1195-Mobile-phones-改編"><a href="#Q-13-1-區域調查-POJ-1195-Mobile-phones-改編" class="headerlink" title="Q-13-1 區域調查(POJ.1195 Mobile phones 改編)"></a>Q-13-1 <a href="https://zerojudge.tw/ShowProblem?problemid=d796">區域調查(POJ.1195 Mobile phones 改編)</a></h3><h4 id="題目敘述"><a href="#題目敘述" class="headerlink" title="題目敘述 :"></a>題目敘述 :</h4><p>給一個矩陣 T(1,1), T(1,2),…. T(N,M)，求 T(x1,y1)  到 T(x2,y2) 的總和 或者是修改 T(x1,y1) 的值</p>
<h4 id="輸入說明"><a href="#輸入說明" class="headerlink" title="輸入說明 :"></a>輸入說明 :</h4><p>每組輸入的第一行會有兩個正整數 N Q ( 1 ≦ N ≦ 250,  Q ≦ 50,0000)</p>
<p>接下來會有 N 行，每行上會有 N 個元素 M ( 0 ≦ M ≦ 32767 )</p>
<p>接下來會有 Q 行，倘若第一個數字為 1，則接下來會有四個數字</p>
<p>x1 , y1 , x2 , y2， 1 ≦ x1 , y1 , x2 , y2 ≦ 250</p>
<p>請輸出元素 \(S&#x3D;{( x , y ) | x1 ≦ x ≦ x2, y1 ≦ y ≦ y2 }\)符合的所有元素總和</p>
<p>倘若第一個數字為2，則接下來會有三個數字</p>
<p>x1 , y1 , V， 1 ≦ x1 , y1 ≦ 250 , 0 ≦ V ≦ 32767,</p>
<p>請修改 ( x1 , y1 )&#x3D; V ; 此行不必輸出</p>
<h4 id="輸出說明"><a href="#輸出說明" class="headerlink" title="輸出說明 :"></a>輸出說明 :</h4><p>若為調查，則輸出區域中的元素總和，若為修改，則不必輸出</p>
<h4 id="範例輸入-1"><a href="#範例輸入-1" class="headerlink" title="範例輸入 1 :"></a>範例輸入 1 :</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 10</span><br><span class="line">3 2 2 3 7</span><br><span class="line">4 4 0 3 8</span><br><span class="line">2 4 7 2 3</span><br><span class="line">5 9 6 1 4</span><br><span class="line">7 1 7 1 1</span><br><span class="line">2 2 2 1</span><br><span class="line">1 5 4 5 5</span><br><span class="line">2 2 1 7</span><br><span class="line">1 3 2 1 5</span><br><span class="line">1 2 5 4 5</span><br><span class="line">1 1 2 2 1</span><br><span class="line">2 2 2 7</span><br><span class="line">2 4 5 5</span><br><span class="line">1 3 3 4 5</span><br><span class="line">1 4 3 2 2</span><br></pre></td></tr></table></figure>
<h4 id="範例輸出-1"><a href="#範例輸出-1" class="headerlink" title="範例輸出 1 :"></a>範例輸出 1 :</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">42</span><br><span class="line">15</span><br><span class="line">13</span><br><span class="line">24</span><br><span class="line">33</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Q-13-2-2D-rank-finding-problem-98學年度中投區資訊學科能力競賽"><a href="#Q-13-2-2D-rank-finding-problem-98學年度中投區資訊學科能力競賽" class="headerlink" title="Q-13-2 2D rank finding problem(98學年度中投區資訊學科能力競賽)"></a>Q-13-2 <a href="https://zerojudge.tw/ShowProblem?problemid=d847">2D rank finding problem(98學年度中投區資訊學科能力競賽)</a></h3><h4 id="題目敘述-1"><a href="#題目敘述-1" class="headerlink" title="題目敘述 :"></a>題目敘述 :</h4><p>二度空間上的排名計算問題(2D rank finding problem)：給定二度平面空間(2D)上的點A &#x3D; (a1,a2)與點B &#x3D; (b1,b2)，其大小關係定義為若A &gt; B 若且唯若 a1&gt; b1 且 a2 &gt; b2 ;亦即A點在B點的右上方。如下圖中，B &gt;A, C&gt;A, D&gt;A, D&gt;C, D&gt; B。值得注意的是，並非任意兩點均可以決定大小關係，如下圖中的點A與點E，點D與點E等，無法決定這兩點的大小關係故為無法比較(incomparable)。給定N個點(x1,y1), (x2,y2), …, (xn,yn)，定義某一個點的排名(rank) 為所給的點集合中，比該點小的點的個數。</p>
<p>設計一個程式，從檔案讀取點的名稱與座標，計算出在所給定的集合中，所有點的排名值。</p>
<h4 id="輸入說明-1"><a href="#輸入說明-1" class="headerlink" title="輸入說明 :"></a>輸入說明 :</h4><p>有多組測試資料</p>
<p>每組的第一行有一個數字N ( 1 ≦ N ≦ 10000 )</p>
<p>接下來會有N行，每行上會有兩個數字  x  y  ( 1 ≦ x , y ≦ 1000 )</p>
<h4 id="輸出說明-1"><a href="#輸出說明-1" class="headerlink" title="輸出說明 :"></a>輸出說明 :</h4><p>請按照輸入的順序，求出對於 ( x , y ) 有多少個點 ( a , b )</p>
<p>在它的左下方 a &lt; x , b &lt; y</p>
<h4 id="範例輸入-1-1"><a href="#範例輸入-1-1" class="headerlink" title="範例輸入 1 :"></a>範例輸入 1 :</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">961 404</span><br><span class="line">640 145</span><br><span class="line">983 888</span><br><span class="line">539 71</span><br><span class="line">437 532</span><br></pre></td></tr></table></figure>
<h4 id="範例輸出-1-1"><a href="#範例輸出-1-1" class="headerlink" title="範例輸出 1 :"></a>範例輸出 1 :</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Q-13-3-低地距離-2020年10月APCS"><a href="#Q-13-3-低地距離-2020年10月APCS" class="headerlink" title="Q-13-3 低地距離(2020年10月APCS)"></a>Q-13-3 <a href="https://zerojudge.tw/ShowProblem?problemid=f315">低地距離(2020年10月APCS)</a></h3><h4 id="題目敘述-2"><a href="#題目敘述-2" class="headerlink" title="題目敘述 :"></a>題目敘述 :</h4><p>輸入一個長度為 2n 的陣列，其中 1 ~ n 的每個數字都剛好各 2 次。</p>
<p>i 的低窪值的定義是兩個數值為 i 的位置中間，有幾個小於 i 的的數字。</p>
<p>以 \([3, 1, 2, 1, 3, 2]\) 為例，1的低窪值為 0, 2 的低窪值值為 1, 3 的低窪值為 3。</p>
<p>請對於每個 1 ~ n 的數字都求其低窪值（兩個相同的數字之間有幾個數字比它小），輸出低窪值的總和，答案可能會超過 C++ int 的上限。</p>
<h4 id="輸入說明-2"><a href="#輸入說明-2" class="headerlink" title="輸入說明 :"></a>輸入說明 :</h4><p>第一行有一個正整數 n<br>第二行有 2n 個正整數，以空格分隔，保證 1 ~ n 每個數字都恰好出現兩次。</p>
<p>1≤n≤100000</p>
<h4 id="輸出說明-2"><a href="#輸出說明-2" class="headerlink" title="輸出說明 :"></a>輸出說明 :</h4><p>輸出 1 ~ n 每個數字的低窪值總和。</p>
<h4 id="範例輸入-1-2"><a href="#範例輸入-1-2" class="headerlink" title="範例輸入 1 :"></a>範例輸入 1 :</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">3 1 2 1 3 2</span><br></pre></td></tr></table></figure>
<h4 id="範例輸出-1-2"><a href="#範例輸出-1-2" class="headerlink" title="範例輸出 1 :"></a>範例輸出 1 :</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>




<h1 id="線段樹"><a href="#線段樹" class="headerlink" title="線段樹"></a>線段樹</h1><blockquote>
<p><strong>於競賽而言強大的工具。</strong></p>
</blockquote>
<h2 id="用法-概念"><a href="#用法-概念" class="headerlink" title="用法 &amp; 概念"></a>用法 &amp; 概念</h2><p>線段樹除了可以用來快速解區間和問題，還可以用來執行許多與區間有關的操作。大致上用以下方式建構區間</p>
<img src="https://live.staticflickr.com/65535/53129540858_71fcd54c45_c.jpg" width="750" height="275" alt="myApcsHanoutEp4"/>

<p>每個區間視情況放不同的數值，例如：最大&#x2F;小，或是區間總和等。</p>
<p>接著，每個區間就都可以分為\(O(log(n))\)個區間，例如<code>2~7</code>可以分為<code>2, 3~4, 5~6, 7</code></p>
<img src="https://live.staticflickr.com/65535/53129540863_b35edb90b3_c.jpg" width="750" height="275" alt="myApcsHanoutEp5"/>

<p>查詢時皆以最大區間為出發點，例如上圖就會是從<code>1~8</code>這個區間開始，如果要查詢的區間是<code>2~7</code>。因為<code>1~8</code>這個區間並沒有完全包含<code>2~7</code>，因此需要往下遞迴，分成<code>1~4</code>和<code>5~8</code>再次查詢。</p>
<p>接著，因為<code>1~4</code>和<code>5~8</code>仍然沒有完全被<code>2~7</code>包含，因此要再次遞迴，這次是分解成<code>1~2</code>,<code>3~4</code>,<code>5~6</code>以及<code>7~8</code>。</p>
<p>這次<code>3~4</code>和<code>5~6</code>都有被完全包含，因此可以直接回傳這個區間的值。而<code>1~2</code>和<code>7~8</code>還是沒有。所以這兩個區間還要再次向下查詢。</p>
<p>查詢時最重要的是，若區間完全被包含就直接回傳，若完全沒被包含就不往那邊搜尋，否則再將區間分成兩塊向下遞迴。</p>
<h2 id="實作-1"><a href="#實作-1" class="headerlink" title="實作"></a>實作</h2><p>可以發現他是一顆二元樹，於是我們有兩種做法：指標型與陣列型。以下實作以區間總和為範例。</p>
<h3 id="指標型"><a href="#指標型" class="headerlink" title="指標型"></a>指標型</h3><p>請詳讀程式碼，我盡可能詳細註解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="comment">//value</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左右子樹的指標</span></span><br><span class="line">    node *rch,*lch;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//建構式</span></span><br><span class="line">    <span class="built_in">node</span>()&#123;</span><br><span class="line">        val=<span class="number">0</span>;</span><br><span class="line">        rch=lch=<span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//帶有初始值的建構式</span></span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> v)&#123;</span><br><span class="line">        val=v;</span><br><span class="line">        rch=lch=<span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//當左右子樹改變時，應重新計算父節點的值</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//歸零</span></span><br><span class="line">        val=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//必須先有左右子樹才能拜訪</span></span><br><span class="line">        <span class="comment">//if(l) 相當於 if(l!=nullptr)</span></span><br><span class="line">        <span class="keyword">if</span>(lch) val+=lch-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>(rch) val+=rch-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//單點修改</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> v,<span class="type">int</span> lb=<span class="number">1</span>,<span class="type">int</span> rb=n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//終止條件：區間長度為1</span></span><br><span class="line">        <span class="keyword">if</span>(lb==rb)&#123;</span><br><span class="line">            val=v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若左右子樹沒有結點則開一個新的</span></span><br><span class="line">        <span class="keyword">if</span>(!lch) lch=<span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line">        <span class="keyword">if</span>(!rch) rch=<span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//設mid為區間中點，均分為左右區間</span></span><br><span class="line">        <span class="comment">//&gt;&gt;1相當於/2，但快很多</span></span><br><span class="line">        <span class="type">int</span> mid=lb+rb&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左邊走左，右邊走右</span></span><br><span class="line">        <span class="keyword">if</span>(p&lt;=mid) lch-&gt;<span class="built_in">modify</span>(p,v, lb ,mid);</span><br><span class="line">        <span class="keyword">if</span>(mid&lt;p)  rch-&gt;<span class="built_in">modify</span>(p,v,mid+<span class="number">1</span>,rb);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//還記得子樹修改完要做什麼？</span></span><br><span class="line">        <span class="built_in">pull</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> lb=<span class="number">1</span>,<span class="type">int</span> rb=n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//終止條件：所在區間位於欲查詢區間之中</span></span><br><span class="line">        <span class="keyword">if</span>(l&lt;=lb &amp;&amp; rb&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//同modify</span></span><br><span class="line">        <span class="type">int</span> mid=lb+rb&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左右遞迴求解</span></span><br><span class="line">        <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//若左右區間不在要查詢的區間或是沒有左右子樹則不遞迴</span></span><br><span class="line">        <span class="keyword">if</span>(lch &amp;&amp; l&lt;=mid) ret+=lch-&gt;<span class="built_in">query</span>(l,r, lb ,mid);</span><br><span class="line">        <span class="keyword">if</span>(rch &amp;&amp; mid&lt;r)  ret+=rch-&gt;<span class="built_in">query</span>(l,r,mid+<span class="number">1</span>,rb);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//為求保險，以及供以後懶人標記使用</span></span><br><span class="line">        <span class="built_in">pull</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">node *rt=<span class="keyword">new</span> <span class="built_in">node</span>();<span class="comment">//root</span></span><br></pre></td></tr></table></figure>

<h3 id="陣列型"><a href="#陣列型" class="headerlink" title="陣列型"></a>陣列型</h3><blockquote>
<p>設根節點idx為1，在完滿二元樹中，左子樹就會是\(idx \times 2\)，右子樹就是\(idx \times 2+1\)。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="comment">//陣列seg的大小建議是N*4，否則你要先知道大於N的最小2^k值</span></span><br><span class="line"><span class="comment">// 131072 -&gt; 262144 所以其實開 262200 就可以了</span></span><br><span class="line"><span class="type">int</span> seg[N*<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> n,MXN=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不同於指標型的是：陣列行要預建構</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> lb=<span class="number">1</span>,<span class="type">int</span> rb=MXN,<span class="type">int</span> idx=<span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//終止條件：區間長度為1</span></span><br><span class="line">    <span class="keyword">if</span>(lb==rb) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//設mid為區間中點，均分為左右區間</span></span><br><span class="line">    <span class="comment">//&gt;&gt;1相當於/2，但稍快</span></span><br><span class="line">    <span class="type">int</span> mid=lb+rb&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//idx*2   為左子樹</span></span><br><span class="line">    <span class="comment">//idx*2+1 為右子樹</span></span><br><span class="line">    <span class="built_in">build</span>(lb,mid,idx*<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,rb,idx*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    seg[idx]=seg[idx*<span class="number">2</span>]+seg[idx*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//為了讓他長度為2^k</span></span><br><span class="line">    <span class="keyword">while</span>(MXN&lt;n) MXN&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//歸零</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=MXN+<span class="number">1</span>;i&lt;MXN*<span class="number">2</span>;i++) seg[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//以陣列的內容對其初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) seg[MXN+i<span class="number">-1</span>]=a[i];</span><br><span class="line">    <span class="comment">//將所有節點都建構好</span></span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="comment">//此部分也與指標型不同，陣列可以直接依據座標修改</span></span><br><span class="line">    x=x+MXN<span class="number">-1</span>;</span><br><span class="line">    seg[x]=k;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//向上更新節點</span></span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        seg[x]=seg[x*<span class="number">2</span>]+seg[x*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> lb=<span class="number">1</span>,<span class="type">int</span> rb=MXN,<span class="type">int</span> idx=<span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//終止條件：所在區間位於欲查詢區間之中</span></span><br><span class="line">    <span class="keyword">if</span>(l&lt;=lb &amp;&amp; rb&lt;=r) <span class="keyword">return</span> seg[idx];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//設mid為區間中點，均分為左右區間</span></span><br><span class="line">    <span class="comment">//&gt;&gt;1相當於/2，但稍快</span></span><br><span class="line">    <span class="type">int</span> mid=lb+rb&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左右遞迴求解</span></span><br><span class="line">    <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//若左右區間不在要查詢的區間或是沒有左右子樹則不遞迴</span></span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)   ret+=<span class="built_in">query</span>(l,r, lb ,mid,idx*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;=mid+<span class="number">1</span>) ret+=<span class="built_in">query</span>(l,r,mid+<span class="number">1</span>,rb,idx*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="comment">//一定要記得init()</span></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="懶人標記"><a href="#懶人標記" class="headerlink" title="懶人標記"></a>懶人標記</h2><p>以上的實作方法都只能用於單點修改，而若需要區間加值的話則會很費時，因此有人想到一個方法：若要修改的區間剛好完全包含線段樹上的某個區間的話，就可以先在上面打一個標記。等到需要動到他下面的子區間再向下放。這樣的話區間加值也可以從 \(O(nlog(n))\) 進步到 \(O(log(n))\) 。</p>
<h3 id="實作-2"><a href="#實作-2" class="headerlink" title="實作"></a>實作</h3><h4 id="指標型-1"><a href="#指標型-1" class="headerlink" title="指標型"></a>指標型</h4><p>請詳讀程式碼，我盡可能詳細註解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="comment">//value tag</span></span><br><span class="line">    <span class="type">int</span> val,tag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左右子樹的指標</span></span><br><span class="line">    node *rch,*lch;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//建構式</span></span><br><span class="line">    <span class="built_in">node</span>()&#123;</span><br><span class="line">        val=tag=<span class="number">0</span>;</span><br><span class="line">        rch=lch=<span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//帶有初始值的建構式</span></span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> v)&#123;</span><br><span class="line">        val=v, tag=<span class="number">0</span>;</span><br><span class="line">        rch=lch=<span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多了一個push()，將標記下放</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="comment">//&gt;&gt;運算會在+-之後</span></span><br><span class="line">        <span class="type">int</span> len=r-l+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(lch)&#123;</span><br><span class="line">            lch-&gt;val+=tag*len;</span><br><span class="line">            lch-&gt;tag+=tag;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(rch)&#123;</span><br><span class="line">            rch-&gt;val+=tag*len;</span><br><span class="line">            rch-&gt;tag+=tag;</span><br><span class="line">        &#125;</span><br><span class="line">        tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//當左右子樹改變時，應重新計算父節點的值</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//歸零</span></span><br><span class="line">        val=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//必須先有左右子樹才能拜訪</span></span><br><span class="line">        <span class="comment">//if(l) 相當於 if(l!=nullptr)</span></span><br><span class="line">        <span class="keyword">if</span>(lch) val+=lch-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>(rch) val+=rch-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//單點修改</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> v,<span class="type">int</span> lb=<span class="number">1</span>,<span class="type">int</span> rb=n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//終止條件：區間長度為1</span></span><br><span class="line">        <span class="keyword">if</span>(lb==rb)&#123;</span><br><span class="line">            val=v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若左右子樹沒有結點則開一個新的</span></span><br><span class="line">        <span class="keyword">if</span>(!lch) lch=<span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line">        <span class="keyword">if</span>(!rch) rch=<span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在遞迴之前先下放標記</span></span><br><span class="line">        <span class="built_in">push</span>(lb,rb);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//設mid為區間中點，均分為左右區間</span></span><br><span class="line">        <span class="comment">//&gt;&gt;1相當於/2，但快很多</span></span><br><span class="line">        <span class="type">int</span> mid=lb+rb&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左邊走左，右邊走右</span></span><br><span class="line">        <span class="keyword">if</span>(p&lt;=mid) lch-&gt;<span class="built_in">modify</span>(p,v, lb ,mid);</span><br><span class="line">        <span class="keyword">if</span>(mid&lt;p)  rch-&gt;<span class="built_in">modify</span>(p,v,mid+<span class="number">1</span>,rb);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//還記得子樹修改完要做什麼？</span></span><br><span class="line">        <span class="built_in">pull</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> lb=<span class="number">1</span>,<span class="type">int</span> rb=n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//終止條件：所在區間位於欲查詢區間之中</span></span><br><span class="line">        <span class="keyword">if</span>(l&lt;=lb &amp;&amp; rb&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在遞迴之前先下放標記</span></span><br><span class="line">        <span class="built_in">push</span>(lb,rb);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//同modify</span></span><br><span class="line">        <span class="type">int</span> mid=lb+rb&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左右遞迴求解</span></span><br><span class="line">        <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//若左右區間不在要查詢的區間或是沒有左右子樹則不遞迴</span></span><br><span class="line">        <span class="keyword">if</span>(lch &amp;&amp; l&lt;=mid) ret+=lch-&gt;<span class="built_in">query</span>(l,r, lb ,mid);</span><br><span class="line">        <span class="keyword">if</span>(rch &amp;&amp; mid&lt;r)  ret+=rch-&gt;<span class="built_in">query</span>(l,r,mid+<span class="number">1</span>,rb);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">pull</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//多了一個函式，區間加值</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v,<span class="type">int</span> lb=<span class="number">1</span>,<span class="type">int</span> rb=n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//終止條件：所在區間位於欲查詢區間之中</span></span><br><span class="line">        <span class="keyword">if</span>(l&lt;=lb &amp;&amp; rb&lt;=r)&#123;</span><br><span class="line">            <span class="comment">//由於區間為閉區間[lb,rb]因此要加1</span></span><br><span class="line">            val+=v*(rb-lb+<span class="number">1</span>);</span><br><span class="line">            tag+=v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在遞迴之前先下放標記</span></span><br><span class="line">        <span class="built_in">push</span>(lb,rb);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//同modify</span></span><br><span class="line">        <span class="type">int</span> mid=lb+rb&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左右遞迴求解</span></span><br><span class="line">        <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//若左右區間不在要查詢的區間或是沒有左右子樹則不遞迴</span></span><br><span class="line">        <span class="keyword">if</span>(lch &amp;&amp; l&lt;=mid) lch-&gt;<span class="built_in">add</span>(l,r,v, lb ,mid);</span><br><span class="line">        <span class="keyword">if</span>(rch &amp;&amp; mid&lt;r)  rch-&gt;<span class="built_in">add</span>(l,r,v,mid+<span class="number">1</span>,rb);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改完不要更新節點</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">node rt;<span class="comment">//root</span></span><br></pre></td></tr></table></figure>

<h2 id="習題-1"><a href="#習題-1" class="headerlink" title="習題"></a>習題</h2><h3 id="Segment-Tree-練習-ZJe409"><a href="#Segment-Tree-練習-ZJe409" class="headerlink" title="Segment Tree 練習(ZJe409)"></a><a href="https://zerojudge.tw/ShowProblem?problemid=e409">Segment Tree 練習(ZJe409)</a></h3><h4 id="題目概述"><a href="#題目概述" class="headerlink" title="題目概述 :"></a>題目概述 :</h4><p>將 \(A[x]\)的值更新為 \(y\)<br>要查詢 \(A[X]\)~\(A[Y]\) 之中最大值\(maxA\)及最小值\(minA\)的差</p>
<h4 id="輸入說明-3"><a href="#輸入說明-3" class="headerlink" title="輸入說明 :"></a>輸入說明 :</h4><p>第1列有兩個正整數 \(k\) \(m\) ，第2列有 \(k\) 個正整數, 請讀入放至 \(A[1..k]\)<br>接著讀入第3列的 \(N\) \(Q\) 兩個正整數，呼叫所附的產生測資程式 <code>gen_dat()</code><br>以上 \(5&lt;k \leq n, 5&lt;m&lt;1000\)<br>然後就是解題，依\(C,X,Y\)陣列的值 執行更新或查詢</p>
<h4 id="輸出說明-3"><a href="#輸出說明-3" class="headerlink" title="輸出說明 :"></a>輸出說明 :</h4><p>若為調查，則輸出區域中的元素總和，若為修改，則不必輸出</p>
<h4 id="範例輸入-1-3"><a href="#範例輸入-1-3" class="headerlink" title="範例輸入 1 :"></a>範例輸入 1 :</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 541</span><br><span class="line">12 34 56 78 91 23 45 67 89 111</span><br><span class="line">25 15</span><br></pre></td></tr></table></figure>
<h4 id="範例輸出-1-3"><a href="#範例輸出-1-3" class="headerlink" title="範例輸出 1 :"></a>範例輸出 1 :</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">328</span><br><span class="line">68</span><br><span class="line">406</span><br><span class="line">0</span><br><span class="line">79</span><br><span class="line">251</span><br><span class="line">327</span><br><span class="line">489</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="戰術資料庫-110宜中資訊社校內賽pF"><a href="#戰術資料庫-110宜中資訊社校內賽pF" class="headerlink" title="戰術資料庫(110宜中資訊社校內賽pF)"></a><a href="https://zerojudge.tw/ShowProblem?problemid=g625">戰術資料庫(110宜中資訊社校內賽pF)</a></h3><h4 id="題目敘述-3"><a href="#題目敘述-3" class="headerlink" title="題目敘述 :"></a>題目敘述 :</h4><p>要求能在一個陣列中做以下操作</p>
<ol>
<li>搜尋區間和 \(find sum\) \((l)\) \((r)\)</li>
<li>搜尋區間最大和最小值 \(find\) \(max&#x2F;min (l)\) \((r)\)</li>
<li>單點加減值 \(plus&#x2F;minus\) \((position)\) \((k)\)</li>
</ol>
<h4 id="輸入說明-4"><a href="#輸入說明-4" class="headerlink" title="輸入說明 :"></a>輸入說明 :</h4><p>輸入第一行有一個數字 n, q ，下一行有 n 個數字，緊接著有 q 筆操作，可能為以下五種</p>
<ol>
<li>搜尋區間和</li>
<li>搜尋區間最大和最小值</li>
<li>單點加減值</li>
</ol>
<p>相鄰數字間以空白隔開。<br>\(n, q \leq 100000 , a[i] \leq 100000\)</p>
<h4 id="輸出說明-4"><a href="#輸出說明-4" class="headerlink" title="輸出說明 :"></a>輸出說明 :</h4><p>對於每個搜尋指令做出回答</p>
<h4 id="範例輸入-1-4"><a href="#範例輸入-1-4" class="headerlink" title="範例輸入 1 :"></a>範例輸入 1 :</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7 10</span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">find max 2 5</span><br><span class="line">find min 1 4</span><br><span class="line">minus 3 1</span><br><span class="line">plus 2 4</span><br><span class="line">find sum 1 7</span><br><span class="line">plus 7 -3</span><br><span class="line">find sum 1 3</span><br><span class="line">minus 6 0</span><br><span class="line">plus 1 1</span><br><span class="line">find max 1 7</span><br></pre></td></tr></table></figure>
<h4 id="範例輸出-1-4"><a href="#範例輸出-1-4" class="headerlink" title="範例輸出 1 :"></a>範例輸出 1 :</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1</span><br><span class="line">31</span><br><span class="line">9</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>2022&#x2F;1&#x2F;10</strong></p>
</blockquote>
<h1 id="樹堆-Treap"><a href="#樹堆-Treap" class="headerlink" title="樹堆(Treap)"></a>樹堆(Treap)</h1><p>Treap 是一個隨機平衡的二元搜尋樹，這裡所說的 Treap 是以 merge&#x2F;split 的方式實作的，這樣實作的 Treap 有很多好處，我們先說明他的基本規則，以及 merge&#x2F;split 函式(function)在做什麼，結著說明如何實作。</p>
<p>樹堆的名稱來由是 樹(Tree) 和 堆積(Heap) 結合而成，每個節點會至少存放兩個數值 val,pri ， val (也有人叫他 key)就是內容，而 pri 則是用以平衡。</p>
<h2 id="規則與前置作業"><a href="#規則與前置作業" class="headerlink" title="規則與前置作業"></a>規則與前置作業</h2><ul>
<li>所有節點的 pri 值必須比他的左右子樹小(大也可以)</li>
<li>樹上的 val 滿足 \(“二元搜尋樹”\) 的性質</li>
</ul>
<p>為了避免有人忘記什麼是 \(“二元搜尋樹”\) 的性質，以下用一個我出過的題目說明。</p>
<h3 id="Safe-Sorter"><a href="#Safe-Sorter" class="headerlink" title="Safe Sorter"></a>Safe Sorter</h3><img src="https://live.staticflickr.com/65535/51821755725_f3cbcbed1f_o.png" width="714" height="579" alt="pic">

<ul>
<li>如果該節點還沒有任何保險箱，此保險箱就會佔據該節點</li>
<li>否則若這個要放入的保險箱裡面的金塊比在該節點的保險箱還要多，他會被往右邊送</li>
<li>否則就往左邊送</li>
<li>必須送到他占用一個節點為止</li>
</ul>
<p>以上圖為例</p>
<ul>
<li>第一個放進來的保險箱有 8 個金塊</li>
<li>第二個有 10 個，因此他被放在右邊</li>
<li>第三個有 14 個，因此第一步會先往右送，發現右邊的節點也有保險箱了，因而再次被往右送</li>
<li>第四個有 3 個，於是被放在左邊</li>
<li>其他依此類推</li>
</ul>
<p>而所謂隨機平衡就是他的平衡方式來自所有節點被賦予的一個隨機的 pri 值。</p>
<hr>
<p>Treap 當中最重要的就是以下兩種操作</p>
<ul>
<li>merge(a,b) : 將兩顆樹 a, b 合併。前提 : a, b 滿足所有在 a 裡面的節點所存放的值皆小於所有在 b 裡面的節點</li>
<li>split(a,b,p) : 將一棵樹分成 a, b 並同時滿足 a 中的值皆小於等於 \((\le)\) p ， 而 b 中的值皆大於 \((&gt;)\) p</li>
</ul>
<p>兩者詳細步驟是依照遞迴定義的，如下。</p>
<h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><ul>
<li>如果 a,b 至少其中一個是空指標，回傳非空的那一個 (兩個都空救回傳空指標)</li>
<li>否則為了同時維持 BST 和 heap 的性質，我們先判斷哪一個的 pri(priority) 值更大，我的實作是將 pri 值小的放上面 (較接近樹根的位置)</li>
<li>如果 a 的 pri 值較小，我們會回傳 a 作為呼叫此函數的樹的根，不過在此之前，我們要先決定 a 的右子樹 (因為 b 也還沒被合併完) ，所以要向下遞迴</li>
<li>b 的情況剛好相反，因為 b 裡面的值都大於 a 裡面的值</li>
</ul>
<h4 id="實作-3"><a href="#實作-3" class="headerlink" title="實作"></a>實作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">node *<span class="title">merge</span><span class="params">(node *a,node *b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a || !b) <span class="keyword">return</span> a ? a : b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(a-&gt;pri &lt; b-&gt;pri)&#123;</span><br><span class="line">        a-&gt;rch=<span class="built_in">merge</span>(a-&gt;rch,b);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        b-&gt;lch=<span class="built_in">merge</span>(a,b-&gt;lch);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Split"><a href="#Split" class="headerlink" title="Split"></a>Split</h3><p>split 較為複雜，因為同時要滿足 Treap 的兩種性質</p>
<ul>
<li>若 T(要被分割的 Treap) 為空指標的話，代表整棵樹都被分完了，因此將 a,b 都設為空指標。</li>
<li>否則一樣要分成兩個條件 : T 的根結點的值小於等於 p ，和大於 p</li>
<li>如果 T 的根結點的值小於等於 p ，選擇將 T 的根結點與他的左子樹給 a 並繼續向下分解 T 的右子樹給 a 的右子樹與 b</li>
<li>否則將 T 的根結點與他的右子樹給 b 並繼續向下分解 T 的左子樹給 b 的左子樹與 a</li>
</ul>
<h4 id="實作-4"><a href="#實作-4" class="headerlink" title="實作"></a>實作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(node *T,node *&amp;a,node *&amp;b,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T)&#123;</span><br><span class="line">        a=b=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(T-&gt;key &lt;= p)&#123;</span><br><span class="line">        a=T;</span><br><span class="line">        <span class="built_in">split</span>(T-&gt;rch,a-&gt;rch,b,p);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        b=T;</span><br><span class="line">        <span class="built_in">split</span>(T-&gt;lch,a,b-&gt;lch,p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="名次樹"><a href="#名次樹" class="headerlink" title="名次樹"></a>名次樹</h3><p>首先介紹一下名次樹，名次樹是透過在節點內多存一個數值 \(\to\) 子樹大小(size)，以實現更多功能，例如 : k 在這棵樹裡面排第幾，刪除比 k 大的第一個數，還有排名第 k 的樹為何等。</p>
<p>為了在 Treap 中實現這個功能，我們要多實作兩個函數 \(\to\) pull &amp; SplitBySize(splitSz)。</p>
<p>首先，我先將節點完整的 struct ，還有尋找某個指標底下的樹的 size 的函式寫出來，方便後續講解。順帶一題，為了維持名次樹的正確性，每次只要樹有經過更動就要 執行 pull 。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="comment">// key 是排序依據</span></span><br><span class="line">    <span class="comment">// pri 是 heap 的依據</span></span><br><span class="line">    <span class="type">int</span> key,pri,sz;</span><br><span class="line">    node *lch,*rch;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> _key)&#123;</span><br><span class="line">        key=_key;</span><br><span class="line">        sz=<span class="number">1</span>;</span><br><span class="line">        lch=rch=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// RandomInt() 之後會實作</span></span><br><span class="line">        pri=<span class="built_in">RandomInt</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 自己也算</span></span><br><span class="line">        sz=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 判斷式相當於 lch!=nullptr</span></span><br><span class="line">        <span class="comment">// 要加上左右子樹的大小才是完整的</span></span><br><span class="line">        <span class="keyword">if</span>(lch) sz+=lch-&gt;sz;</span><br><span class="line">        <span class="keyword">if</span>(rch) sz+=rch-&gt;sz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fs</span><span class="params">(node *a)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 如果 a 為空指標則 sz(回傳值) 為 0</span></span><br><span class="line">    <span class="keyword">return</span> a ? a-&gt;sz : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SplitBySize"><a href="#SplitBySize" class="headerlink" title="SplitBySize"></a>SplitBySize</h3><p>這個函式會與 Split 有點像，差別在於分開的依據不同， SplitBySize 會將整棵樹分為 a, b ， 其中 a 存有前 s 小的所有數， b 則存剩下的。詳細步驟如下。</p>
<ul>
<li>與 Split 相同，若 T 為空則表示分完，將 a,b 都設為空指標</li>
<li>否則如果 T 的左子樹的元素個數不到 s ，將 T 和他的左子樹都給 a ，然後繼續從 T 的右子樹當中切出 s-( T 的左子樹大小)-1( T 自己) 個元素給 a 的右子樹</li>
<li>否則將 T 和他的右子樹都給 b ，然後從 T 的左子樹當中切出 s 個元素給 a</li>
</ul>
<h4 id="實作-5"><a href="#實作-5" class="headerlink" title="實作"></a>實作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">splitSz</span><span class="params">(node *T,node *&amp;a,node *&amp;b,<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T)&#123;</span><br><span class="line">        a=b=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fs</span>(T-&gt;lch)&lt;s)&#123;</span><br><span class="line">        a=T;</span><br><span class="line">        <span class="built_in">splitSz</span>(T-&gt;rch,a-&gt;rch,b,s-<span class="built_in">fs</span>(T-&gt;lch)<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// 普通的 Split 中放 pull 的位置與他相同</span></span><br><span class="line">        a-&gt;<span class="built_in">pull</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        b=T;</span><br><span class="line">        <span class="built_in">splitSz</span>(T-&gt;lch,a,b-&gt;lch,s);</span><br><span class="line">        b-&gt;<span class="built_in">pull</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="隨機數"><a href="#隨機數" class="headerlink" title="隨機數"></a>隨機數</h3><p>C++ 本身就有內建隨機函式可供取用。就直接放在下面供大家參考。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 簡單作法，但可能被 hack</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;crand&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RandomInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">rand</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 較長，但較不易被破解</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> seed=chrono::<span class="built_in">steady_clock</span>().<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line"><span class="function">mt19937 <span class="title">rng</span><span class="params">(seed)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RandomInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">rng</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p>有了這些函式之後，後面的大多數操作都會變很簡單，舉凡插入(insert)，刪除(erase)，尋找(find) 等等。因為他們都可以用 merge and split 湊出來。而且很多功能甚至不只有一種實作方法。讓我們看下去。</p>
<h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p>insert 可以被簡單地分成幾個步驟。假設我要插入的數字為 v 。</p>
<ul>
<li>將整棵樹(我都存在 rt 指標中) 切成小於等於 v 和大於 v 的兩棵樹 rt, b</li>
<li>另外用 v new 一個節點 a(v) 出來 (不會動態記憶體分配的可以先去複習一下)。</li>
<li>合併 rt 和 a ，並將合併後的樹給 rt </li>
<li>合並 rt 和 b ，並將合併後的樹給 rt</li>
</ul>
<h4 id="實作-6"><a href="#實作-6" class="headerlink" title="實作"></a>實作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    node *a=<span class="keyword">new</span> <span class="built_in">node</span>(v),*b;</span><br><span class="line">    <span class="built_in">split</span>(rt,rt,b,v);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,a);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Erase"><a href="#Erase" class="headerlink" title="Erase"></a>Erase</h3><p>Erase 一樣可以被簡單地分成幾個步驟。假設我要刪除的數字為 v 。</p>
<h4 id="1-刪除所有等於-v-的數-整數才可以"><a href="#1-刪除所有等於-v-的數-整數才可以" class="headerlink" title="1. 刪除所有等於 v 的數(整數才可以)"></a>1. 刪除所有等於 v 的數(整數才可以)</h4><ul>
<li>將整棵樹(我都存在 rt 指標中) 切成小於等於 v 和大於 v 的兩棵樹 rt, b</li>
<li>再將 rt 指向的樹切成小於等於 v-1 和大於 v-1 的兩棵樹 rt, a</li>
<li>刪除 a 整棵樹 </li>
<li>合併 rt 和 b ，並將合併後的樹給 rt</li>
</ul>
<h4 id="2-刪除一個等於-v-的數-整數才可以"><a href="#2-刪除一個等於-v-的數-整數才可以" class="headerlink" title="2. 刪除一個等於 v 的數(整數才可以)"></a>2. 刪除一個等於 v 的數(整數才可以)</h4><ul>
<li>將整棵樹(我都存在 rt 指標中) 切成小於等於 v-1 和大於 v-1 的兩棵樹 rt, b</li>
<li>再將 b 指向的樹切成左邊一個元素，剩下都放右邊的 b, a </li>
<li>刪除 b </li>
<li>合併 rt 和 b ，並將合併後的樹給 rt</li>
</ul>
<h4 id="實作-7"><a href="#實作-7" class="headerlink" title="實作"></a>實作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 這個函式是先刪除左右子樹，再刪除自己，並透過遞迴來刪掉整棵樹。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_tree</span><span class="params">(node *n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n-&gt;lch) <span class="built_in">delete_tree</span>(n-&gt;lch);</span><br><span class="line">    <span class="keyword">if</span>(n-&gt;rch) <span class="built_in">delete_tree</span>(n-&gt;rch);</span><br><span class="line">    <span class="built_in">delete</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// erase all element between (v-1~v] -&gt; 對應 1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    node *a,*b;</span><br><span class="line">    <span class="built_in">split</span>(rt,rt,b,v);</span><br><span class="line">    <span class="built_in">split</span>(rt,rt,a,v<span class="number">-1</span>);<span class="comment">// or v-eps</span></span><br><span class="line">    <span class="comment">// it&#x27;s better to use delete_tree function</span></span><br><span class="line">    <span class="built_in">delete</span>(a);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// erase one element between (v-1~v] -&gt; 對應 2</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    node *a,*b;</span><br><span class="line">    <span class="built_in">split</span>(rt,rt,b,v<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">splitSz</span>(b,b,a,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">delete</span>(b);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h3><p>Count 還是可以被簡單地分成幾個步驟。假設我要數的數字為 v 。</p>
<ul>
<li>將整棵樹(我都存在 rt 指標中) 切成小於等於 v 和大於 v 的兩棵樹 rt, b</li>
<li>再將 rt 指向的樹切成小於等於 v-1 和大於 v-1 的兩棵樹 rt, a</li>
<li>用一個變數將 a 的 size 存起來</li>
<li>合併 rt 和 a ，並將合併後的樹給 rt </li>
<li>合併 rt 和 b ，並將合併後的樹給 rt</li>
</ul>
<h4 id="實作-8"><a href="#實作-8" class="headerlink" title="實作"></a>實作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    node *a,*b;</span><br><span class="line">    <span class="built_in">split</span>(rt,rt,b,v);</span><br><span class="line">    <span class="built_in">split</span>(rt,rt,a,v<span class="number">-1</span>);<span class="comment">// or v-eps</span></span><br><span class="line">    <span class="type">int</span> ret=<span class="built_in">fs</span>(a);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,a);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,b);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Kth-Small-Element"><a href="#Kth-Small-Element" class="headerlink" title="Kth Small Element"></a>Kth Small Element</h3><p>假設我要找第 p 小的數字。</p>
<ul>
<li>將整棵樹(我都存在 rt 指標中) 切成左邊 p 個元素，剩下都放右邊的 rt, b </li>
<li>再將 rt 指向的樹切成左邊 p-1 個元素，剩下都放右邊的 rt, a </li>
<li>用一個變數將 a 的值存起來</li>
<li>合併 rt 和 a ，並將合併後的樹給 rt </li>
<li>合併 rt 和 b ，並將合併後的樹給 rt</li>
</ul>
<h4 id="實作-9"><a href="#實作-9" class="headerlink" title="實作"></a>實作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    node *a,*b;</span><br><span class="line">    <span class="built_in">splitSz</span>(rt,rt,b,p);</span><br><span class="line">    <span class="built_in">splitSz</span>(rt,rt,a,p<span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> ret=a-&gt;key;</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,a);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,b);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>你以為只是平衡樹嗎？不不不，祂可厲害了</strong></p>
</blockquote>
<h2 id="進階功能"><a href="#進階功能" class="headerlink" title="進階功能"></a>進階功能</h2><p>如果我們將整棵樹的中序遍歷當成序列的順序的話(如下圖)，我們可以實現需多更強大的功能。可以說，線段樹能做到的事 Treap 都可以做到，但 Treap 甚至可以做到許多線段樹做不到的事。</p>
<img src="https://live.staticflickr.com/65535/51903502674_6ba5e3979e_o.png" width="769" height="722" alt="Treap">

<p>而且，此時我們可以把 key 拔掉。然後只使用 splitSz 和 merge 。</p>
<h3 id="Insert-1"><a href="#Insert-1" class="headerlink" title="Insert"></a>Insert</h3><p>假設我希望插入的數字位於第 p 個，且值為 v 。</p>
<ul>
<li>將整棵樹(我都存在 rt 指標中) 切 p-1 個給 rt ，其他剩下的分給 b </li>
<li>另外用 v new 一個節點 a(v) 出來</li>
<li>合併 rt 和 a ，並將合併後的樹給 rt </li>
<li>合並 rt 和 b ，並將合併後的樹給 rt</li>
</ul>
<h4 id="實作-10"><a href="#實作-10" class="headerlink" title="實作"></a>實作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    node *a=<span class="keyword">new</span> <span class="built_in">node</span>(v),*b;</span><br><span class="line">    <span class="built_in">splitSz</span>(rt,rt,b,p<span class="number">-1</span>);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,a);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Erase-1"><a href="#Erase-1" class="headerlink" title="Erase"></a>Erase</h3><p>假設我要刪除第 p 個數 </p>
<ul>
<li>將整棵樹(我都存在 rt 指標中) 切 p-1 個給 rt ，其他給 b</li>
<li>再將 b 指向的樹切一個給 b 剩下給 a</li>
<li>刪除 a </li>
<li>合併 rt 和 b ，並將合併後的樹給 rt</li>
</ul>
<h4 id="實作-11"><a href="#實作-11" class="headerlink" title="實作"></a>實作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    node *a,*b;</span><br><span class="line">    <span class="built_in">splitSz</span>(rt,rt,b,p<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">splitSz</span>(b,b,a,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">delete</span>(b);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="區間操作"><a href="#區間操作" class="headerlink" title="區間操作"></a>區間操作</h3><p>在介紹區間操作之前，我們還需要在節點上加入更多的資訊和函式，所以 node 裡面會有更多程式碼。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Treap&#123;</span><br><span class="line">    <span class="keyword">struct</span> node&#123;</span><br><span class="line">        <span class="comment">// 此節點的值</span></span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        <span class="comment">// 維持 Treap 的性質</span></span><br><span class="line">        <span class="type">int</span> pri,sz;</span><br><span class="line">        <span class="comment">// 用在區間查詢</span></span><br><span class="line">        <span class="type">int</span> sum,mx,mn;</span><br><span class="line">        <span class="comment">// 可以支援區間反轉</span></span><br><span class="line">        <span class="type">bool</span> rev_tag;</span><br><span class="line">        <span class="comment">// 可以支援區間加值</span></span><br><span class="line">        <span class="type">int</span> add_tag;</span><br><span class="line">        <span class="comment">// 左右子樹</span></span><br><span class="line">        node *lch,*rch;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">node</span>(<span class="type">int</span> _val)&#123;</span><br><span class="line">            val=sum=mx=mn=_val;</span><br><span class="line">            lch=rch=<span class="literal">nullptr</span>;</span><br><span class="line">            sz=<span class="number">1</span>;</span><br><span class="line">            pri=<span class="built_in">rng</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">()</span></span>&#123;</span><br><span class="line">            sz=<span class="number">1</span>;</span><br><span class="line">            sum=mx=mn=val;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(lch)&#123;</span><br><span class="line">                sz+=lch-&gt;sz;</span><br><span class="line">                sum+=lch-&gt;sum;</span><br><span class="line">                mx=<span class="built_in">max</span>(mx,lch-&gt;mx);</span><br><span class="line">                mn=<span class="built_in">min</span>(mn,lch-&gt;mn);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(rch)&#123;</span><br><span class="line">                sz+=rch-&gt;sz;</span><br><span class="line">                sum+=rch-&gt;sum;</span><br><span class="line">                mx=<span class="built_in">max</span>(mx,rch-&gt;mx);</span><br><span class="line">                mn=<span class="built_in">min</span>(mn,rch-&gt;mn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 讓他底下的區間都反轉</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">rev</span><span class="params">()</span></span>&#123;</span><br><span class="line">            rev_tag=!rev_tag;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 再更改節點前用</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(rev_tag)&#123;</span><br><span class="line">                <span class="built_in">swap</span>(lch,rch);</span><br><span class="line">                <span class="keyword">if</span>(lch)</span><br><span class="line">                    lch-&gt;tag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(rch)</span><br><span class="line">                    rch-&gt;tag=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(lch)</span><br><span class="line">                lch-&gt;add_tag+=add_tag;</span><br><span class="line">            <span class="keyword">if</span>(rch)</span><br><span class="line">                rch-&gt;add_tag+=add_tag;</span><br><span class="line">            add_tag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>同時，我們在原來的 merge&#x2F;split 操作程式碼中，都要加上 push ，具體位置如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Treap</span>&#123;</span><br><span class="line">    <span class="function">node *<span class="title">merge</span><span class="params">(node *a,node *b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!a || !b) <span class="keyword">return</span> a ? a : b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a-&gt;pri &lt; b-&gt;pri)&#123;</span><br><span class="line">            a-&gt;<span class="built_in">push</span>();</span><br><span class="line">            a-&gt;rch=<span class="built_in">merge</span>(a-&gt;rch,b);</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            b-&gt;<span class="built_in">push</span>();</span><br><span class="line">            b-&gt;lch=<span class="built_in">merge</span>(a,b-&gt;lch);</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">splitSz</span><span class="params">(node *T,node *&amp;a,node *&amp;b,<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!T)&#123;</span><br><span class="line">            a=b=<span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        T-&gt;<span class="built_in">push</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fs</span>(T-&gt;lch)&lt;s)&#123;</span><br><span class="line">            a=T;</span><br><span class="line">            <span class="built_in">splitSz</span>(T-&gt;rch,a-&gt;rch,b,s-<span class="built_in">fs</span>(T-&gt;lch)<span class="number">-1</span>);</span><br><span class="line">            a-&gt;<span class="built_in">pull</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            b=T;</span><br><span class="line">            <span class="built_in">splitSz</span>(T-&gt;lch,a,b-&gt;lch,s);</span><br><span class="line">            b-&gt;<span class="built_in">pull</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>接下來的操作都是把區間切下來，做完我要做的事，再接回去就可以了。</p>
<h3 id="區間查詢-極值、總和"><a href="#區間查詢-極值、總和" class="headerlink" title="區間查詢(極值、總和)"></a>區間查詢(極值、總和)</h3><p>假設現在要查詢 l~r 的區間</p>
<ul>
<li>從 rt 切下 r 個節點給 rt ，其它給 b </li>
<li>接著從 rt 切下 l-1 個節點給 rt ，其餘給 a</li>
<li>此時 a 就存有區間 \([ ; l, , r ; ]\) ，而他上面的 sum, mx, mn 就會是這個區間的總和、最大值，以及最小值</li>
<li>最後先按照順序把它合併，再回傳答案即可</li>
</ul>
<h4 id="實作-12"><a href="#實作-12" class="headerlink" title="實作"></a>實作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    node *a,*b;</span><br><span class="line">    <span class="built_in">splitSz</span>(rt,rt,b,r);</span><br><span class="line">    <span class="built_in">splitSz</span>(rt,rt,a,l<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">// 下一行放 sum, mx, mn 看需求</span></span><br><span class="line">    <span class="type">int</span> ret=a-&gt;sum;</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,a);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,b);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 單點查詢就用查詢長度為 1 的區間重復利用函式就可以了</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(p,p); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="單點修改"><a href="#單點修改" class="headerlink" title="單點修改"></a>單點修改</h3><p>先將所要修改的位置切下來，在修改完後記得要 push 。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    node *a,*b;</span><br><span class="line">    <span class="built_in">splitSz</span>(rt,rt,a,p<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">splitSz</span>(a,a,b,<span class="number">1</span>);</span><br><span class="line">    a-&gt;val=v;</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,a);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="區間操作-1"><a href="#區間操作-1" class="headerlink" title="區間操作"></a>區間操作</h3><p>假設現在要對 l~r 的區間進行操作</p>
<ul>
<li>從 rt 切下 r 個節點給 rt ，其它給 b </li>
<li>接著從 rt 切下 l-1 個節點給 rt ，其餘給 a</li>
<li>此時 a 就存有區間 \([ ; l, , r ; ]\) ，直接對他操作就可以了</li>
<li>最後先按照順序把它合併</li>
</ul>
<h4 id="實作-13"><a href="#實作-13" class="headerlink" title="實作"></a>實作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 區間反轉</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    node *a,*b;</span><br><span class="line">    <span class="built_in">splitSz</span>(rt,rt,b,r);</span><br><span class="line">    <span class="built_in">splitSz</span>(rt,rt,a,l<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(a) a-&gt;<span class="built_in">rev</span>();</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,a);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 區間加值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    node *a,*b;</span><br><span class="line">    <span class="built_in">splitSz</span>(rt,rt,b,r);</span><br><span class="line">    <span class="built_in">splitSz</span>(rt,rt,a,l<span class="number">-1</span>);</span><br><span class="line">    a-&gt;val+=v;</span><br><span class="line">    a-&gt;<span class="built_in">push</span>();</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,a);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="特殊功能"><a href="#特殊功能" class="headerlink" title="特殊功能"></a>特殊功能</h2><h3 id="Count-l-r"><a href="#Count-l-r" class="headerlink" title="Count \([ ; l, , r ; ]\)"></a>Count \([ ; l, , r ; ]\)</h3><p>在一棵作為二元搜尋樹的 Treap 中，計算介於 l 到 r 的元素數量</p>
<p>基本上就跟上面區間查詢相同。只是切割依據不同。</p>
<h4 id="實作-14"><a href="#實作-14" class="headerlink" title="實作"></a>實作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    node *a,*b;</span><br><span class="line">    <span class="built_in">split</span>(rt,rt,b,r);</span><br><span class="line">    <span class="built_in">split</span>(rt,rt,a,l<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">// 下一行依據要插尋的內容放 sz(數量) 或 sum(總和)</span></span><br><span class="line">    <span class="type">int</span> ret=a-&gt;sz;</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,a);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,b);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Sum-l-r-rank"><a href="#Sum-l-r-rank" class="headerlink" title="Sum \([ ; l, , r ; ]\) (rank)"></a>Sum \([ ; l, , r ; ]\) (rank)</h3><p>在一棵作為二元搜尋樹的 Treap 中，計算介於第 l 小到第 r 小的元素總和</p>
<p>同樣就跟上面區間查詢相同。只是元素排列方式不同。</p>
<h4 id="實作-15"><a href="#實作-15" class="headerlink" title="實作"></a>實作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    node *a,*b;</span><br><span class="line">    <span class="built_in">splitSz</span>(rt,rt,b,r);</span><br><span class="line">    <span class="built_in">splitSz</span>(rt,rt,a,l<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">// 下一行依據要插尋的內容放 sum(總和) 或 xor 值</span></span><br><span class="line">    <span class="type">int</span> ret=a-&gt;sum;</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,a);</span><br><span class="line">    rt=<span class="built_in">merge</span>(rt,b);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解構式"><a href="#解構式" class="headerlink" title="解構式"></a>解構式</h3><p>對於多筆測資，可能會需要釋放記憶體。由於 Treap 二元樹的特性，可以透過遞迴刪除整棵樹</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Treap</span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        node *lch,*rch;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    node *rt=<span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DeleteTree</span><span class="params">(node *n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n-&gt;lch) <span class="built_in">DeleteTree</span>(n-&gt;lch);</span><br><span class="line">        <span class="keyword">if</span>(n-&gt;rch) <span class="built_in">DeleteTree</span>(n-&gt;rch);</span><br><span class="line">        <span class="built_in">delete</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">Treap</span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>(rt) <span class="built_in">DeleteTree</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重載輸入輸出"><a href="#重載輸入輸出" class="headerlink" title="重載輸入輸出"></a>重載輸入輸出</h3><p>要前中後序都可以</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(node *n,ostream &amp;output)</span></span>&#123;</span><br><span class="line">    n-&gt;<span class="built_in">push</span>();</span><br><span class="line">    <span class="keyword">if</span>(n-&gt;lch) <span class="built_in">print</span>(n-&gt;lch,output);</span><br><span class="line">    <span class="comment">// 下面這一行放的位置會決定他是前中後序</span></span><br><span class="line">    output&lt;&lt;n-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(n-&gt;rch) <span class="built_in">print</span>(n-&gt;rch,output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;output,PowerfulArray &amp;a)&#123;</span><br><span class="line">    a.<span class="built_in">print</span>(a.rt,output);</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一些-STL-的常見函式"><a href="#一些-STL-的常見函式" class="headerlink" title="一些 STL 的常見函式"></a>一些 STL 的常見函式</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fs</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">size</span>()==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(num v)</span></span>&#123;</span><br><span class="line">    <span class="built_in">insert</span>(<span class="built_in">size</span>()+<span class="number">1</span>,v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_front</span><span class="params">(num v)</span></span>&#123;</span><br><span class="line">    <span class="built_in">insert</span>(<span class="number">1</span>,v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">erase</span>(<span class="built_in">size</span>()+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop_front</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">erase</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">int</span> sz)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">size</span>()&lt;sz)&#123;</span><br><span class="line">        <span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">size</span>()&gt;sz)&#123;</span><br><span class="line">        <span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">int</span> sz,num v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">size</span>()&lt;sz)&#123;</span><br><span class="line">        <span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">size</span>()&gt;sz)&#123;</span><br><span class="line">        <span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="建構式"><a href="#建構式" class="headerlink" title="建構式"></a>建構式</h3><p>有了上述的 STL 常見函式之後，就可以很方便的寫建構式了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Treap</span>()&#123; &#125;</span><br><span class="line"><span class="built_in">Treap</span>(<span class="type">int</span> sz)&#123;</span><br><span class="line">    <span class="built_in">resize</span>(sz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Treap</span>(<span class="type">int</span> sz,<span class="type">int</span> v)&#123;</span><br><span class="line">    <span class="built_in">resize</span>(sz,v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apcs</category>
        <category>apcspracticaltest</category>
      </categories>
      <tags>
        <tag>apcs</tag>
        <tag>APCS與競賽入門</tag>
      </tags>
  </entry>
  <entry>
    <title>一個非常暴力的常數優化</title>
    <url>/cppreview/optimize/</url>
    <content><![CDATA[<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML' async></script>

<p>就是下面這一行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize (<span class="string">&quot;O3,unroll-loops&quot;</span>)</span></span><br></pre></td></tr></table></figure>

<p>可以做到什麼效果呢？在某些情況下可以讓 \(O(n^2)\) 硬解 \(10^5\) 的測資。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) cin&gt;&gt;a[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q;++i)&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=l;j&lt;r;++j)&#123;</span><br><span class="line">        ret+=a[j];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ret&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原本要用前綴和，變爆搜就會過。</p>
]]></content>
      <categories>
        <category>cppreview</category>
      </categories>
      <tags>
        <tag>review</tag>
      </tags>
  </entry>
  <entry>
    <title>(Update) Offline Judge 離線程式評測系統</title>
    <url>/misc/offline-judge-system-operating-update/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當初我同學有在架設我們學校的線上評測系統，而一開始我們的系統非常不穩定，因此，他想到可以寫離線的程式答題系統緩解我們上課的需求。而我看到這個系統，我覺得這是一個不錯的想法，並依此加以改良，新增 TLE 判定和超時時會強制停止，並且可以跨平台使用。</p>
<h2 id="使用-解題者"><a href="#使用-解題者" class="headerlink" title="使用(解題者)"></a>使用(解題者)</h2><p>一題會是一個資料夾，裡面會有隱藏檔案和非隱藏檔案。</p>
<table>
<thead>
<tr>
<th>檔案名稱</th>
<th>大致內容</th>
<th>是否隱藏</th>
</tr>
</thead>
<tbody><tr>
<td>AC</td>
<td>ascii art 的 AC 字樣</td>
<td>True</td>
</tr>
<tr>
<td>WA</td>
<td>ascii art 的 WA 字樣</td>
<td>True</td>
</tr>
<tr>
<td>TLE</td>
<td>ascii art 的 TLE 字樣</td>
<td>True</td>
</tr>
<tr>
<td>main.h</td>
<td>主要程式</td>
<td>不用附給使用者</td>
</tr>
<tr>
<td>Run.cpp</td>
<td>執行程式</td>
<td>不用附給使用者</td>
</tr>
<tr>
<td>Run.exe</td>
<td>執行程式</td>
<td>False</td>
</tr>
<tr>
<td>Solve.cpp</td>
<td>使用者的程式</td>
<td>False</td>
</tr>
<tr>
<td>Description</td>
<td>題目敘述</td>
<td>False</td>
</tr>
<tr>
<td>README.md</td>
<td>說明使用方法(如下)</td>
<td>False</td>
</tr>
</tbody></table>
<h3 id="README-txt-內文"><a href="#README-txt-內文" class="headerlink" title="README.txt 內文"></a>README.txt 內文</h3><h4 id="以下說明檔案功能及用法"><a href="#以下說明檔案功能及用法" class="headerlink" title="以下說明檔案功能及用法"></a>以下說明檔案功能及用法</h4><ol>
<li>編譯並執行 Run.cpp 可以獲得評測結果</li>
<li>程式碼請寫在 Solve.cpp 裡面</li>
<li>題目敘述在 Description 裡面，一般應該是 .txt，.md 或 .pdf</li>
<li>標準輸入輸出用 cin 和 cout 就可以了</li>
</ol>
<h4 id="以下說明答題結果"><a href="#以下說明答題結果" class="headerlink" title="以下說明答題結果"></a>以下說明答題結果</h4><ol>
<li>AC 作答正確</li>
<li>WA 輸出結果錯誤，或不符合題目要求</li>
<li>TLE 執行時間過長</li>
<li>程式跳掉 一般來說都是 RE(runtime error)</li>
</ol>
<h4 id="以下規定請勿違反"><a href="#以下規定請勿違反" class="headerlink" title="以下規定請勿違反"></a>以下規定請勿違反</h4><ol>
<li>擅自更改除 Solve 以外的檔案</li>
</ol>
<h4 id="貼心小提醒"><a href="#貼心小提醒" class="headerlink" title="貼心小提醒"></a>貼心小提醒</h4><p>由於 Solve 函式會被重複使用，因此變數就算開在全域也要記得初始化(現版本已經不需要)</p>
<h3 id="截圖"><a href="#截圖" class="headerlink" title="截圖"></a>截圖</h3><p><img src="https://live.staticflickr.com/65535/52131824719_f3ef187894_o.png" alt="AC"></p>
<h2 id="使用-出題者"><a href="#使用-出題者" class="headerlink" title="使用(出題者)"></a>使用(出題者)</h2><p>資料夾中還含有一個隱藏資料夾 TestCase，裡面存放有測試資料。裡面的檔案如下</p>
<table>
<thead>
<tr>
<th>檔案名稱</th>
<th>大致內容</th>
</tr>
</thead>
<tbody><tr>
<td>Gen.cpp</td>
<td>預設的測試資料生成程式</td>
</tr>
<tr>
<td>GraphGen.h</td>
<td>圖論測資生成程式 ( <a href="https://mtmatt.one/misc/the-test-case-builder-of-graph-theory/">使用介紹</a> )</td>
</tr>
<tr>
<td>Sol.cpp</td>
<td>官解檔</td>
</tr>
<tr>
<td>log.txt</td>
<td>測試資料們的基本資料</td>
</tr>
</tbody></table>
<h3 id="Gen-cpp"><a href="#Gen-cpp" class="headerlink" title="Gen.cpp"></a>Gen.cpp</h3><p>介紹各個函式的功能</p>
<table>
<thead>
<tr>
<th>函式</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>RandomNumber(long long a,long long b)</td>
<td>生成一個隨機數 ( 範圍[a,b] )</td>
</tr>
<tr>
<td>RandomNumber(long long n)</td>
<td>生成一個隨機數 ( 範圍[1,n] )</td>
</tr>
<tr>
<td>solve()</td>
<td>共用解答函式(會調用Sol.cpp)</td>
</tr>
<tr>
<td>SubTesk1(int a)</td>
<td>生成第 a 筆測資</td>
</tr>
</tbody></table>
<p>如果覺得 RandomNumber 太長，GraphGen.h 裡面有相同功能的函式 Rand</p>
<!-- 其他都不是非常重要，主要是可以同時支援 UOJ 格式的測資。 -->

<p>以下是 a+b problem 的範例。</p>
<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GraphGen.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(v) v.begin(),v.end()</span></span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> seed=chrono::steady_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line">mt19937_64 rng=<span class="built_in">mt19937_64</span>(seed);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">RandomNumber</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b)</span></span>&#123;</span><br><span class="line">    <span class="function">uniform_int_distribution&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">dis</span><span class="params">(a,b)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dis</span>(rng);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">RandomNumber</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RandomNumber</span>(<span class="number">1</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    string file = <span class="string">&quot;Sol / &lt; &quot;</span> + <span class="built_in">to_string</span>(i) + <span class="string">&quot;.in&quot;</span> + <span class="string">&quot;&gt; &quot;</span> + <span class="built_in">to_string</span>(i) + <span class="string">&quot;.out&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> exec_status = <span class="built_in">system</span>(file.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">if</span> (exec_status != <span class="number">0</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Execution failed.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SubTesk1</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    string fileName=<span class="built_in">to_string</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="function">ofstream <span class="title">ques</span><span class="params">(fileName+<span class="string">&quot;.in&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> aa=<span class="built_in">RandomNumber</span>(<span class="number">10000</span>),b=<span class="built_in">RandomNumber</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">    ques&lt;&lt;aa&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cerr&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SubTesk2</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    string fileName=<span class="built_in">to_string</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="function">ofstream <span class="title">ques</span><span class="params">(fileName+<span class="string">&quot;.in&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> aa=<span class="built_in">RandomNumber</span>(<span class="number">10000</span>),b=<span class="built_in">RandomNumber</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">    ques&lt;&lt;aa&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cerr&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REP(i,a,b) for(int i=(a);i&lt;=(b);++i)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> compile_status = <span class="built_in">system</span>(<span class="string">&quot;g++ Sol.cpp -o Sol&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (compile_status != <span class="number">0</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Compilation failed.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">clock_t</span> startTime=<span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">REP</span>(i,<span class="number">1</span>,<span class="number">5</span>)&#123;</span><br><span class="line">        <span class="built_in">SubTesk1</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">REP</span>(i,<span class="number">6</span>,<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="built_in">SubTesk2</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">REP</span>(i,<span class="number">1</span>,<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="built_in">solve</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">clock_t</span> endTime=<span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">    cerr&lt;&lt;<span class="built_in">double</span>(endTime-startTime)/<span class="number">1000</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="log-txt"><a href="#log-txt" class="headerlink" title="log.txt"></a>log.txt</h3><p>只有三行，第一行是測試資料數目，第二行是執行時間限制，以毫秒為單位，第三行是題目ID。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TestCases:     5</span><br><span class="line">TimeLimit(ms): 50</span><br><span class="line">ProblemID: Default</span><br></pre></td></tr></table></figure>

<h2 id="主程式"><a href="#主程式" class="headerlink" title="主程式"></a>主程式</h2><table>
<thead>
<tr>
<th>函式</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>RunCode(int timeLimit)</td>
<td>執行使用者程式(會計算時間，盡量減少多餘程式碼)</td>
</tr>
<tr>
<td>RunTestCase(int testCase,int timeLimit)</td>
<td>完成執行第 testCase 筆測試資料所需的前置條件</td>
</tr>
<tr>
<td>Judge(int testCase)</td>
<td>評判解答正確性</td>
</tr>
<tr>
<td>RunSolution()</td>
<td>執行所有測試並輸出結果</td>
</tr>
<tr>
<td>EnCode()</td>
<td>AC時回傳密碼</td>
</tr>
</tbody></table>
<h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAIN_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include&lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &quot;Solve.h&quot;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> isfinish=<span class="literal">false</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; costTime;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> CODE_LENGTH=<span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeLimitExceeded</span> : <span class="keyword">public</span> exception&#123;</span><br><span class="line">    <span class="keyword">public</span> :</span><br><span class="line">        <span class="built_in">TimeLimitExceeded</span>() : <span class="built_in">exception</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompilationError</span> : <span class="keyword">public</span> exception&#123;</span><br><span class="line">    <span class="keyword">public</span> :</span><br><span class="line">        <span class="built_in">CompilationError</span>() : <span class="built_in">exception</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">RandomNumber</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b,mt19937_64 &amp;rng)</span></span>&#123;</span><br><span class="line">    <span class="function">uniform_int_distribution&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">dis</span><span class="params">(a,b)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dis</span>(rng);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">RandomNumber</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n,mt19937_64 &amp;rng)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RandomNumber</span>(<span class="number">1</span>,n,rng);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RunCode</span><span class="params">(<span class="type">int</span> timeLimit,<span class="type">int</span> testCase)</span></span>&#123;</span><br><span class="line">    isfinish=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    string file = </span><br><span class="line">        <span class="string">&quot;Sol / &lt; ./TestCase\\&quot;</span> + <span class="built_in">to_string</span>(testCase) + <span class="string">&quot;.in&quot;</span> + </span><br><span class="line">        <span class="string">&quot;&gt; ./TestCase\\sol&quot;</span> + <span class="built_in">to_string</span>(testCase) + <span class="string">&quot;.out&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">clock_t</span> start=<span class="built_in">clock</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> exec_status = <span class="built_in">system</span>(file.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">if</span>(exec_status != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isfinish=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">clock_t</span> end=<span class="built_in">clock</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(end-start&gt;timeLimit)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">TimeLimitExceeded</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    costTime.<span class="built_in">emplace_back</span>(end-start);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RunTestCase</span><span class="params">(<span class="type">int</span> testCase,<span class="type">int</span> timeLimit)</span></span>&#123;</span><br><span class="line">    string fileNum=<span class="built_in">to_string</span>(testCase);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// string inputFile=&quot;./TestCase\\&quot;;</span></span><br><span class="line">    <span class="comment">// inputFile+=fileNum;</span></span><br><span class="line">    <span class="comment">// inputFile+=&quot;.in&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// string userOutput=&quot;./TestCase\\sol&quot;;</span></span><br><span class="line">    <span class="comment">// userOutput+=fileNum;</span></span><br><span class="line">    <span class="comment">// userOutput+=&quot;.out&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// freopen(inputFile.c_str(),&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(userOutput.c_str(),&quot;w&quot;,stdout);</span></span><br><span class="line"></span><br><span class="line">    thread run&#123;RunCode,timeLimit,testCase&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">clock_t</span> start=<span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!isfinish &amp;&amp; <span class="built_in">clock</span>()-start&lt;=timeLimit);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// chrono::milliseconds s(timeLimit+20);</span></span><br><span class="line">    <span class="comment">// this_thread::sleep_for(s);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!isfinish)&#123;</span><br><span class="line">        run.<span class="built_in">detach</span>();</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">TimeLimitExceeded</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        run.<span class="built_in">join</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Judge</span><span class="params">(<span class="type">int</span> testCase)</span></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">userOutput</span><span class="params">(<span class="string">&quot;./TestCase\\sol&quot;</span>+to_string(testCase)+<span class="string">&quot;.out&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">question</span><span class="params">(<span class="string">&quot;./TestCase\\&quot;</span>+to_string(testCase)+<span class="string">&quot;.in&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">answer</span><span class="params">(<span class="string">&quot;./TestCase\\&quot;</span>+to_string(testCase)+<span class="string">&quot;.out&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    string tp,userAns,systemAns;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(userOutput&gt;&gt;tp)&#123;</span><br><span class="line">        userAns+=tp;</span><br><span class="line">        <span class="keyword">if</span>(userAns.<span class="built_in">size</span>()&gt;<span class="number">10000000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(answer&gt;&gt;tp)&#123;</span><br><span class="line">        systemAns+=tp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cerr&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> systemAns==userAns;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">Encode</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">fi</span><span class="params">(<span class="string">&quot;Solve.h&quot;</span>)</span></span>;</span><br><span class="line">    string tp,file;</span><br><span class="line">    <span class="keyword">while</span>(fi&gt;&gt;tp)&#123;</span><br><span class="line">        file+=tp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:file)&#123;</span><br><span class="line">        sum+=(<span class="type">int</span>)i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">mt19937_64 <span class="title">rng</span><span class="params">(sum)</span></span>;</span><br><span class="line">    string ret;</span><br><span class="line"></span><br><span class="line">    sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;CODE_LENGTH<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="built_in">RandomNumber</span>(<span class="number">100</span>,rng);</span><br><span class="line">        sum+=a;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;<span class="number">10</span>) ret+=<span class="string">&quot;0&quot;</span>;</span><br><span class="line">        ret+=<span class="built_in">to_string</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum%=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>(sum==<span class="number">20</span>)&#123;</span><br><span class="line">        ret+=<span class="string">&quot;00&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;<span class="number">20</span>)&#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">20</span>-sum;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;<span class="number">10</span>) ret+=<span class="string">&quot;0&quot;</span>;</span><br><span class="line">        ret+=<span class="built_in">to_string</span>(a);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">120</span>-sum;</span><br><span class="line">        ret+=<span class="built_in">to_string</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RunSolution</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">log</span><span class="params">(<span class="string">&quot;./TestCase\\log.txt&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    string recycle,problemID;</span><br><span class="line">    <span class="type">int</span> testCases,timeLimit;</span><br><span class="line"></span><br><span class="line">    log&gt;&gt;recycle&gt;&gt;testCases;</span><br><span class="line">    log&gt;&gt;recycle&gt;&gt;timeLimit;</span><br><span class="line">    log&gt;&gt;recycle&gt;&gt;problemID;</span><br><span class="line"></span><br><span class="line">    <span class="function">ofstream <span class="title">output</span><span class="params">(<span class="string">&quot;output.info&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    cerr&lt;&lt;<span class="string">&quot;Problem ID : &quot;</span>&lt;&lt;problemID&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cerr&lt;&lt;<span class="string">&quot;There&#x27;re &quot;</span>&lt;&lt;testCases&lt;&lt;<span class="string">&quot; testcases.&quot;</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cerr&lt;&lt;<span class="string">&quot;Running TestCase...&quot;</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    output&lt;&lt;<span class="string">&quot;Problem ID : &quot;</span>&lt;&lt;problemID&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    output&lt;&lt;<span class="string">&quot;There&#x27;re &quot;</span>&lt;&lt;testCases&lt;&lt;<span class="string">&quot; testcases.&quot;</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">int</span> compile_status = <span class="built_in">system</span>(<span class="string">&quot;g++ Solve.cpp -O2 -o Sol&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (compile_status != <span class="number">0</span>) &#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;Compilation failed.\n&quot;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">CompilationError</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=testCases;++i)&#123;</span><br><span class="line">            <span class="built_in">RunTestCase</span>(i,timeLimit);</span><br><span class="line">            cerr&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">    &#125;<span class="built_in">catch</span>(TimeLimitExceeded)&#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">TLE</span><span class="params">(<span class="string">&quot;TLE&quot;</span>)</span></span>;</span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(TLE,line))&#123;</span><br><span class="line">            cerr&lt;&lt;line&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cerr&lt;&lt;flush;</span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="built_in">catch</span>(CompilationError)&#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">CE</span><span class="params">(<span class="string">&quot;CE&quot;</span>)</span></span>;</span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(CE,line))&#123;</span><br><span class="line">            cerr&lt;&lt;line&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cerr&lt;&lt;flush;</span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="built_in">catch</span>(exception)&#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">RE</span><span class="params">(<span class="string">&quot;RE&quot;</span>)</span></span>;</span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(RE,line))&#123;</span><br><span class="line">            cerr&lt;&lt;line&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cerr&lt;&lt;flush;</span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> allCorrect=<span class="literal">true</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">outputCorrect</span><span class="params">(testCases+<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=testCases;++i)&#123;</span><br><span class="line">        outputCorrect[i]=<span class="built_in">Judge</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(!outputCorrect[i])&#123;</span><br><span class="line">            allCorrect=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cerr&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(allCorrect)&#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">AC</span><span class="params">(<span class="string">&quot;AC&quot;</span>)</span></span>;</span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(AC,line))&#123;</span><br><span class="line">            cerr&lt;&lt;line&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            output&lt;&lt;line&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cerr&lt;&lt;flush;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ifstream <span class="built_in">WA</span>(<span class="string">&quot;WA&quot;</span>);</span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(WA,line))&#123;</span><br><span class="line">            cerr&lt;&lt;line&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            output&lt;&lt;line&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cerr&lt;&lt;flush;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string ret[<span class="number">2</span>]&#123;<span class="string">&quot;WA&quot;</span>,<span class="string">&quot;AC&quot;</span>&#125;;</span><br><span class="line">    cerr&lt;&lt;<span class="string">&quot;For each testcase : &quot;</span>&lt;&lt;<span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">    output&lt;&lt;<span class="string">&quot;For each testcase : &quot;</span>&lt;&lt;<span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=testCases;++i)&#123;</span><br><span class="line">        cerr&lt;&lt;right&lt;&lt;<span class="built_in">setw</span>(<span class="number">3</span>)&lt;&lt;i&lt;&lt;<span class="string">&quot;. &quot;</span>&lt;&lt;flush;</span><br><span class="line">        cerr&lt;&lt;ret[outputCorrect[i]]&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;flush;</span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;Execution time : &quot;</span>&lt;&lt;right&lt;&lt;<span class="built_in">setw</span>(<span class="number">4</span>)&lt;&lt;costTime[i<span class="number">-1</span>]&lt;&lt;<span class="string">&quot; ms&quot;</span>&lt;&lt;endl;</span><br><span class="line">        output&lt;&lt;right&lt;&lt;<span class="built_in">setw</span>(<span class="number">3</span>)&lt;&lt;i&lt;&lt;<span class="string">&quot;. &quot;</span>&lt;&lt;flush;</span><br><span class="line">        output&lt;&lt;ret[outputCorrect[i]]&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;flush;</span><br><span class="line">        output&lt;&lt;<span class="string">&quot;Execution time : &quot;</span>&lt;&lt;right&lt;&lt;<span class="built_in">setw</span>(<span class="number">4</span>)&lt;&lt;costTime[i<span class="number">-1</span>]&lt;&lt;<span class="string">&quot; ms&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cerr&lt;&lt;endl;</span><br><span class="line">    output&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(allCorrect)&#123;</span><br><span class="line">        string code=<span class="built_in">Encode</span>();</span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;AC code : &quot;</span>&lt;&lt;code&lt;&lt;endl;</span><br><span class="line">        output&lt;&lt;<span class="string">&quot;AC code : &quot;</span>&lt;&lt;code&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h2 id="競賽中不會出現的-C-功能"><a href="#競賽中不會出現的-C-功能" class="headerlink" title="競賽中不會出現的 C++ 功能"></a>競賽中不會出現的 C++ 功能</h2><p>多執行續 thread 函式庫</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 開新的執行續處理函式 RunCode</span></span><br><span class="line">thread run&#123;RunCode,timeLimit&#125;;</span><br><span class="line"><span class="comment">// 讓此執行續等待一段時間 chrono 格式</span></span><br><span class="line">this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">milliseconds</span>(timeLimit+<span class="number">20</span>))</span><br><span class="line"><span class="comment">// 放空該執行續(與物件 run 取消綁定，但會繼續執行)</span></span><br><span class="line">run.<span class="built_in">detach</span>();</span><br><span class="line"><span class="comment">// 合併執行續，意味著它會等待到 run 那個執行序完成(return)後再合併</span></span><br><span class="line">run.<span class="built_in">join</span>();</span><br></pre></td></tr></table></figure>

<h2 id="其它題目"><a href="#其它題目" class="headerlink" title="其它題目"></a>其它題目</h2><p>可以去雲端硬碟下載。這裡有一些題目。<a href="https://mega.nz/folder/HgdU3J4A#NjDnWXqIS6Ov_hDGnrbtkA">Mega</a></p>
<h2 id="電子簽章"><a href="#電子簽章" class="headerlink" title="電子簽章"></a>電子簽章</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">signtool.exe sign /a /fd SHA256 /td SHA256 /tr http://timestamp.comodoca.com &quot;xxx.exe&quot;</span><br></pre></td></tr></table></figure>
<img src="https://live.staticflickr.com/65535/53110865558_c9c90c0839_b.jpg" width="1024" height="507" alt="signtool.exe"/>

<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://mtmatt.one/misc/offline-judge-system/">Offline Judge 離線程式評測系統</a></p>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>oj</tag>
      </tags>
  </entry>
  <entry>
    <title>Offline Judge 離線程式評測系統</title>
    <url>/misc/offline-judge-system/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近我同學有在架設我們學校的線上評測系統，而一開始我們的系統非常不穩定，因此，他想到可以寫離線的程式答題系統緩解我們上課的需求。而我看到這個系統，我覺得這是一個不錯的想法，並依此加以改良，新增 TLE 判定和超時時會強制停止，並且可以跨平台使用。</p>
<h2 id="使用-解題者"><a href="#使用-解題者" class="headerlink" title="使用(解題者)"></a>使用(解題者)</h2><p>一題會是一個資料夾，裡面會有隱藏檔案和非隱藏檔案。</p>
<table>
<thead>
<tr>
<th>檔案名稱</th>
<th>大致內容</th>
<th>是否隱藏</th>
</tr>
</thead>
<tbody><tr>
<td>AC</td>
<td>ascii art 的 AC 字樣</td>
<td>True</td>
</tr>
<tr>
<td>WA</td>
<td>ascii art 的 WA 字樣</td>
<td>True</td>
</tr>
<tr>
<td>TLE</td>
<td>ascii art 的 TLE 字樣</td>
<td>True</td>
</tr>
<tr>
<td>main.h</td>
<td>主要程式</td>
<td>原則上 True</td>
</tr>
<tr>
<td>Run.cpp</td>
<td>執行程式</td>
<td>False</td>
</tr>
<tr>
<td>Solve.h</td>
<td>使用者的程式</td>
<td>False</td>
</tr>
<tr>
<td>Description</td>
<td>題目敘述</td>
<td>False</td>
</tr>
<tr>
<td>README.txt</td>
<td>說明使用方法(如下)</td>
<td>False</td>
</tr>
</tbody></table>
<h3 id="README-txt-內文"><a href="#README-txt-內文" class="headerlink" title="README.txt 內文"></a>README.txt 內文</h3><h4 id="以下說明檔案功能及用法"><a href="#以下說明檔案功能及用法" class="headerlink" title="以下說明檔案功能及用法"></a>以下說明檔案功能及用法</h4><ol>
<li>編譯並執行 Run.cpp 可以獲得評測結果</li>
<li>程式碼請寫在 Solve.h 裡面</li>
<li>題目敘述在 Description 裡面，一般應該是 .txt，.md 或 .pdf</li>
<li>標準輸入輸出用 cin 和 cout 就可以了</li>
</ol>
<h4 id="以下說明答題結果"><a href="#以下說明答題結果" class="headerlink" title="以下說明答題結果"></a>以下說明答題結果</h4><ol>
<li>AC 作答正確</li>
<li>WA 輸出結果錯誤，或不符合題目要求</li>
<li>TLE 執行時間過長</li>
<li>程式跳掉 一般來說都是 RE(runtime error)</li>
</ol>
<h4 id="以下規定請勿違反"><a href="#以下規定請勿違反" class="headerlink" title="以下規定請勿違反"></a>以下規定請勿違反</h4><ol>
<li>擅自更改除 Solve 以外的檔案</li>
</ol>
<h4 id="貼心小提醒"><a href="#貼心小提醒" class="headerlink" title="貼心小提醒"></a>貼心小提醒</h4><p>由於 Solve 函式會被重複使用，因此變數就算開在全域也要記得初始化</p>
<h3 id="截圖"><a href="#截圖" class="headerlink" title="截圖"></a>截圖</h3><p><img src="https://live.staticflickr.com/65535/52131824719_f3ef187894_o.png" alt="AC"></p>
<h2 id="使用-出題者"><a href="#使用-出題者" class="headerlink" title="使用(出題者)"></a>使用(出題者)</h2><p>資料夾中還含有一個隱藏資料夾 TestCase，裡面存放有測試資料。裡面的檔案如下</p>
<table>
<thead>
<tr>
<th>檔案名稱</th>
<th>大致內容</th>
</tr>
</thead>
<tbody><tr>
<td>Gen.cpp</td>
<td>預設的測試資料生成程式</td>
</tr>
<tr>
<td>GraphGen.h</td>
<td>圖論測資生成程式 ( <a href="https://mtmatt.one/misc/the-test-case-builder-of-graph-theory/">使用介紹</a> )</td>
</tr>
<tr>
<td>log.txt</td>
<td>測試資料們的基本資料</td>
</tr>
<tr>
<td>OJ</td>
<td>生成可以上傳到 UOJ 系統的測試資料</td>
</tr>
</tbody></table>
<h3 id="Gen-cpp"><a href="#Gen-cpp" class="headerlink" title="Gen.cpp"></a>Gen.cpp</h3><p>介紹各個函式的功能</p>
<table>
<thead>
<tr>
<th>函式</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>RandomNumber(long long a,long long b)</td>
<td>生成一個隨機數 ( 範圍[a,b] )</td>
</tr>
<tr>
<td>RandomNumber(long long n)</td>
<td>生成一個隨機數 ( 範圍[1,n] )</td>
</tr>
<tr>
<td>solve()</td>
<td>共用解答函式 ( 有需要的話 )</td>
</tr>
<tr>
<td>SubTesk1(int a)</td>
<td>生成第 a 筆測資</td>
</tr>
</tbody></table>
<p>如果覺得 RandomNumber 太長，GraphGen.h 裡面有相同功能的函式 Rand</p>
<p>其他都不是非常重要，主要是可以同時支援 UOJ 格式的測資。以下是 a+b problem 的範例。</p>
<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GraphGen.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> seed=chrono::steady_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line">mt19937_64 rng=<span class="built_in">mt19937_64</span>(seed);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">RandomNumber</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b)</span></span>&#123;</span><br><span class="line">    <span class="function">uniform_int_distribution&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">dis</span><span class="params">(a,b)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dis</span>(rng);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">RandomNumber</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RandomNumber</span>(<span class="number">1</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SubTesk1</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    string fileName=<span class="built_in">to_string</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="function">ofstream <span class="title">ques</span><span class="params">(fileName+<span class="string">&quot;.in&quot;</span>)</span>,<span class="title">ans</span><span class="params">(fileName+<span class="string">&quot;.out&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> aa=<span class="built_in">RandomNumber</span>(<span class="number">10000</span>),b=<span class="built_in">RandomNumber</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">    ques&lt;&lt;aa&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    ans&lt;&lt;aa+b&lt;&lt;<span class="string">&quot;\n&quot;</span>; </span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UOJ</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    string fileName=<span class="string">&quot;./OJ\\a&quot;</span>+<span class="built_in">to_string</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="function">ofstream <span class="title">ques</span><span class="params">(fileName+<span class="string">&quot;.in&quot;</span>)</span>,<span class="title">ans</span><span class="params">(fileName+<span class="string">&quot;.out&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> aa=<span class="built_in">RandomNumber</span>(<span class="number">10000</span>),b=<span class="built_in">RandomNumber</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">    ques&lt;&lt;aa&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    ans&lt;&lt;aa+b&lt;&lt;<span class="string">&quot;\n&quot;</span>; </span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExTest</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    string fileName=<span class="string">&quot;./OJ\\ex_a&quot;</span>+<span class="built_in">to_string</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="function">ofstream <span class="title">ques</span><span class="params">(fileName+<span class="string">&quot;.in&quot;</span>)</span>,<span class="title">ans</span><span class="params">(fileName+<span class="string">&quot;.out&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> aa=<span class="built_in">RandomNumber</span>(<span class="number">10000</span>),b=<span class="built_in">RandomNumber</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">    ques&lt;&lt;aa&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    ans&lt;&lt;aa+b&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REP(i,a,b) for(int i=(a);i&lt;(b);++i)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">clock_t</span> startTime=<span class="built_in">clock</span>();</span><br><span class="line"><span class="comment">//  測資生成函式使用都放在這裡面</span></span><br><span class="line">    <span class="built_in">REP</span>(i,<span class="number">1</span>,<span class="number">5</span>+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">SubTesk1</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">REP</span>(i,<span class="number">1</span>,<span class="number">10</span>+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">UOJ</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">REP</span>(i,<span class="number">1</span>,<span class="number">10</span>+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">ExTest</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//  End Of Processes</span></span><br><span class="line">    <span class="type">clock_t</span> endTime=<span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="built_in">double</span>(endTime-startTime)/<span class="number">1000</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="log-txt"><a href="#log-txt" class="headerlink" title="log.txt"></a>log.txt</h3><p>只有兩行，第一行是測試資料數目，第二行是執行時間限制，以毫秒為單位。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TestCases:     5</span><br><span class="line">TimeLimit(ms): 50</span><br></pre></td></tr></table></figure>

<h2 id="主程式"><a href="#主程式" class="headerlink" title="主程式"></a>主程式</h2><table>
<thead>
<tr>
<th>函式</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>RunCode(int timeLimit)</td>
<td>執行使用者程式(會計算時間，盡量減少多餘程式碼)</td>
</tr>
<tr>
<td>RunTestCase(int testCase,int timeLimit)</td>
<td>完成執行第 testCase 筆測試資料所需的前置條件</td>
</tr>
<tr>
<td>Judge(int testCase)</td>
<td>評判解答正確性</td>
</tr>
<tr>
<td>RunSolution()</td>
<td>執行所有測試並輸出結果</td>
</tr>
</tbody></table>
<h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAIN_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Solve.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> isfinish=<span class="literal">false</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; costTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TLE 例外物件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeLimitExceeded</span> : <span class="keyword">public</span> exception&#123;</span><br><span class="line">    <span class="keyword">public</span> :</span><br><span class="line">        <span class="built_in">TimeLimitExceeded</span>() : <span class="built_in">exception</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RunCode</span><span class="params">(<span class="type">int</span> timeLimit)</span></span>&#123;</span><br><span class="line">    isfinish=<span class="literal">false</span>;</span><br><span class="line">    <span class="type">clock_t</span> start=<span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solve</span>();</span><br><span class="line"></span><br><span class="line">    isfinish=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">clock_t</span> end=<span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(end-start&gt;timeLimit)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">TimeLimitExceeded</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    costTime.<span class="built_in">emplace_back</span>(end-start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RunTestCase</span><span class="params">(<span class="type">int</span> testCase,<span class="type">int</span> timeLimit)</span></span>&#123;</span><br><span class="line">    string fileNum=<span class="built_in">to_string</span>(testCase);</span><br><span class="line"></span><br><span class="line">    string inputFile=<span class="string">&quot;./TestCase\\&quot;</span>;</span><br><span class="line">    inputFile+=fileNum;</span><br><span class="line">    inputFile+=<span class="string">&quot;.in&quot;</span>;</span><br><span class="line"></span><br><span class="line">    string userOutput=<span class="string">&quot;./TestCase\\sol&quot;</span>;</span><br><span class="line">    userOutput+=fileNum;</span><br><span class="line">    userOutput+=<span class="string">&quot;.out&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">freopen</span>(inputFile.<span class="built_in">c_str</span>(),<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(userOutput.<span class="built_in">c_str</span>(),<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"></span><br><span class="line">    thread run&#123;RunCode,timeLimit&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">chrono::milliseconds <span class="title">s</span><span class="params">(timeLimit+<span class="number">20</span>)</span></span>;</span><br><span class="line">    this_thread::<span class="built_in">sleep_for</span>(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!isfinish)&#123;</span><br><span class="line">        run.<span class="built_in">detach</span>();</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">TimeLimitExceeded</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        run.<span class="built_in">join</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Judge</span><span class="params">(<span class="type">int</span> testCase)</span></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">userOutput</span><span class="params">(<span class="string">&quot;./TestCase\\sol&quot;</span>+to_string(testCase)+<span class="string">&quot;.out&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">question</span><span class="params">(<span class="string">&quot;./TestCase\\&quot;</span>+to_string(testCase)+<span class="string">&quot;.in&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">answer</span><span class="params">(<span class="string">&quot;./TestCase\\&quot;</span>+to_string(testCase)+<span class="string">&quot;.out&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    string tp,userAns,systemAns;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(userOutput&gt;&gt;tp)&#123;</span><br><span class="line">        userAns+=tp;</span><br><span class="line">        <span class="keyword">if</span>(userAns.<span class="built_in">size</span>()&gt;<span class="number">10000000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(answer&gt;&gt;tp)&#123;</span><br><span class="line">        systemAns+=tp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cerr&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> systemAns==userAns;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RunSolution</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">log</span><span class="params">(<span class="string">&quot;./TestCase\\log.txt&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    string recycle;</span><br><span class="line">    <span class="type">int</span> testCases,timeLimit;</span><br><span class="line"></span><br><span class="line">    log&gt;&gt;recycle&gt;&gt;testCases;</span><br><span class="line">    log&gt;&gt;recycle&gt;&gt;timeLimit;</span><br><span class="line"></span><br><span class="line">    cerr&lt;&lt;<span class="string">&quot;There&#x27;re &quot;</span>&lt;&lt;testCases&lt;&lt;<span class="string">&quot; testcases.&quot;</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cerr&lt;&lt;<span class="string">&quot;Running TestCase...&quot;</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=testCases;++i)&#123;</span><br><span class="line">            <span class="built_in">RunTestCase</span>(i,timeLimit);</span><br><span class="line">            cerr&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">    &#125;<span class="built_in">catch</span>(TimeLimitExceeded)&#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">TLE</span><span class="params">(<span class="string">&quot;TLE&quot;</span>)</span></span>;</span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(TLE,line))&#123;</span><br><span class="line">            cerr&lt;&lt;line&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cerr&lt;&lt;flush;</span><br><span class="line">        <span class="built_in">getch</span>();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="built_in">catch</span>(exception)&#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">RE</span><span class="params">(<span class="string">&quot;RE&quot;</span>)</span></span>;</span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(RE,line))&#123;</span><br><span class="line">            cerr&lt;&lt;line&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cerr&lt;&lt;flush;</span><br><span class="line">        <span class="built_in">getch</span>();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> allCorrect=<span class="literal">true</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">outputCorrect</span><span class="params">(testCases+<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=testCases;++i)&#123;</span><br><span class="line">        outputCorrect[i]=<span class="built_in">Judge</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(!outputCorrect[i])&#123;</span><br><span class="line">            allCorrect=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cerr&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(allCorrect)&#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">AC</span><span class="params">(<span class="string">&quot;AC&quot;</span>)</span></span>;</span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(AC,line))&#123;</span><br><span class="line">            cerr&lt;&lt;line&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cerr&lt;&lt;flush;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ifstream <span class="built_in">WA</span>(<span class="string">&quot;WA&quot;</span>);</span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(WA,line))&#123;</span><br><span class="line">            cerr&lt;&lt;line&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cerr&lt;&lt;flush;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string ret[<span class="number">2</span>]&#123;<span class="string">&quot;WA&quot;</span>,<span class="string">&quot;AC&quot;</span>&#125;;</span><br><span class="line">    cerr&lt;&lt;<span class="string">&quot;For each testcase : &quot;</span>&lt;&lt;<span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=testCases;++i)&#123;</span><br><span class="line">        cerr&lt;&lt;right&lt;&lt;<span class="built_in">setw</span>(<span class="number">3</span>)&lt;&lt;i&lt;&lt;<span class="string">&quot;. &quot;</span>&lt;&lt;flush;</span><br><span class="line">        cerr&lt;&lt;ret[outputCorrect[i]]&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;flush;</span><br><span class="line">        cerr&lt;&lt;<span class="string">&quot;Execution time : &quot;</span>&lt;&lt;right&lt;&lt;<span class="built_in">setw</span>(<span class="number">4</span>)&lt;&lt;costTime[i<span class="number">-1</span>]&lt;&lt;<span class="string">&quot; ms&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cerr&lt;&lt;flush;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getch</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h2 id="競賽中不會出現的-C-功能"><a href="#競賽中不會出現的-C-功能" class="headerlink" title="競賽中不會出現的 C++ 功能"></a>競賽中不會出現的 C++ 功能</h2><p>多執行續 thread 函式庫</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 開新的執行續處理函式 RunCode</span></span><br><span class="line">thread run&#123;RunCode,timeLimit&#125;;</span><br><span class="line"><span class="comment">// 讓此執行續等待一段時間 chrono 格式</span></span><br><span class="line">this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">milliseconds</span>(timeLimit+<span class="number">20</span>))</span><br><span class="line"><span class="comment">// 放空該執行續(與物件 run 取消綁定，但會繼續執行)</span></span><br><span class="line">run.<span class="built_in">detach</span>();</span><br><span class="line"><span class="comment">// 合併執行續，意味著它會等待到 run 那個執行序完成(return)後再合併</span></span><br><span class="line">run.<span class="built_in">join</span>();</span><br></pre></td></tr></table></figure>

<h2 id="其它題目"><a href="#其它題目" class="headerlink" title="其它題目"></a>其它題目</h2><p>可以去雲端硬碟下載。這裡有一些題目。<a href="https://mega.nz/folder/HgdU3J4A#NjDnWXqIS6Ov_hDGnrbtkA">Mega</a></p>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>oj</tag>
      </tags>
  </entry>
  <entry>
    <title>[題解]動態規劃-圍棋遊戲</title>
    <url>/cppreview/the-key-for-a-practical-test-of-dynamic-programming/</url>
    <content><![CDATA[<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML' async></script>

<h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>由題目可知，必須由甲開始，甲結束。因此，取的次數是奇數。我們可以將第一個甲獨立判斷，後面乙甲都綁定在一起。於是，可以得到。<br>\(dp_n &#x3D; dp_{n-2} + 2 \times dp_{n-3} + dp_{n-4}\)</p>
<p>其中，\(dp_{n-2}\) 是最後乙甲都取 1 個棋子；\(dp_{n-3}\) 是最後乙甲其中一個取 1 個棋子，\(dp_{n-4}\) 是最後乙甲都取 2 個棋子的方法數。</p>
<p>由於這是一個線性遞迴的轉移式，因此我們可以用矩陣乘法進一步優化。<br>$$<br>    \begin{pmatrix}dp_{n} \ dp_{n-1} \ dp_{n-2} \ dp_{n-3} \end{pmatrix} &#x3D;<br>    \begin{pmatrix}<br>    0 &amp; 1 &amp; 2 &amp; 1 \<br>    1 &amp; 0 &amp; 0 &amp; 0 \<br>    0 &amp; 1 &amp; 0 &amp; 0 \<br>    0 &amp; 0 &amp; 1 &amp; 0<br>    \end{pmatrix}<br>    \times<br>    \begin{pmatrix}dp_{n-1} \ dp_{n-2} \ dp_{n-3} \ dp_{n-4} \end{pmatrix}<br>$$</p>
<p>最後，\(dp_0&#x3D;0, ; dp_1 &#x3D; dp_2 &#x3D; dp_3 &#x3D;1\)，因此，可以整理如下。<br>$$<br>\begin{pmatrix}dp_{n} \ dp_{n-1} \ dp_{n-2} \ dp_{n-3} \end{pmatrix} &#x3D;<br>\begin{pmatrix}<br>0 &amp; 1 &amp; 2 &amp; 1 \<br>1 &amp; 0 &amp; 0 &amp; 0 \<br>0 &amp; 1 &amp; 0 &amp; 0 \<br>0 &amp; 0 &amp; 1 &amp; 0<br>\end{pmatrix} ^ {n-3}<br>\times<br>\begin{pmatrix};1; \ 1 \ 1 \ 0 \end{pmatrix}<br>$$<br>用快速冪的技巧將複雜度優化至 \(O(4^3 \times \log_{2}{n})\)</p>
<hr>
<h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> vll=vector&lt;ll&gt;;</span><br><span class="line"><span class="keyword">using</span> Mer=vector&lt;vll&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">Mer <span class="keyword">operator</span>*(Mer a,Mer b)&#123;</span><br><span class="line">    <span class="function">Mer <span class="title">ret</span><span class="params">(a.size(),vll(b[<span class="number">0</span>].size()))</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;b[<span class="number">0</span>].<span class="built_in">size</span>();++j)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;a.<span class="built_in">size</span>();++k)&#123;</span><br><span class="line">                ret[i][j]=(ret[i][j]+a[i][k]*b[k][j])%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Mer <span class="title">POW</span><span class="params">(Mer a,ll x)</span></span>&#123;</span><br><span class="line">    <span class="function">Mer <span class="title">ret</span><span class="params">(a.size(),vll(a[<span class="number">0</span>].size(),<span class="number">0</span>))</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();++i) ret[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&amp;<span class="number">1</span>) ret=ret*a;</span><br><span class="line">        a=a*a;</span><br><span class="line">        x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    ll n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">3</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Mer t=<span class="built_in">Mer</span>(&#123;</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t=<span class="built_in">POW</span>(t,n<span class="number">-3</span>);</span><br><span class="line"></span><br><span class="line">        Mer ans=<span class="built_in">Mer</span>(&#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">1</span>&#125;,&#123;<span class="number">1</span>&#125;,&#123;<span class="number">0</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">        ans=t*ans;</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;ans[<span class="number">0</span>][<span class="number">0</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cppreview</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>兩個生成測資的模板</title>
    <url>/misc/testcases-generating/</url>
    <content><![CDATA[<p>先來一個</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(v) v.begin(),v.end()</span></span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> seed=chrono::steady_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line">mt19937_64 rng=<span class="built_in">mt19937_64</span>(seed);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">RandomNumber</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b)</span></span>&#123;</span><br><span class="line">    <span class="function">uniform_int_distribution&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">dis</span><span class="params">(a,b)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dis</span>(rng);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">RandomNumber</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RandomNumber</span>(<span class="number">1</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SubTesk1</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    string fileName=<span class="built_in">to_string</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="function">ofstream <span class="title">ques</span><span class="params">(fileName+<span class="string">&quot;.in&quot;</span>)</span>,<span class="title">ans</span><span class="params">(fileName+<span class="string">&quot;.out&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n=<span class="built_in">RandomNumber</span>(<span class="number">90000</span>,<span class="number">100000</span>);</span><br><span class="line">    ques&lt;&lt;n&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; LIS;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="built_in">RandomNumber</span>(<span class="number">100000000</span>);</span><br><span class="line">        ques&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(LIS.<span class="built_in">empty</span>() || <span class="built_in">lower_bound</span>(<span class="built_in">ALL</span>(LIS),a)==LIS.<span class="built_in">end</span>())&#123;</span><br><span class="line">            LIS.<span class="built_in">emplace_back</span>(a);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> pos=<span class="built_in">lower_bound</span>(<span class="built_in">ALL</span>(LIS),a)-LIS.<span class="built_in">begin</span>();</span><br><span class="line">            LIS[pos]=a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans&lt;&lt;LIS.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REP(i,a,b) for(int i=(a);i&lt;(b);++i)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">clock_t</span> startTime=<span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">REP</span>(i,<span class="number">1</span>,<span class="number">20</span>+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">SubTesk1</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">clock_t</span> endTime=<span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="built_in">double</span>(endTime-startTime)/<span class="number">1000</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>還有一個 for 圖論題目的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GRAPH_GEN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GRAPH_GEN</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> seed=chrono::<span class="built_in">steady_clock</span>().<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line"><span class="function">mt19937_64 <span class="title">rng</span><span class="params">(seed)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Rand</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    <span class="function">uniform_int_distribution&lt;ll&gt; <span class="title">dis</span><span class="params">(a,b)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dis</span>(rng);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Rand</span><span class="params">(ll a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Rand</span>(<span class="number">1</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> from,to;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> dis;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">edge</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">edge</span>(<span class="type">int</span> f,<span class="type">int</span> t,<span class="type">long</span> <span class="type">long</span> d)&#123;</span><br><span class="line">        from=f;</span><br><span class="line">        to=t;</span><br><span class="line">        dis=d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphGen</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> :</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">DSU</span>&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; dsu,rk;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">DSU</span>(<span class="type">int</span> n)&#123;</span><br><span class="line">                dsu.<span class="built_in">resize</span>(n+<span class="number">10</span>);</span><br><span class="line">                rk.<span class="built_in">resize</span>(n+<span class="number">10</span>);</span><br><span class="line">                <span class="built_in">init</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;dsu.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">                    dsu[i]=i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(dsu[a]==a)&#123;</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> dsu[a]=<span class="built_in">find</span>(dsu[a]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">find</span>(a)==<span class="built_in">find</span>(b);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="type">void</span> <span class="title">uni</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">same</span>(a,b))&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(rk[<span class="built_in">find</span>(a)]==rk[<span class="built_in">find</span>(b)])&#123;</span><br><span class="line">                    dsu[<span class="built_in">find</span>(b)]=<span class="built_in">find</span>(a);</span><br><span class="line">                    rk[a]++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rk[<span class="built_in">find</span>(a)]&gt;rk[<span class="built_in">find</span>(b)])&#123;</span><br><span class="line">                    dsu[<span class="built_in">find</span>(b)]=<span class="built_in">find</span>(a);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dsu[<span class="built_in">find</span>(a)]=<span class="built_in">find</span>(b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">public</span> :</span><br><span class="line"><span class="comment">//      nodes 1~n</span></span><br><span class="line">        <span class="type">static</span> vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; <span class="built_in">GenTree</span>(<span class="type">int</span> n)&#123;</span><br><span class="line">            <span class="function">DSU <span class="title">dsu</span><span class="params">(n)</span></span>;</span><br><span class="line">            vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(result.<span class="built_in">size</span>()&lt;n<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="type">int</span> a=<span class="built_in">Rand</span>(n),b=<span class="built_in">Rand</span>(n);</span><br><span class="line">                <span class="keyword">if</span>(!dsu.<span class="built_in">same</span>(a,b))&#123;</span><br><span class="line">                    result.<span class="built_in">emplace_back</span>(a,b);</span><br><span class="line">                    dsu.<span class="built_in">uni</span>(a,b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      n nodes m edges, m need to bigger than n-1</span></span><br><span class="line">        <span class="type">static</span> vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; <span class="built_in">GenConnectedGraph</span>(<span class="type">int</span> n,<span class="type">int</span> m)&#123;</span><br><span class="line">            vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; result=<span class="built_in">GenTree</span>(n);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m-n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">                <span class="type">int</span> a,b;</span><br><span class="line">                <span class="keyword">do</span>&#123;</span><br><span class="line">                    a=<span class="built_in">Rand</span>(n);</span><br><span class="line">                    b=<span class="built_in">Rand</span>(n);</span><br><span class="line">                &#125;<span class="keyword">while</span>(a==b);</span><br><span class="line"></span><br><span class="line">                result.<span class="built_in">emplace_back</span>(a,b);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      n nodes m edges, m need to bigger than n-1</span></span><br><span class="line">        <span class="type">static</span> vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; <span class="built_in">GenGraph</span>(<span class="type">int</span> n,<span class="type">int</span> m)&#123;</span><br><span class="line">            vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">                <span class="type">int</span> a,b;</span><br><span class="line">                <span class="keyword">do</span>&#123;</span><br><span class="line">                    a=<span class="built_in">Rand</span>(n);</span><br><span class="line">                    b=<span class="built_in">Rand</span>(n);</span><br><span class="line">                &#125;<span class="keyword">while</span>(a==b);</span><br><span class="line"></span><br><span class="line">                result.<span class="built_in">emplace_back</span>(a,b);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      nodes 1~n, and weight in 1~k</span></span><br><span class="line">        <span class="function"><span class="type">static</span> vector&lt;edge&gt; <span class="title">GenTree</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">            <span class="function">DSU <span class="title">dsu</span><span class="params">(n)</span></span>;</span><br><span class="line">            vector&lt;edge&gt; result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(result.<span class="built_in">size</span>()&lt;n<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="type">int</span> a=<span class="built_in">Rand</span>(n),b=<span class="built_in">Rand</span>(n),c=<span class="built_in">Rand</span>(k);</span><br><span class="line">                <span class="keyword">if</span>(!dsu.<span class="built_in">same</span>(a,b))&#123;</span><br><span class="line">                    result.<span class="built_in">emplace_back</span>(a,b,c);</span><br><span class="line">                    dsu.<span class="built_in">uni</span>(a,b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">static</span> vector&lt;edge&gt; <span class="title">GenConnectedGraph</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">            vector&lt;edge&gt; result=<span class="built_in">GenTree</span>(n,k);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m-n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">                <span class="type">int</span> a,b;</span><br><span class="line">                <span class="keyword">do</span>&#123;</span><br><span class="line">                    a=<span class="built_in">Rand</span>(n);</span><br><span class="line">                    b=<span class="built_in">Rand</span>(n);</span><br><span class="line">                &#125;<span class="keyword">while</span>(a==b);</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> c=<span class="built_in">Rand</span>(k);</span><br><span class="line"></span><br><span class="line">                result.<span class="built_in">emplace_back</span>(a,b,c);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">static</span> vector&lt;edge&gt; <span class="title">GenGraph</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">            vector&lt;edge&gt; result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">                <span class="type">int</span> a,b;</span><br><span class="line">                <span class="keyword">do</span>&#123;</span><br><span class="line">                    a=<span class="built_in">Rand</span>(n);</span><br><span class="line">                    b=<span class="built_in">Rand</span>(n);</span><br><span class="line">                &#125;<span class="keyword">while</span>(a==b);</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> c=<span class="built_in">Rand</span>(k);</span><br><span class="line"></span><br><span class="line">                result.<span class="built_in">emplace_back</span>(a,b,c);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      nodes 1~n, and weight in l~r</span></span><br><span class="line">        <span class="function"><span class="type">static</span> vector&lt;edge&gt; <span class="title">GenTree</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">            <span class="function">DSU <span class="title">dsu</span><span class="params">(n)</span></span>;</span><br><span class="line">            vector&lt;edge&gt; result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(result.<span class="built_in">size</span>()&lt;n<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="type">int</span> a=<span class="built_in">Rand</span>(n),b=<span class="built_in">Rand</span>(n),c=<span class="built_in">Rand</span>(l,r);</span><br><span class="line">                <span class="keyword">if</span>(!dsu.<span class="built_in">same</span>(a,b))&#123;</span><br><span class="line">                    result.<span class="built_in">emplace_back</span>(a,b,c);</span><br><span class="line">                    dsu.<span class="built_in">uni</span>(a,b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">static</span> vector&lt;edge&gt; <span class="title">GenConnectedGraph</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">            vector&lt;edge&gt; result=<span class="built_in">GenTree</span>(n,l,r);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m-n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">                <span class="type">int</span> a,b;</span><br><span class="line">                <span class="keyword">do</span>&#123;</span><br><span class="line">                    a=<span class="built_in">Rand</span>(n);</span><br><span class="line">                    b=<span class="built_in">Rand</span>(n);</span><br><span class="line">                &#125;<span class="keyword">while</span>(a==b);</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> c=<span class="built_in">Rand</span>(l,r);</span><br><span class="line"></span><br><span class="line">                result.<span class="built_in">emplace_back</span>(a,b,c);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">static</span> vector&lt;edge&gt; <span class="title">GenGraph</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">            vector&lt;edge&gt; result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">                <span class="type">int</span> a,b;</span><br><span class="line">                <span class="keyword">do</span>&#123;</span><br><span class="line">                    a=<span class="built_in">Rand</span>(n);</span><br><span class="line">                    b=<span class="built_in">Rand</span>(n);</span><br><span class="line">                &#125;<span class="keyword">while</span>(a==b);</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> c=<span class="built_in">Rand</span>(l,r);</span><br><span class="line"></span><br><span class="line">                result.<span class="built_in">emplace_back</span>(a,b,c);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>TIOJ 1142 95_3.關鍵邏輯閘</title>
    <url>/contest/tioj-1142-95_3/</url>
    <content><![CDATA[<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML' async></script>

<h3 id="題目連結：1142-3-關鍵邏輯閘-TIOJ-INFOR-Online-Judge"><a href="#題目連結：1142-3-關鍵邏輯閘-TIOJ-INFOR-Online-Judge" class="headerlink" title="題目連結：1142 - 3.關鍵邏輯閘 | TIOJ INFOR Online Judge"></a>題目連結：<a href="https://tioj.ck.tp.edu.tw/problems/1142">1142 - 3.關鍵邏輯閘 | TIOJ INFOR Online Judge</a></h3><h4 id="題目敘述"><a href="#題目敘述" class="headerlink" title="題目敘述"></a>題目敘述</h4><p>一個組合電路(combinational circuit)由線路(wires)連接一組邏輯閘(logic gates)而成，並且不包含有向迴路(directed cycle)。一個組合電路的效能決定於最後一個主要輸出(primary output)被算出來的時間。假設每一個邏輯閘所需的運算時間都是固定並且是已知的，而線路的延遲(delay)是 0。我們希望把一個組合電路所有的關鍵邏輯閘找出來。若一個邏輯閘的運算時間有任何延長，便會影響到整個電路的效能，它就被稱為關鍵邏輯閘。以圖一的組合電路為例，I1、I2、I3 是主要輸入；O1、O2 是主要輸出；圓圈代表邏輯閘，箭頭代表線路；每個邏輯閘有自己的編號以及固定的延遲時間。在圖一的例子當中，該組合電路中的 O1 會因為邏輯閘 2、4、5 的延遲，在時間 400 才會收到運算結果；而 O2 會因為邏輯閘 2、4、6 的延遲，在時間 600 才收到運算結果，因此 O2 是最後一個被算出來的主要輸出。關鍵邏輯閘分別是 2、4 以及 6 號邏輯閘，當其中一個關鍵邏輯閘的運算時間有任何延長，O2 被算出來的時間也會再往後延遲。相反地，就算 1 號邏輯閘的運算時間從 150 延長到 160，也不會影響到 O2 被算出來的時間，因此 1 號邏輯閘並不是關鍵邏輯閘。</p>
<h4 id="輸入說明"><a href="#輸入說明" class="headerlink" title="輸入說明"></a>輸入說明</h4><p>第一行為一個整數 \(n (0 &lt; n &lt; 10000)\)，代表一個組合電路的邏輯閘總數，每個邏輯閘的編號都不同，且範圍是介於 \(1,2,…n\) 之間的整數。第二行為一個整數 \(m (m &lt; 50000)\)，代表線路的總數。接下來的 \(n\) 行，依序列出每個邏輯閘的運算時間；每個運算時間的值是介於 0 到 600 之間(含)的整數。最後 \(m\) 行，分別列出每一條線路由某個邏輯閘的輸出接到另一個邏輯閘的輸入。 注意：為簡化輸入，我們把主要輸入(primary inputs)與邏輯閘之間的線路，以及邏輯閘與主要輸出(primary outputs)之間的線路省略。(每一個邏輯閘至少都含有一個線路輸出到另一個邏輯閘或主要輸出)</p>
<h4 id="輸出說明"><a href="#輸出說明" class="headerlink" title="輸出說明"></a>輸出說明</h4><p>列出關鍵邏輯閘的個數。</p>
<h4 id="範例輸入-1"><a href="#範例輸入-1" class="headerlink" title="範例輸入 1"></a>範例輸入 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 4</span><br><span class="line">200</span><br><span class="line">200</span><br><span class="line">400</span><br><span class="line">250</span><br><span class="line">200</span><br><span class="line">1 2</span><br><span class="line">3 2</span><br><span class="line">3 5</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure>

<h4 id="範例輸出-1"><a href="#範例輸出-1" class="headerlink" title="範例輸出 1"></a>範例輸出 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h3 id="題解"><a href="#題解" class="headerlink" title="題解"></a>題解</h3><p>很明顯，題目是要最長的路徑，因為最後一個完成的才會是關鍵邏輯閘，並且圖是有向無環圖，我的想法是先做出反圖( f-&gt;t 存成 t-&gt;f )，接著將所有終點接到虛擬點 0，並用一次 DFS 算出所有點的最長路徑。以範測為例。</p>
<p><img src="https://tioj.ck.tp.edu.tw/pimgs/1142_2.jpg"></p>
<p>原圖的邊有 1-&gt;2, 3-&gt;2, 3-&gt;5, 和 4-&gt;5。我將它存為下圖</p>
<p><img src="https://live.staticflickr.com/65535/51706596679_dc6f022266.jpg" alt="TIOJ1142_p1"></p>
<p>可以聲稱一個性質 “對於每個點而言，只有反圖上累積路徑最長的那幾條，後面的點才會有可能是關鍵邏輯閘”，最後再做一次 DFS ，知道那些點是關鍵就可以間接算出數量了。</p>
<p>實作程式碼如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> ll N=<span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="comment">//dis存運算時間，dp 存到這個點的最長距離</span></span><br><span class="line"><span class="type">int</span> dis[N],dp[N];</span><br><span class="line"><span class="comment">//ind表示 indegree，ind[i] 為零的都是終點</span></span><br><span class="line"><span class="type">int</span> ind[N];</span><br><span class="line"><span class="comment">//圖的鄰接串列表示法</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"><span class="comment">//哪些是關鍵</span></span><br><span class="line">bitset&lt;N&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一次 DFS</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">    dp[node]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:g[node])&#123;</span><br><span class="line">        <span class="built_in">init</span>(i);</span><br><span class="line">        dp[node]=<span class="built_in">max</span>(dp[node],dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[node]+=dis[node];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二次 DFS</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> mx=<span class="number">0</span>;</span><br><span class="line">    bitset&lt;N&gt; tp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:g[node])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i]&gt;mx)&#123;</span><br><span class="line">            tp.<span class="built_in">reset</span>();</span><br><span class="line">            mx=dp[i];</span><br><span class="line">            tp[i]=<span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dp[i]==mx)&#123;</span><br><span class="line">            tp[i]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:g[node])&#123;</span><br><span class="line">        <span class="keyword">if</span>(tp[i])&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans|=tp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        cin&gt;&gt;dis[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">        <span class="type">int</span> f,t;</span><br><span class="line">        cin&gt;&gt;f&gt;&gt;t;</span><br><span class="line">        g[t].<span class="built_in">emplace_back</span>(f);</span><br><span class="line">        ind[f]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  將所有終點用點 0 連接</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ind[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            g[<span class="number">0</span>].<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  最後各跑一次就可以求出答案了</span></span><br><span class="line">    <span class="built_in">init</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ans.<span class="built_in">count</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>competition</tag>
        <tag>nhspc</tag>
        <tag>全國賽</tag>
        <tag>95全國能力競賽</tag>
      </tags>
  </entry>
  <entry>
    <title>圖論測資生成器</title>
    <url>/misc/the-test-case-builder-of-graph-theory/</url>
    <content><![CDATA[<p>最近寫了一個 GRAPH_GEN.h 檔，想說可以方便生成測資。</p>
<h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><ul>
<li>4~5 行是防禦性程式設計，避免多次引用標頭檔時發生編譯錯誤</li>
<li>7~19 行用來生成隨機數</li>
<li>21~32 行是帶有建構式的 edge 物件</li>
<li>底下就是生成測資的物件</li>
</ul>
<h2 id="具體使用"><a href="#具體使用" class="headerlink" title="具體使用"></a>具體使用</h2><ul>
<li>GenTree(n) -&gt; 生成一個有 n 個點，且無邊權的無根樹</li>
<li>GenConnectedGraph(n,m) -&gt; 生成一個有 n 個點， m 條邊，且無邊權的連通圖</li>
<li>GenGraph(n,m) -&gt; 生成一個有 n 個點， m 條邊，且無邊權的不保證連通圖</li>
<li>GenTree(n,k) -&gt; 生成一個有 n 個點，且邊權介於 1~k 的無根樹</li>
<li>GenConnectedGraph(n,m,k) -&gt; 生成一個有 n 個點， m 條邊，且邊權介於 1~k 的連通圖</li>
<li>GenGraph(n,m,k) -&gt; 生成一個有 n 個點， m 條邊，且邊權介於 1~k 的不保證連通圖</li>
</ul>
<p>前三個會回傳 <code>vector&lt;pair&lt;int,int&gt;&gt;</code> 每個皆有保證沒有自環，後三個則會回傳 <code>vector&lt;edge&gt;</code> ，以節省重複打 <code>first</code> 與 <code>second</code> 的時間</p>
<h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GRAPH_GEN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GRAPH_GEN</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> seed=chrono::<span class="built_in">steady_clock</span>().<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line"><span class="function">mt19937_64 <span class="title">rng</span><span class="params">(seed)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Rand</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    <span class="function">uniform_int_distribution&lt;ll&gt; <span class="title">dis</span><span class="params">(a,b)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dis</span>(rng);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Rand</span><span class="params">(ll a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Rand</span>(<span class="number">1</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> from,to;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> dis;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">edge</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">edge</span>(<span class="type">int</span> f,<span class="type">int</span> t,<span class="type">long</span> <span class="type">long</span> d)&#123;</span><br><span class="line">        from=f;</span><br><span class="line">        to=t;</span><br><span class="line">        dis=d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphGen</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> :</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">DSU</span>&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; dsu,rk;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">DSU</span>(<span class="type">int</span> n)&#123;</span><br><span class="line">                dsu.<span class="built_in">resize</span>(n+<span class="number">10</span>);</span><br><span class="line">                rk.<span class="built_in">resize</span>(n+<span class="number">10</span>);</span><br><span class="line">                <span class="built_in">init</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;dsu.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">                    dsu[i]=i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(dsu[a]==a)&#123;</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> dsu[a]=<span class="built_in">find</span>(dsu[a]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">find</span>(a)==<span class="built_in">find</span>(b);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="type">void</span> <span class="title">uni</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">same</span>(a,b))&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(rk[<span class="built_in">find</span>(a)]==rk[<span class="built_in">find</span>(b)])&#123;</span><br><span class="line">                    dsu[<span class="built_in">find</span>(b)]=<span class="built_in">find</span>(a);</span><br><span class="line">                    rk[a]++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rk[<span class="built_in">find</span>(a)]&gt;rk[<span class="built_in">find</span>(b)])&#123;</span><br><span class="line">                    dsu[<span class="built_in">find</span>(b)]=<span class="built_in">find</span>(a);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dsu[<span class="built_in">find</span>(a)]=<span class="built_in">find</span>(b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">public</span> :</span><br><span class="line"><span class="comment">//      nodes 1~n</span></span><br><span class="line">        <span class="type">static</span> vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; <span class="built_in">GenTree</span>(<span class="type">int</span> n)&#123;</span><br><span class="line">            <span class="function">DSU <span class="title">dsu</span><span class="params">(n)</span></span>;</span><br><span class="line">            vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(result.<span class="built_in">size</span>()&lt;n<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="type">int</span> a=<span class="built_in">Rand</span>(n),b=<span class="built_in">Rand</span>(n);</span><br><span class="line">                <span class="keyword">if</span>(!dsu.<span class="built_in">same</span>(a,b))&#123;</span><br><span class="line">                    result.<span class="built_in">emplace_back</span>(a,b);</span><br><span class="line">                    dsu.<span class="built_in">uni</span>(a,b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      n nodes m edges, m need to bigger than n-1</span></span><br><span class="line">        <span class="type">static</span> vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; <span class="built_in">GenConnectedGraph</span>(<span class="type">int</span> n,<span class="type">int</span> m)&#123;</span><br><span class="line">            vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; result=<span class="built_in">GenTree</span>(n);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m-n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">                <span class="type">int</span> a,b;</span><br><span class="line">                <span class="keyword">do</span>&#123;</span><br><span class="line">                    a=<span class="built_in">Rand</span>(n);</span><br><span class="line">                    b=<span class="built_in">Rand</span>(n);</span><br><span class="line">                &#125;<span class="keyword">while</span>(a==b);</span><br><span class="line"></span><br><span class="line">                result.<span class="built_in">emplace_back</span>(a,b);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      n nodes m edges, m need to bigger than n-1</span></span><br><span class="line">        <span class="type">static</span> vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; <span class="built_in">GenGraph</span>(<span class="type">int</span> n,<span class="type">int</span> m)&#123;</span><br><span class="line">            vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">                <span class="type">int</span> a,b;</span><br><span class="line">                <span class="keyword">do</span>&#123;</span><br><span class="line">                    a=<span class="built_in">Rand</span>(n);</span><br><span class="line">                    b=<span class="built_in">Rand</span>(n);</span><br><span class="line">                &#125;<span class="keyword">while</span>(a==b);</span><br><span class="line"></span><br><span class="line">                result.<span class="built_in">emplace_back</span>(a,b);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      nodes 1~n, and weight in 1~k</span></span><br><span class="line">        <span class="function"><span class="type">static</span> vector&lt;edge&gt; <span class="title">GenTree</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">            <span class="function">DSU <span class="title">dsu</span><span class="params">(n)</span></span>;</span><br><span class="line">            vector&lt;edge&gt; result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(result.<span class="built_in">size</span>()&lt;n<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="type">int</span> a=<span class="built_in">Rand</span>(n),b=<span class="built_in">Rand</span>(n),c=<span class="built_in">Rand</span>(k);</span><br><span class="line">                <span class="keyword">if</span>(!dsu.<span class="built_in">same</span>(a,b))&#123;</span><br><span class="line">                    result.<span class="built_in">emplace_back</span>(a,b,c);</span><br><span class="line">                    dsu.<span class="built_in">uni</span>(a,b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">static</span> vector&lt;edge&gt; <span class="title">GenConnectedGraph</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">            vector&lt;edge&gt; result=<span class="built_in">GenTree</span>(n,k);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m-n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">                <span class="type">int</span> a,b;</span><br><span class="line">                <span class="keyword">do</span>&#123;</span><br><span class="line">                    a=<span class="built_in">Rand</span>(n);</span><br><span class="line">                    b=<span class="built_in">Rand</span>(n);</span><br><span class="line">                &#125;<span class="keyword">while</span>(a==b);</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> c=<span class="built_in">Rand</span>(k);</span><br><span class="line"></span><br><span class="line">                result.<span class="built_in">emplace_back</span>(a,b,c);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">static</span> vector&lt;edge&gt; <span class="title">GenGraph</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">            vector&lt;edge&gt; result;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">                <span class="type">int</span> a,b;</span><br><span class="line">                <span class="keyword">do</span>&#123;</span><br><span class="line">                    a=<span class="built_in">Rand</span>(n);</span><br><span class="line">                    b=<span class="built_in">Rand</span>(n);</span><br><span class="line">                &#125;<span class="keyword">while</span>(a==b);</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> c=<span class="built_in">Rand</span>(k);</span><br><span class="line"></span><br><span class="line">                result.<span class="built_in">emplace_back</span>(a,b,c);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h2 id="使用範例"><a href="#使用範例" class="headerlink" title="使用範例"></a>使用範例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GRAPH_GEN.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; edges=GraphGen::<span class="built_in">GenTree</span>(<span class="number">100000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>TIOJ 1143 95_4.靈犬尋寶</title>
    <url>/contest/tioj-1143-95_4/</url>
    <content><![CDATA[<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML' async></script>

<h3 id="題目連結：1143-4-靈犬尋寶-TIOJ-INFOR-Online-Judge"><a href="#題目連結：1143-4-靈犬尋寶-TIOJ-INFOR-Online-Judge" class="headerlink" title="題目連結：1143 - 4.靈犬尋寶 | TIOJ INFOR Online Judge"></a>題目連結：<a href="https://tioj.ck.tp.edu.tw/problems/1143">1143 - 4.靈犬尋寶 | TIOJ INFOR Online Judge</a></h3><h4 id="題目敘述"><a href="#題目敘述" class="headerlink" title="題目敘述"></a>題目敘述</h4><p>正方形(左下角座標為(0,0)，右上角座標為(99,99))的格網上，有一隻靈犬要尋找一個寶物，格網上除了靈犬與寶物之外，還有一些障礙物。一般情況下，只要不超出格網的邊界，靈犬的每一步最多有 8 個方向可供選擇，如圖一；但是必須注意，只有在 A 點沒有障礙物時才可以選擇方向 1 或方向 2，只有在 B 點沒有障礙物時才可以選擇方向 3 或方向 4，只有在 C 點沒有障礙物時才可以選擇方向 5 或方向 6，只有在 D 點沒有障礙物時才可以選擇方向 7 或方向 8。如果靈犬可以從出發的位置走到寶物的位置，其總共使用的步數，理論上應有一個最小值；但是靈犬也有可能無法走到寶物的位置。過程中，靈犬不可以走到障礙物的位置上。</p>
<p><img src="https://tioj.ck.tp.edu.tw/pimgs/1143.jpg"></p>
<p>以圖二為例，有多達 4 個障礙物介於靈犬與寶物之間，但是靈犬最快只要 2 步就可以到達寶物的位置。圖三是另一個例子，靈犬的位置靠近角落，雖然只有 2 個障礙物，靈犬卻無法到達寶物的位置。</p>
<p>請撰寫一個程式，若靈犬可以從最初位置走到寶物的位置時，請列印出其使用之最少步數；若靈犬無法到達寶物的位置，請列印出單字 “\(impossible\)”。</p>
<h4 id="輸入說明"><a href="#輸入說明" class="headerlink" title="輸入說明"></a>輸入說明</h4><p>第一行為一個整數 \(n\)，代表障礙物的個數，\(0 \le n \le 1000\)。接下來的\(n\)行，每行表示一個障礙物的座標，其橫座標值與縱座標值間以一個空白隔開。 再下來的一行，表示靈犬的最初位置，其橫座標值與縱座標值間以一個空白隔開。 最後一行，代表寶物的位置，其橫座標值與縱座標值間以一個空白隔開。 注意：輸入之障礙物、靈犬、寶物皆在不同位置。所有橫、縱座標值均為介於 \(0\)(含)至\(99(含)\) 之間的整數。</p>
<h4 id="輸出說明"><a href="#輸出說明" class="headerlink" title="輸出說明"></a>輸出說明</h4><p>依行走之規則，若靈犬可以從其位置走到寶物的位置時，請列印出其使用之最少步數；若靈犬無法到達寶物的位置，請列印出單字 “\(impossible\)”。</p>
<h4 id="範例輸入-1"><a href="#範例輸入-1" class="headerlink" title="範例輸入 1"></a>範例輸入 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">3 6</span><br><span class="line">4 5</span><br><span class="line">5 4</span><br><span class="line">6 3</span><br><span class="line">3 3</span><br><span class="line">7 5</span><br></pre></td></tr></table></figure>

<h4 id="範例輸出-1"><a href="#範例輸出-1" class="headerlink" title="範例輸出 1"></a>範例輸出 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h4 id="範例輸入-2"><a href="#範例輸入-2" class="headerlink" title="範例輸入 2"></a>範例輸入 2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">1 1</span><br><span class="line">0 2</span><br><span class="line">0 1</span><br><span class="line">4 3</span><br></pre></td></tr></table></figure>

<h4 id="範例輸出-2"><a href="#範例輸出-2" class="headerlink" title="範例輸出 2"></a>範例輸出 2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">impossible</span><br></pre></td></tr></table></figure>

<h3 id="題解"><a href="#題解" class="headerlink" title="題解"></a>題解</h3><p>這很明顯是圖的 BFS，而為何不是 DFS 呢？因為題目要求輸出最短的路徑，而在 DFS 的時候，只要下一步能走就一直走，因此不一定會是最短路徑。</p>
<p>在 BFS 時，要先判斷座標是否存在，再看是否會被阻擋，以及是否已經到過，最後還有目標位置有無障礙物。若以上條件均通過才能將他推入佇列。</p>
<p>實作程式碼如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//這樣在宣告 long long 時可以用 ll 代替</span></span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">//常數 N 表示最大地圖長寬，多 5 以求保險</span></span><br><span class="line"><span class="type">const</span> ll N=<span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//位置</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pos</span>&#123;</span><br><span class="line">    <span class="type">int</span> r,c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(Pos a,Pos b)&#123;</span><br><span class="line">        <span class="built_in">return</span> (a.r==b.r &amp;&amp; a.c==b.c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>+=(Pos b)&#123;</span><br><span class="line">        r+=b.r;</span><br><span class="line">        c+=b.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//位置變化量</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Deg</span>&#123;</span><br><span class="line">    Pos pos;</span><br><span class="line">    Pos lmt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> Deg d[<span class="number">8</span>]=&#123;</span><br><span class="line">    &#123;Pos&#123; <span class="number">3</span>, <span class="number">1</span>&#125;,Pos&#123; <span class="number">1</span>, <span class="number">0</span>&#125;&#125;,</span><br><span class="line">    &#123;Pos&#123; <span class="number">3</span>,<span class="number">-1</span>&#125;,Pos&#123; <span class="number">1</span>, <span class="number">0</span>&#125;&#125;,</span><br><span class="line">    &#123;Pos&#123; <span class="number">1</span>,<span class="number">-3</span>&#125;,Pos&#123; <span class="number">0</span>,<span class="number">-1</span>&#125;&#125;,</span><br><span class="line">    &#123;Pos&#123;<span class="number">-1</span>,<span class="number">-3</span>&#125;,Pos&#123; <span class="number">0</span>,<span class="number">-1</span>&#125;&#125;,</span><br><span class="line">    &#123;Pos&#123;<span class="number">-3</span>, <span class="number">1</span>&#125;,Pos&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;,</span><br><span class="line">    &#123;Pos&#123;<span class="number">-3</span>,<span class="number">-1</span>&#125;,Pos&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;,</span><br><span class="line">    &#123;Pos&#123;<span class="number">-1</span>, <span class="number">3</span>&#125;,Pos&#123; <span class="number">0</span>, <span class="number">1</span>&#125;&#125;,</span><br><span class="line">    &#123;Pos&#123; <span class="number">1</span>, <span class="number">3</span>&#125;,Pos&#123; <span class="number">0</span>, <span class="number">1</span>&#125;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//  mp 存那些位置有障礙物</span></span><br><span class="line">    bitset&lt;N&gt; mp[N];</span><br><span class="line">    <span class="type">int</span> ct[N][N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="type">int</span> r,c;</span><br><span class="line">        cin&gt;&gt;r&gt;&gt;c;</span><br><span class="line">        mp[r][c]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Pos pos,loot;</span><br><span class="line">    cin&gt;&gt;pos.r&gt;&gt;pos.c;</span><br><span class="line">    cin&gt;&gt;loot.r&gt;&gt;loot.c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((<span class="built_in">abs</span>(pos.r-loot.r)+<span class="built_in">abs</span>(pos.c-loot.c)) &amp; <span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;impossible&quot;</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> isf=<span class="literal">false</span>;</span><br><span class="line"><span class="comment">//  初始化</span></span><br><span class="line">    queue&lt;Pos&gt; bfs;</span><br><span class="line">    bfs.<span class="built_in">push</span>(pos);</span><br><span class="line"><span class="comment">//  用 1 初始化避免以為沒到過</span></span><br><span class="line">    ct[pos.r][pos.c]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!bfs.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        Pos now=bfs.<span class="built_in">front</span>();</span><br><span class="line">        bfs.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(now==loot)&#123;</span><br><span class="line"><span class="comment">//          因為初始化為 1，因此就要將答案 -1</span></span><br><span class="line">            cout&lt;&lt;ct[now.r][now.c]<span class="number">-1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            isf=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;++i)&#123;</span><br><span class="line">            Pos next=now;</span><br><span class="line">            next+=d[i].pos;</span><br><span class="line"><span class="comment">//          座標存在與否</span></span><br><span class="line">            <span class="keyword">if</span>(next.r&lt;<span class="number">100</span> &amp;&amp; next.c&lt;<span class="number">100</span> &amp;&amp; next.r&gt;=<span class="number">0</span> &amp;&amp; next.c&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//              目標位置有無障礙物</span></span><br><span class="line">                <span class="keyword">if</span>(!mp[next.r][next.c])&#123;</span><br><span class="line"><span class="comment">//                  是否會被阻擋</span></span><br><span class="line">                    <span class="keyword">if</span>(!mp[now.r+d[i].lmt.r][now.c+d[i].lmt.c])&#123;</span><br><span class="line"><span class="comment">//                      是否已經到過</span></span><br><span class="line">                        <span class="keyword">if</span>(!ct[next.r][next.c])&#123;</span><br><span class="line">                            bfs.<span class="built_in">push</span>(next);</span><br><span class="line">                            ct[next.r][next.c]=ct[now.r][now.c]+<span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!isf)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;impossible&quot;</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//處理多筆輸入 (用於ZeroJudge:b059)，但單筆輸入也不會錯</span></span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>contest</category>
      </categories>
      <tags>
        <tag>oj</tag>
        <tag>onlinejudge</tag>
        <tag>competition</tag>
        <tag>nhspc</tag>
        <tag>全國賽</tag>
        <tag>95全國能力競賽</tag>
      </tags>
  </entry>
</search>
